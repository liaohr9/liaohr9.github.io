<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo-fluid搜索引擎验证</title>
    <link href="/2025/08/07/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/hexo-fluid%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%AA%8C%E8%AF%81/"/>
    <url>/2025/08/07/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/hexo-fluid%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo搜索引擎验证"><a href="#Hexo搜索引擎验证" class="headerlink" title="Hexo搜索引擎验证"></a>Hexo搜索引擎验证</h1><blockquote><p>本文记录了我在给 Hexo 博客添加 Google 和 Bing 搜索引擎验证过程中踩过的坑，以及最终找到的 <strong>优雅解法</strong>。</p><p>适配 Hexo 5.x + Fluid 主题</p></blockquote><hr><h2 id="官网申请验证"><a href="#官网申请验证" class="headerlink" title="官网申请验证"></a>官网申请验证</h2><ul><li>📘 Google Search Console：<a href="https://search.google.com/search-console">https://search.google.com/search-console</a></li><li>📘 Bing Webmaster Tools：<a href="https://www.bing.com/webmasters/">https://www.bing.com/webmasters/</a></li></ul><p>去官方网站，注册登录，然后选择URL方式，输入你的网址，然后选择用meta标签验证。</p><h2 id="注入meta验证"><a href="#注入meta验证" class="headerlink" title="注入meta验证"></a>注入meta验证</h2><h3 id="失败尝试"><a href="#失败尝试" class="headerlink" title="失败尝试"></a>失败尝试</h3><h4 id="❌-方法-1：使用-hexo-inject-插件注入-lt-meta-gt"><a href="#❌-方法-1：使用-hexo-inject-插件注入-lt-meta-gt" class="headerlink" title="❌ 方法 1：使用 hexo-inject 插件注入 &lt;meta&gt;"></a>❌ 方法 1：使用 <code>hexo-inject</code> 插件注入 <code>&lt;meta&gt;</code></h4><p>网上很多老教程推荐用 <code>hexo-inject</code> 插件来在 <code>&lt;head&gt;</code> 里注入 meta 标签，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<br>  <span class="hljs-string">&#x27;head_begin&#x27;</span>,<br>  <span class="hljs-string">&#x27;&lt;meta name=&quot;google-site-verification&quot; content=&quot;xxx&quot; /&gt;&#x27;</span>,<br>  <span class="hljs-string">&#x27;default&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>但是，这个方法 <strong>在 Hexo 5.x + Fluid 主题下是无效的</strong>，原因如下：</p><ul><li><code>hexo-inject</code> 插件已经 <strong>多年未维护</strong>，对新版本不兼容</li><li>Hexo 和主题都已经内置了更强大的注入机制，插件反而冲突</li></ul><h4 id="❌-方法-2：直接改config"><a href="#❌-方法-2：直接改config" class="headerlink" title="❌ 方法 2：直接改config"></a>❌ 方法 2：直接改config</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">google_site_verification:</span> <span class="hljs-string">qZ_SWeFH1DKuHoF65EsrPOowD_ekRYBX5hTT2MDf06A</span><br></code></pre></td></tr></table></figure><p>这个方法可以注入，但是注入的位置在body，而谷歌要求 meta 标签必须在 <code>&lt;head&gt;</code> 中，所以失败。</p><hr><h3 id="✅-正确姿势：Hexo-内置注入-JS-文件注入-meta-标签"><a href="#✅-正确姿势：Hexo-内置注入-JS-文件注入-meta-标签" class="headerlink" title="✅ 正确姿势：Hexo 内置注入 + JS 文件注入 meta 标签"></a>✅ 正确姿势：Hexo 内置注入 + JS 文件注入 meta 标签</h3><p>在<code>项目根目录/scripts/</code>中创建一个 JS 文件，动态注入 meta 标签到 <code>&lt;head&gt;</code> 中。（名字随意啦）</p><p>内容如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<br>  <span class="hljs-string">&#x27;head_begin&#x27;</span>,<br>  <span class="hljs-string">&#x27;&lt;meta name=&quot;google-site-verification&quot; content=&quot;qZ_SWeFH****************5hTT2MDf06A&quot; /&gt;&#x27;</span>,<br>  <span class="hljs-string">&#x27;default&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>然后即可，他会自己注入</p><p>生成代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean &amp;&amp; hexo g<br></code></pre></td></tr></table></figure><p>在浏览器中查看网页源码，确认 <code>&lt;head&gt;</code> 中已经有了 Google 的验证 meta 标签。</p><h3 id="✅-一、Google-站点验证"><a href="#✅-一、Google-站点验证" class="headerlink" title="✅ 一、Google 站点验证"></a>✅ 一、Google 站点验证</h3><p>部署完成后，浏览器访问你的网站，查看网页源码，确认看到：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;google-site-verification&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;qZ_SWeFH1DKuHo****************hTT2MDf06A&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Google Search Console 验证通过 ✅</p><hr><h3 id="✅-二、Bing-站点验证（Fluid-主题不支持，需要手动-JS-注入）"><a href="#✅-二、Bing-站点验证（Fluid-主题不支持，需要手动-JS-注入）" class="headerlink" title="✅ 二、Bing 站点验证（Fluid 主题不支持，需要手动 JS 注入）"></a>✅ 二、Bing 站点验证（Fluid 主题不支持，需要手动 JS 注入）</h3><p>Fluid 没有 Bing 验证的内置字段。Bing 要求也在 <code>&lt;head&gt;</code> 注入一段：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;msvalidate.01&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;XXXXXX&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>但是bing可以选择从谷歌导入，于是乎省去了很多麻烦</p><hr><h2 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h2><p>申请验证之后还要等很久，主动导入sitemap会快很多</p><h3 id="✅-一、生成-sitemap"><a href="#✅-一、生成-sitemap" class="headerlink" title="✅ 一、生成 sitemap"></a>✅ 一、生成 sitemap</h3><p>在 Hexo 中生成 sitemap 非常简单，只需安装 <code>hexo-generator-sitemap</code> 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-sitemap --save<br></code></pre></td></tr></table></figure><p>添加到网站根目录的 <code>_config.yml</code> 文件中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># SEO and Sitemap</span><br><span class="hljs-attr">sitemap:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">sitemap.xml</span> <span class="hljs-comment"># 文件名</span><br>  <span class="hljs-attr">rel:</span> <span class="hljs-literal">true</span>         <span class="hljs-comment"># 在 &lt;head&gt; 里插入 rel=&quot;sitemap&quot;</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-literal">true</span>        <span class="hljs-comment"># 在 sitemap 中包含标签</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 在 sitemap 中包含分类  </span><br>  <span class="hljs-attr">publications:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 生成的 sitemap 是否包含公开的页面</span><br></code></pre></td></tr></table></figure><p>生成并部署 sitemap：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g<br></code></pre></td></tr></table></figure><h3 id="✅-二、提交-sitemap"><a href="#✅-二、提交-sitemap" class="headerlink" title="✅ 二、提交 sitemap"></a>✅ 二、提交 sitemap</h3><p>在 Google Search Console 和 Bing Webmaster Tools 中，分别提交你的 sitemap URL：</p><p>然后静静等待，搜索引擎会自动抓取你的网站，收录你的内容。</p><p><img src="gg.jpg" alt=""></p><p><img src="bing.jpg" alt=""></p><h2 id="📎-相关资源-amp-参考链接"><a href="#📎-相关资源-amp-参考链接" class="headerlink" title="📎 相关资源 &amp; 参考链接"></a>📎 相关资源 &amp; 参考链接</h2><ul><li>📘 Google Search Console：<a href="https://search.google.com/search-console">https://search.google.com/search-console</a></li><li>📘 Bing Webmaster Tools：<a href="https://www.bing.com/webmasters/">https://www.bing.com/webmasters/</a></li><li>💡 Fluid 官方文档：<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></li><li>🧪 插件 hexo-inject（已弃用）：<a href="https://github.com/hexojs/hexo-inject">https://github.com/hexojs/hexo-inject</a></li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo-fluid搜索引擎</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轻量化DeepSeek本地App</title>
    <link href="/2025/08/06/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/%E8%BD%BB%E9%87%8F%E5%8C%96DeepSeek%E6%9C%AC%E5%9C%B0App/"/>
    <url>/2025/08/06/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/%E8%BD%BB%E9%87%8F%E5%8C%96DeepSeek%E6%9C%AC%E5%9C%B0App/</url>
    
    <content type="html"><![CDATA[<h1 id="DS本地化"><a href="#DS本地化" class="headerlink" title="DS本地化"></a>DS本地化</h1><p>一个基于 Tauri 的桌面应用，提供 DeepSeek Chat 的本地化体验。</p><p><a href="https://github.com/liaohr9/DeepSeekApp">https://github.com/liaohr9/DeepSeekApp</a></p><h2 id="项目动因"><a href="#项目动因" class="headerlink" title="项目动因"></a>项目动因</h2><p>平时一直有使用网页版 DeepSeek Chat 的习惯，但在浏览器中使用时总感觉不太舒服，经常关闭浏览器的时候就会退出，然后再次载入的时候又丢失了聊天记录，所以就想做一个本地化的桌面应用，让这个网页一直挂载后台，随时可以打开和关闭。为了极致的性能、大小和体验，选择了 Tauri 框架来构建这个应用。</p><h2 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h2><ul><li>🖥️ 原生桌面体验</li><li>🎨 无边框窗口设计</li><li>📱 响应式界面 (1200×800)</li><li>🔗 直接访问 DeepSeek Chat</li><li>快捷键支持：Alt + Z 关闭和打开窗口</li></ul><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li><strong>前端</strong>: DeepSeek Chat (Web)</li><li><strong>框架</strong>: Tauri 2.0</li><li><strong>语言</strong>: Rust + Web Technologies</li></ul><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li>Node.js</li><li>Rust</li><li>Tauri CLI</li></ul><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure><h3 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run tauri dev<br></code></pre></td></tr></table></figure><h3 id="构建应用"><a href="#构建应用" class="headerlink" title="构建应用"></a>构建应用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run build<br></code></pre></td></tr></table></figure><h3 id="多平台构建"><a href="#多平台构建" class="headerlink" title="多平台构建"></a>多平台构建</h3><h4 id="本地构建（Windows）"><a href="#本地构建（Windows）" class="headerlink" title="本地构建（Windows）"></a>本地构建（Windows）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run build                    <span class="hljs-comment"># Windows x64</span><br></code></pre></td></tr></table></figure><h4 id="苹果-M-芯片构建"><a href="#苹果-M-芯片构建" class="headerlink" title="苹果 M 芯片构建"></a>苹果 M 芯片构建</h4><p>由于交叉编译的复杂性，建议使用 GitHub Actions 进行构建：</p><ol><li>推送代码到 GitHub</li><li>创建 tag 触发发布构建：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git tag v1.0.0<br>git push origin v1.0.0<br></code></pre></td></tr></table></figure></li><li>GitHub Actions 会自动为所有平台（包括苹果 M 芯片）构建并发布</li></ol><h4 id="支持的平台"><a href="#支持的平台" class="headerlink" title="支持的平台"></a>支持的平台</h4><ul><li>Windows x64</li><li>macOS Intel (x86_64)</li><li>macOS Apple Silicon (ARM64)</li><li>Linux x64</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>应用配置位于 <code>src-tauri/tauri.conf.json</code>，主要设置：</p><ul><li>产品名称: “ds本地化”</li><li>窗口尺寸: 1200×800</li><li>无边框设计</li><li>直接加载远程内容</li></ul><h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2><p>MIT License</p>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DeepSeek, Tauri, Rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vite创建Vue + Tauri项目</title>
    <link href="/2025/08/06/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/Vite%E5%88%9B%E5%BB%BAVue-Tauri%E9%A1%B9%E7%9B%AE/"/>
    <url>/2025/08/06/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/Vite%E5%88%9B%E5%BB%BAVue-Tauri%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>确保已安装:</p><ul><li>Node.js (推荐 v20.19.0 或更高版本)</li><li>Rust (通过 rustup 安装)</li></ul><h1 id="1-创建Vue项目"><a href="#1-创建Vue项目" class="headerlink" title="1. 创建Vue项目"></a>1. 创建Vue项目</h1><p>使用Vite初始化Vue项目:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm create vite@latest yourRepoName<br></code></pre></td></tr></table></figure><p>完整输出示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">Need to install the following packages:<br>  create-vite@7.0.3<br>Ok to proceed? (y) y<br><br>✔ Select a framework: › Vue<br>✔ Select a variant: › TypeScript<br><br>Scaffolding project <span class="hljs-keyword">in</span> /path/to/yourRepoName...<br><br>Done. Now run:<br><br>  <span class="hljs-built_in">cd</span> yourRepoName<br>  npm install<br>  npm run dev<br></code></pre></td></tr></table></figure><h1 id="2-安装Tauri依赖"><a href="#2-安装Tauri依赖" class="headerlink" title="2. 安装Tauri依赖"></a>2. 安装Tauri依赖</h1><p>进入项目目录并安装Tauri CLI:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> yourRepoName<br>cnpm install -D @tauri-apps/cli@next<br></code></pre></td></tr></table></figure><h1 id="3-初始化Tauri配置"><a href="#3-初始化Tauri配置" class="headerlink" title="3. 初始化Tauri配置"></a>3. 初始化Tauri配置</h1><p>运行初始化命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx tauri init<br></code></pre></td></tr></table></figure><p>完整交互过程:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">✔ What is your app name? · yourAppName<br>✔ What should the window title be? · yourAppName<br>✔ Where are your web assets located? · ../dist<br>✔ What is the url of your dev server? · http://localhost:3000<br>✔ What is your frontend dev <span class="hljs-built_in">command</span>? · npm run dev<br>✔ What is your frontend build <span class="hljs-built_in">command</span>? · npm run build<br></code></pre></td></tr></table></figure><h1 id="4-安装项目依赖"><a href="#4-安装项目依赖" class="headerlink" title="4. 安装项目依赖"></a>4. 安装项目依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install<br></code></pre></td></tr></table></figure><h1 id="5-Rust镜像配置-可选"><a href="#5-Rust镜像配置-可选" class="headerlink" title="5. Rust镜像配置(可选)"></a>5. Rust镜像配置(可选)</h1><p>对于国内用户，可以设置Rust镜像加速:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># Windows PowerShell</span><br><span class="hljs-variable">$ENV:RUSTUP_DIST_SERVER</span>=<span class="hljs-string">&#x27;https://mirrors.ustc.edu.cn/rust-static&#x27;</span><br><span class="hljs-variable">$ENV:RUSTUP_UPDATE_ROOT</span>=<span class="hljs-string">&#x27;https://mirrors.ustc.edu.cn/rust-static/rustup&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Linux/macOS</span><br><span class="hljs-built_in">export</span> RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static<br><span class="hljs-built_in">export</span> RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup<br></code></pre></td></tr></table></figure><h2 id="项目结构说明"><a href="#项目结构说明" class="headerlink" title="项目结构说明"></a>项目结构说明</h2><p>初始化完成后，典型项目结构如下:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">yourRepoName/<br>├── node_modules/<br>├── public/<br>├── <span class="hljs-attribute">src</span>/<br>│   ├── assets/<br>│   ├── components/<br>│   └── App<span class="hljs-selector-class">.vue</span><br>├── <span class="hljs-attribute">src</span>-tauri/<br>│   ├── Cargo<span class="hljs-selector-class">.toml</span><br>│   ├── tauri<span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.json</span><br>│   └── <span class="hljs-attribute">src</span>/<br>│       └── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.rs</span><br>├── package<span class="hljs-selector-class">.json</span><br>├── tsconfig<span class="hljs-selector-class">.json</span><br>└── vite<span class="hljs-selector-class">.config</span>.ts<br></code></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><strong>开发模式:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run dev<br></code></pre></td></tr></table></figure></p><p><strong>构建Web应用:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run build<br></code></pre></td></tr></table></figure></p><p><strong>构建Tauri应用:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx tauri build<br></code></pre></td></tr></table></figure><br>首次可能很慢，因为需要下载Rust工具链。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>确保Node.js版本符合要求</li><li>首次构建可能需要较长时间下载Rust工具链</li><li>如果遇到网络问题，建议配置国内镜像源</li><li>开发时保持前端开发服务器运行(npm run dev)</li></ol>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vite, Vue, Tauri</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>飞飞Agent-AI笔记</title>
    <link href="/2025/08/05/%E8%AE%BA%E6%96%87/%E9%A3%9E%E9%A3%9EAgent-AI%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/08/05/%E8%AE%BA%E6%96%87/%E9%A3%9E%E9%A3%9EAgent-AI%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="AgentAI具身智能笔记"><a href="#AgentAI具身智能笔记" class="headerlink" title="AgentAI具身智能笔记"></a>AgentAI具身智能笔记</h1><h2 id="引言：当前基础模型的挑战与局限"><a href="#引言：当前基础模型的挑战与局限" class="headerlink" title="引言：当前基础模型的挑战与局限"></a>引言：当前基础模型的挑战与局限</h2><p>目前，LLM（大型语言模型）和 VLM（视觉语言模型）的基础模型在具身人工智能领域的性能仍然有限，特别是在理解、生成、编辑和在未见环境或场景中交互方面存在明显不足。</p><h2 id="AI-代理的核心能力与现实局限"><a href="#AI-代理的核心能力与现实局限" class="headerlink" title="AI 代理的核心能力与现实局限"></a>AI 代理的核心能力与现实局限</h2><p>人工智能代理能够根据其训练和输入数据进行解释、预测和响应。虽然这些能力非常先进且在不断改进，但认识到它们的局限性以及底层训练数据的影响至关重要。</p><h3 id="AI-代理系统的四大核心能力"><a href="#AI-代理系统的四大核心能力" class="headerlink" title="AI 代理系统的四大核心能力"></a>AI 代理系统的四大核心能力</h3><p><strong>1. 预测建模能力</strong><br>人工智能代理可以根据历史数据和趋势预测可能的结果或建议后续步骤。例如，它们能够预测文本的后续内容、问题的答案、机器人的下一步动作或场景的解决方案。</p><p><strong>2. 智能决策能力</strong><br>在某些应用中，人工智能代理可以根据其推理做出决策。通常，代理会根据最有可能实现特定目标的因素做出决策。对于推荐系统等人工智能应用，代理可以根据其对用户偏好的推断来决定推荐哪些产品或内容。</p><p><strong>3. 模糊性处理能力</strong><br>人工智能代理通常可以通过基于上下文和训练推断出最可能的解释来处理模糊输入。然而，它们这样做的能力受到其训练数据和算法范围的限制。</p><p><strong>4. 持续改进潜力</strong><br>虽然一些人工智能代理能够从新数据和交互中学习，但许多大型语言模型在训练后并不会持续更新其知识库或内部表征。它们的推理通常仅基于上次训练更新之前可用的数据。</p><h2 id="突破性创新：增强交互代理与无限代理概念"><a href="#突破性创新：增强交互代理与无限代理概念" class="headerlink" title="突破性创新：增强交互代理与无限代理概念"></a>突破性创新：增强交互代理与无限代理概念</h2><p>We show augmented interactive agents for multi-modality and cross reality-agnostic integration with an emergence mechanism in Fig. <a href="https://ar5iv.labs.arxiv.org/html/2401.03568?_immersive_translate_auto_translate=1#S2.F2" title="Figure 2 ‣ 2 Agent AI Integration ‣ Agent AI: Surveying the Horizons of Multimodal Interaction">2</a>. An AI agent requires collecting extensive training data for every new task, which can be costly or impossible for many domains. In this study, we develop an infinite agent that learns to transfer memory information from general foundation models (e.g., GPT-X, DALL-E) to novel domains or scenarios for scene understanding, generation, and interactive editing in physical or virtual worlds.</p><p>如图2所示，研究团队展示了用于多模态和跨现实不可知论集成的增强交互代理，该代理具有涌现机制。传统上，AI代理需要为每个新任务收集大量的训练数据，这对于许多领域来说可能是成本高昂甚至不可能实现的。<strong>在本研究中，我们开发了一个革命性的”无限代理”（Infinite Agent），它能够学习将记忆信息从通用基础模型（例如GPT-X、DALL-E）迁移到新的领域或场景，以便在物理或虚拟世界中进行场景理解、生成和交互式编辑。</strong></p><h3 id="RoboGen：无限代理在机器人领域的实际应用"><a href="#RoboGen：无限代理在机器人领域的实际应用" class="headerlink" title="RoboGen：无限代理在机器人领域的实际应用"></a>RoboGen：无限代理在机器人领域的实际应用</h3><p>An application of such an infinite agent in robotics is RoboGen Wang et al. In this study, the authors propose a pipeline that autonomously run the cycles of task proposition, environment generation, and skill learning. RoboGen is an effort to transfer the knowledge embedded in large models to robotics.</p><p>RoboGen Wang等人的研究成果就是这种无限代理在机器人领域的一个突破性应用。在这项研究中，作者提出了一个创新性流程，可以自主运行任务提议、环境生成和技能学习的循环。<strong>RoboGen致力于将大型模型中嵌入的知识迁移到机器人技术中。</strong></p><h3 id="RoboGen-系统架构详解"><a href="#RoboGen-系统架构详解" class="headerlink" title="RoboGen 系统架构详解"></a>RoboGen 系统架构详解</h3><p><strong>RoboGen的概要：</strong> 这是一种旨在利用生成模型的最新进展来扩展模拟机器人学习的新范式。生成模拟主张为模拟中各种机器人技能学习所需的所有阶段自主生成信息：从高级任务和技能建议到依赖于任务的场景描述、资产选择和生成、策略学习选择和训练监督。这些信息随后用于大规模技能训练，使机器人能够获得所建议的技能。</p><p>在本文中，作为这一所提范式的初步实现，我们提出了<strong>RoboGen</strong>，这是一个机器人代理，它通过自我引导的提议-生成-学习循环不断生成新技能：</p><ol><li><strong>技能提议阶段</strong>：首先自我提出要学习的技能</li><li><strong>环境构建阶段</strong>：根据所提出的任务生成所需的资产并在模拟中构建场景</li><li><strong>任务描述与分解</strong>：用自然语言描述标记任务，将任务分解为子任务</li><li><strong>学习方法选择</strong>：选择最佳学习方法（强化学习、运动规划或轨迹优化）</li><li><strong>训练监督设计</strong>：设计适当的训练监督（例如奖励函数）</li><li><strong>策略学习执行</strong>：最后进行策略学习以解决所提出的任务</li></ol><p>我们提出的范式的一个显著优势在于，它精心选择了从当代基础模型中提取哪些知识模式。</p><h2 id="从模仿学习到解耦学习的范式转变"><a href="#从模仿学习到解耦学习的范式转变" class="headerlink" title="从模仿学习到解耦学习的范式转变"></a>从模仿学习到解耦学习的范式转变</h2><h3 id="模仿学习的挑战与解决方案"><a href="#模仿学习的挑战与解决方案" class="headerlink" title="模仿学习的挑战与解决方案"></a>模仿学习的挑战与解决方案</h3><p>Agents are typically trained using a continuous feedback loop in Reinforcement Learning (RL) or Imitation Learning (IL), starting with a randomly initialized policy. However, this approach faces leader-board in obtaining initial rewards in unfamiliar environments, particularly when rewards are sparse or only available at the end of a long-step interaction. Thus, a superior solution is to use an infinite-memory agent trained through IL, which can learn policies from expert data, improving exploration and utilization of unseen environmental space with emergent infrastructure as shown in Fig. <a href="https://ar5iv.labs.arxiv.org/html/2401.03568?_immersive_translate_auto_translate=1#S2.F3" title="Figure 3 ‣ Decoupling → Generalization. ‣ 2.2.4 Interpretability and Explainability ‣ 2.2 Agent AI with Large Foundation Models ‣ 2 Agent AI Integration ‣ Agent AI: Surveying the Horizons of Multimodal Interaction">3</a>. With expert characteristics to help the agent explore better and utilize the unseen environmental space. Agent AI, can learn policies and new paradigm flow directly from expert data.</p><p>代理通常使用强化学习(RL)或模仿学习(IL)中的连续反馈循环进行训练，从随机初始化的策略开始。然而，这种方法在不熟悉的环境中获取初始奖励时面临排行榜问题，特别是当奖励稀疏或仅在长步交互结束时可用时。因此，一个更好的解决方案是使用通过IL训练的无限内存代理，它可以从专家数据中学习策略，通过如图3所示的新兴基础设施改进对未知环境空间的探索和利用。专家特性可以帮助代理更好地探索和利用未知环境空间。代理AI可以直接从专家数据中学习策略和新范式流。</p><h3 id="传统模仿学习的局限性"><a href="#传统模仿学习的局限性" class="headerlink" title="传统模仿学习的局限性"></a>传统模仿学习的局限性</h3><p>Traditional IL has an agent mimicking an expert demonstrator’s behavior to learn a policy. However, learning the expert policy directly may not always be the best approach, as the agent may not generalize well to unseen situations. To tackle this, we propose learning an agent with in-context prompt or a implicit reward function that captures key aspects of the expert’s behavior, as shown in Fig. <a href="https://ar5iv.labs.arxiv.org/html/2401.03568?_immersive_translate_auto_translate=1#S2.F3" title="Figure 3 ‣ Decoupling → Generalization. ‣ 2.2.4 Interpretability and Explainability ‣ 2.2 Agent AI with Large Foundation Models ‣ 2 Agent AI Integration ‣ Agent AI: Surveying the Horizons of Multimodal Interaction">3</a>. This equips the infinite memory agent with physical-world behavior data for task execution, learned from expert demonstrations. It helps overcome existing imitation learning drawbacks like the need for extensive expert data and potential errors in complex tasks. The key idea behind the Agent AI has two parts: 1) the infinite agent that collects physical-world expert demonstrations as state-action pairs and 2) the virtual environment that imitates the agent generator. The imitating agent produces actions that mimic the expert’s behavior, while the agent learns a policy mapping from states to actions by reducing a loss function of the disparity between the expert’s actions and the actions generated by the learned policy.</p><p>传统的IL（模仿学习）会模仿专家演示者的行为来学习策略。然而，直接学习专家策略并非最佳方法，因为代理可能无法很好地泛化到未知情境。为了解决这个问题，我们建议学习一个具有情境提示或隐式奖励函数的代理，该函数可以捕捉专家行为的关键方面，如图3所示。这使得无限记忆代理能够从专家演示中学习到物理世界的行为数据，用于执行任务。这有助于克服现有的模仿学习的缺点，例如需要大量的专家数据以及在复杂任务中可能出现的错误。</p><p><strong>Agent AI背后的关键思想包含两个部分：</strong></p><ol><li><strong>无限代理</strong>：收集物理世界专家演示作为状态-动作对</li><li><strong>虚拟环境</strong>：模仿代理生成器</li></ol><p>模仿代理会生成模仿专家行为的动作，而代理则通过减少专家动作与学习到的策略生成的动作之间的差异的损失函数来学习从状态到动作的策略映射。</p><h3 id="作者的个人见解"><a href="#作者的个人见解" class="headerlink" title="作者的个人见解"></a>作者的个人见解</h3><blockquote><p>本人之前也一直觉得传统的模仿学习，而且就是在完全的复刻那一个轨迹的分布。呃，真的完全缺少了最基本的泛化性。稍微变一点点，位置偏了一点点就做不出来了。或者说你把那个视觉去掉眼基本上能做出来。和 replay 没有什么区别。</p></blockquote><h2 id="解耦机制：从局限走向泛化"><a href="#解耦机制：从局限走向泛化" class="headerlink" title="解耦机制：从局限走向泛化"></a>解耦机制：从局限走向泛化</h2><h3 id="解耦学习的核心理念"><a href="#解耦学习的核心理念" class="headerlink" title="解耦学习的核心理念"></a>解耦学习的核心理念</h3><p>Rather than relying on a task-specific reward function, the agent learns from expert demonstrations, which provide a diverse set of state-action pairs covering various task aspects. The agent then learns a policy that maps states to actions by imitating the expert’s behavior. Decoupling in imitation learning refers to separating the learning process from the task-specific reward function, allowing the policy to generalize across different tasks without explicit reliance on the task-specific reward function. By decoupling, the agent can learn from expert demonstrations and learn a policy that is adaptable to a variety of situations. Decoupling enables transfer learning, where a policy learned in one domain can adapt to others with minimal fine-tuning. By learning a general policy that is not tied to a specific reward function, the agent can leverage the knowledge it acquired in one task to perform well in other related tasks. Since the agent does not rely on a specific reward function, it can adapt to changes in the reward function or environment without the need for significant retraining. This makes the learned policy more robust and generalizable across different environments. Decoupling in this context refers to the separation of two tasks in the learning process: learning the reward function and learning the optimal policy.</p><p>智能体并非依赖于特定任务的奖励函数，而是从专家演示中学习，这些演示提供了涵盖各种任务方面的多样化状态-动作对。然后，智能体通过模仿专家的行为来学习将状态映射到动作的策略。模仿学习中的解耦是指将学习过程与特定任务的奖励函数分离，从而使策略能够在不同任务之间进行泛化，而无需明确依赖特定任务的奖励函数。通过解耦，智能体可以从专家演示中学习，并学习出一种能够适应各种情况的策略。解耦支持迁移学习，即在一个领域学习到的策略只需进行少量微调即可适应其他领域。通过学习不依赖于特定奖励函数的通用策略，智能体可以利用其在一项任务中获得的知识在其他相关任务中表现出色。由于智能体不依赖于特定的奖励函数，它可以适应奖励函数或环境的变化，而无需进行大量的再训练。这使得学习到的策略更加稳健，并且在不同环境中具有泛化能力。这里所说的解耦是指学习过程中两个任务的分离：学习奖励函数和学习最优策略。</p><h3 id="解耦机制的深度解析"><a href="#解耦机制的深度解析" class="headerlink" title="解耦机制的深度解析"></a>解耦机制的深度解析</h3><p><strong>传统强化学习的问题：</strong></p><ul><li>严重依赖<strong>任务特定的奖励函数</strong>，泛化性差，迁移性弱</li></ul><p><strong>模仿学习的转变：</strong></p><ul><li><strong>用专家演示替代奖励函数</strong>作为学习信号</li><li>获得覆盖不同任务场景的多样化状态-动作对</li></ul><p><strong>解耦的含义：</strong></p><ul><li>将<strong>策略学习</strong>与<strong>奖励函数设计</strong>彻底分离</li><li>不再需要针对每个任务重新定义reward</li></ul><p><strong>带来的好处：</strong></p><ul><li>策略能<strong>跨任务泛化</strong></li><li>支持<strong>迁移学习</strong>：原任务学到的策略可迁移到新任务，微调成本低</li><li>对环境/目标变化更鲁棒，无需大规模再训练</li></ul><p><strong>总结：</strong></p><ul><li>解耦 = 泛化 + 可迁移 + 鲁棒性提升</li></ul><h2 id="智能代理的高级推理技术"><a href="#智能代理的高级推理技术" class="headerlink" title="智能代理的高级推理技术"></a>智能代理的高级推理技术</h2><h3 id="实时反馈集成"><a href="#实时反馈集成" class="headerlink" title="实时反馈集成"></a>实时反馈集成</h3><p>Using real-time feedback from users or the environment to enhance inferences is another promising method for improving performance during inference. For example, an AI might adjust its recommendations based on live user responses or changing conditions in a dynamic system. Or, if the agent is taking actions in a simulated environment that break certain rules, the agent can be dynamically given feedback to help correct itself.</p><p>利用来自用户或环境的实时反馈来增强推理能力，是另一种提升推理性能的有效方法。例如，人工智能可以根据实时用户响应或动态系统中不断变化的条件来调整其推荐。或者，如果代理在模拟环境中采取的操作违反了某些规则，则可以动态地向代理提供反馈，以帮助其自我纠正。</p><h3 id="跨领域知识转移"><a href="#跨领域知识转移" class="headerlink" title="跨领域知识转移"></a>跨领域知识转移</h3><p>Leveraging knowledge or models from one domain to improve inferences in another can be particularly helpful when producing outputs within a specialized discipline. For instance, techniques developed for language translation might be applied to code generation, or insights from medical diagnostics could enhance predictive maintenance in machinery.</p><p>利用一个领域的知识或模型来改进另一个领域的推理，在特定学科领域生成输出时尤其有用。例如，为语言翻译而开发的技术可以应用于代码生成，或者医学诊断的洞见可以增强机械的预测性维护。</p><h3 id="针对特定用例的定制"><a href="#针对特定用例的定制" class="headerlink" title="针对特定用例的定制"></a>针对特定用例的定制</h3><p>Tailoring the AI’s inference capabilities for particular applications or industries can involve training the AI on specialized datasets or fine-tuning its models to better suit specific tasks, such as legal analysis, medical diagnosis, or financial forecasting. Since the particular language or information within one domain can greatly contrast with the language from other domains, it can be beneficial to finetune the agent on domain-specific information.</p><p>针对特定应用或行业定制AI的推理能力，可能涉及在专用数据集上训练AI，或对其模型进行微调，以更好地适应特定任务，例如法律分析、医疗诊断或财务预测。由于某个领域内的特定语言或信息可能与其他领域的语言存在很大差异，因此根据特定领域的信息对代理进行微调将大有裨益。</p><h2 id="人机协作中的安全性考量"><a href="#人机协作中的安全性考量" class="headerlink" title="人机协作中的安全性考量"></a>人机协作中的安全性考量</h2><p>在人机协作系统中使用LLM/VLM时，必须注意它们像黑匣子一样运行，会产生不可预测的输出。这种不确定性在物理设置中至关重要，例如操作实际的机器人。解决这一挑战的一种方法是通过提示工程来限制LLM/VLM的关注点。例如，据报道，在根据指令进行机器人任务规划时，在提示中提供环境信息比单纯依赖文本能产生更稳定的输出。</p><h2 id="模仿学习的研究前沿与挑战"><a href="#模仿学习的研究前沿与挑战" class="headerlink" title="模仿学习的研究前沿与挑战"></a>模仿学习的研究前沿与挑战</h2><h3 id="RGB输入的维数灾难问题"><a href="#RGB输入的维数灾难问题" class="headerlink" title="RGB输入的维数灾难问题"></a>RGB输入的维数灾难问题</h3><p>使用RGB输入的固有挑战是维数灾难。为了解决这个问题，研究人员要么使用更多数据Jang等人（2022年）；Ha等人（2023年），要么在模型设计中引入归纳偏差以提高样本效率。具体来说，作者将3D结构合并到模型架构中以便于操作。</p><h3 id="数据获取与Sim2Real差距"><a href="#数据获取与Sim2Real差距" class="headerlink" title="数据获取与Sim2Real差距"></a>数据获取与Sim2Real差距</h3><p>为了获取更多数据，研究人员使用图形模拟器合成数据，并尝试缩小sim2real差距。</p><h3 id="大规模数据集的构建努力"><a href="#大规模数据集的构建努力" class="headerlink" title="大规模数据集的构建努力"></a>大规模数据集的构建努力</h3><p>最近，人们共同努力整理大规模数据集，旨在解决数据稀缺问题。这一趋势表明，数据规模的扩大仍然是推动具身智能发展的重要驱动力之一。</p>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Agent</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>误删文件后的恢复尝试与教训</title>
    <link href="/2025/08/04/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/%E8%AF%AF%E5%88%A0%E6%96%87%E4%BB%B6%E5%90%8E%E7%9A%84%E6%81%A2%E5%A4%8D%E5%B0%9D%E8%AF%95%E4%B8%8E%E6%95%99%E8%AE%AD/%E8%AF%AF%E5%88%A0%E6%96%87%E4%BB%B6%E5%90%8E%E7%9A%84%E6%81%A2%E5%A4%8D%E5%B0%9D%E8%AF%95%E4%B8%8E%E6%95%99%E8%AE%AD/"/>
    <url>/2025/08/04/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/%E8%AF%AF%E5%88%A0%E6%96%87%E4%BB%B6%E5%90%8E%E7%9A%84%E6%81%A2%E5%A4%8D%E5%B0%9D%E8%AF%95%E4%B8%8E%E6%95%99%E8%AE%AD/%E8%AF%AF%E5%88%A0%E6%96%87%E4%BB%B6%E5%90%8E%E7%9A%84%E6%81%A2%E5%A4%8D%E5%B0%9D%E8%AF%95%E4%B8%8E%E6%95%99%E8%AE%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="误删文件后的恢复尝试与教训"><a href="#误删文件后的恢复尝试与教训" class="headerlink" title="误删文件后的恢复尝试与教训"></a>误删文件后的恢复尝试与教训</h1><h2 id="一、事件背景：一个危险的BAT脚本"><a href="#一、事件背景：一个危险的BAT脚本" class="headerlink" title="一、事件背景：一个危险的BAT脚本"></a>一、事件背景：一个危险的BAT脚本</h2><p>最近在搭建个人网站（hexo个人网站）时，我想通过GPT生成一个能实现「自动删除文件、自动复制文件、自动git上传」的BAT脚本。由于没有仔细验证代码安全性，直接使用了GPT生成的脚本，最终导致了严重的数据丢失。</p><p>GPT生成的BAT脚本如下：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">setlocal</span> enabledelayedexpansion<br><br><span class="hljs-built_in">set</span> &quot;target=E:\创作\个人网站\Leon_Blog&quot;<br><br><span class="hljs-built_in">echo</span> Deleting all contents <span class="hljs-keyword">in</span> <span class="hljs-variable">%target%</span> except .git folder...<br><br>:: 删除文件夹<br><span class="hljs-keyword">for</span> /d <span class="hljs-variable">%%D</span> <span class="hljs-keyword">in</span> (&quot;<span class="hljs-variable">%target%</span>\*&quot;) <span class="hljs-keyword">do</span> (<br>    <span class="hljs-keyword">if</span> /i <span class="hljs-keyword">not</span> &quot;<span class="hljs-variable">%%~</span>nxD&quot;==&quot;.git&quot; (<br>        <span class="hljs-built_in">echo</span> Deleting folder: <span class="hljs-variable">%%D</span><br>        <span class="hljs-built_in">rd</span> /s /q &quot;<span class="hljs-variable">%%D</span>&quot;<br>    )<br>)<br><br>:: 删除文件<br><span class="hljs-keyword">for</span> <span class="hljs-variable">%%F</span> <span class="hljs-keyword">in</span> (&quot;<span class="hljs-variable">%target%</span>\*&quot;) <span class="hljs-keyword">do</span> (<br>    <span class="hljs-keyword">if</span> /i <span class="hljs-keyword">not</span> &quot;<span class="hljs-variable">%%~</span>nxF&quot;==&quot;.git&quot; (<br>        <span class="hljs-built_in">echo</span> Deleting file: <span class="hljs-variable">%%F</span><br>        <span class="hljs-built_in">del</span> /q &quot;<span class="hljs-variable">%%F</span>&quot;<br>    )<br>)<br></code></pre></td></tr></table></figure></p><p>这个脚本的预期功能是：删除<code>E:\创作\个人网站\Leon_Blog</code>目录下所有子目录和文件，但保留<code>.git</code>文件夹。<strong>但它存在致命缺陷</strong>：当<code>target</code>路径不存在或无法被正确解析时，<code>&quot;%target%\*&quot;</code>会被错误解析为<code>&quot;E:\*&quot;</code>（即E盘根目录），导致脚本对整个E盘执行删除操作。</p><h2 id="二、误删过程：E盘根目录文件被批量删除"><a href="#二、误删过程：E盘根目录文件被批量删除" class="headerlink" title="二、误删过程：E盘根目录文件被批量删除"></a>二、误删过程：E盘根目录文件被批量删除</h2><p>执行脚本后，我看到命令行中快速闪过大量文件名，才意识到不对劲，立刻按<code>Ctrl+C</code>停止，但已经来不及了——E盘根目录下的所有文件和文件夹已被批量删除，相当于E盘被「格式化」了。</p><p><img src="image.jpg" alt=""></p><h2 id="三、恢复尝试：三款工具的使用与结果"><a href="#三、恢复尝试：三款工具的使用与结果" class="headerlink" title="三、恢复尝试：三款工具的使用与结果"></a>三、恢复尝试：三款工具的使用与结果</h2><p>为了减少损失，我立刻停止对E盘的任何操作（避免覆盖数据），并尝试了以下恢复工具：</p><h3 id="1-Recuva（免费数据恢复工具）"><a href="#1-Recuva（免费数据恢复工具）" class="headerlink" title="1. Recuva（免费数据恢复工具）"></a>1. Recuva（免费数据恢复工具）</h3><p>Recuva是一款经典的免费数据恢复软件，支持多种文件类型，操作相对简单。</p><h4 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h4><ul><li>第一步：选择需要恢复的文件类型（这会影响扫描速度和准确度）<br><img src="image copy.jpg" alt=""></li><li>第二步：选择需要扫描的驱动器（此处选择E盘）<br><img src="image copy 2.jpg" alt=""></li><li>第三步：启动深度扫描（Deep Search）<br><img src="image copy 3.jpg" alt=""></li></ul><h4 id="恢复结果："><a href="#恢复结果：" class="headerlink" title="恢复结果："></a>恢复结果：</h4><ul><li>深度扫描后查到约5万多个文件，软件显示「有效恢复」的约2万多个，但实际能正常打开的文件极少。</li><li>恢复的文件被无序放在同一个文件夹中，原有的文件结构完全丢失，使用起来非常不便。</li></ul><blockquote><p>官网链接：<a href="https://www.ccleaner.com/recuva">Recuva 官方网站</a></p></blockquote><h3 id="2-Windows-File-Recovery（微软自带命令行工具）"><a href="#2-Windows-File-Recovery（微软自带命令行工具）" class="headerlink" title="2. Windows File Recovery（微软自带命令行工具）"></a>2. Windows File Recovery（微软自带命令行工具）</h3><p>Windows File Recovery是微软官方推出的命令行恢复工具，支持更多文件类型，虽然操作复杂，但恢复效果相对更好。</p><h4 id="基本步骤："><a href="#基本步骤：" class="headerlink" title="基本步骤："></a>基本步骤：</h4><ol><li>如有必要，请从 Microsoft 应用商店安装应用：<br><a href="ms-windows-store://pdp/?productid=9n26s50ln705">Windows File Recovery</a></li><li>按 Windows 键，在搜索框中输入<strong>Windows File Recovery</strong>，然后选择“<strong>Windows File Recovery</strong>”。</li><li>当系统提示你允许应用对设备进行更改时，请选择“<strong>是</strong>”。</li><li>在 <strong>“命令提示符”</strong>窗口中，按以下格式输入命令：<br><code>winfr source-drive: destination-drive: [/mode] [/switches]</code></li><li><p>有 2 种基本模式可用于恢复文件：“常规”和“广泛”。<br><strong>常规模式示例</strong>  </p><ul><li>将 Documents 文件夹从 C： 驱动器恢复到 E： 驱动器上的恢复文件夹（不要忘记文件夹末尾的反斜杠 \）：<br><code>Winfr C: E: /regular /n \Users\&lt;username&gt;\Documents\</code>  </li><li>将 PDF 和Word文件从 C： 驱动器恢复到 E： 驱动器上的恢复文件夹：<br><code>Winfr C: E: /regular /n *.pdf /n *.docx</code>  </li></ul><p><strong>广泛的模式示例</strong>  </p><ul><li>使用通配符恢复文件名中包含字符串“invoice”的任何文件：<br><code>Winfr E: C: /extensive /n *invoice*</code>  </li><li>将 jpeg 和 png 照片从“图片”文件夹恢复到 E： 驱动器上的恢复文件夹：<br><code>Winfr C: E: /extensive /n \Users\&lt;username&gt;\Pictures\*.JPEG /n\Users\&lt;username&gt;\Pictures\*.PNG</code>  </li></ul><blockquote><p>注意：源驱动器和目标驱动器必须不同。从操作系统驱动器（通常是C:）恢复时，请使用 <code>/n &lt;filter&gt;</code> 开关指定用户文件或文件夹。微软会在目标驱动器上自动创建名为 <code>Recovery_&lt;date and time&gt;</code> 的恢复文件夹。</p></blockquote></li><li>当系统提示确认继续时，请输入 <strong>Y</strong> 以启动恢复操作。这可能需要一段时间，具体取决于源驱动器的大小。若要停止恢复过程，请按 <strong>Ctrl</strong> + <strong>C</strong>。</li></ol><h4 id="关于模式和文件系统："><a href="#关于模式和文件系统：" class="headerlink" title="关于模式和文件系统："></a>关于模式和文件系统：</h4><p>以下信息可帮助你确定你拥有哪个文件系统以及要使用的模式。</p><p><strong><em>文件系统</em></strong></p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>文件系统</strong></th><th style="text-align:left"><strong>示例</strong></th></tr></thead><tbody><tr><td style="text-align:left">FAT 和 exFAT</td><td style="text-align:left">SD 卡、闪存或 U 盘 (&lt; 4GB)</td></tr><tr><td style="text-align:left">NTFS</td><td style="text-align:left">计算机（HDD、SSD）、外部硬盘驱动器、闪存或 U 盘 (&gt; 4GB)</td></tr></tbody></table></div><p>Windows 支持的多个文件系统因存储设备或操作系统而异。仅广泛模式支持从非 NTFS 文件系统恢复文件。若要查看你拥有的文件系统，请右键单击文件资源管理器中的驱动器，然后选择“<strong>属性</strong>”。</p><p><strong><em>决定使用哪种模式</em></strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">文件系统</th><th style="text-align:left">情况</th><th style="text-align:left">建议模式</th></tr></thead><tbody><tr><td style="text-align:left">NTFS</td><td style="text-align:left">最近删除</td><td style="text-align:left">Regular</td></tr><tr><td style="text-align:left">NTFS</td><td style="text-align:left">前一段时间已删除</td><td style="text-align:left">广泛</td></tr><tr><td style="text-align:left">NTFS</td><td style="text-align:left">格式化磁盘后</td><td style="text-align:left">广泛</td></tr><tr><td style="text-align:left">NTFS</td><td style="text-align:left">损坏的磁盘</td><td style="text-align:left">广泛</td></tr><tr><td style="text-align:left">FAT 和 exFAT</td><td style="text-align:left">任何</td><td style="text-align:left">广泛</td></tr></tbody></table></div><h4 id="命令行语法："><a href="#命令行语法：" class="headerlink" title="命令行语法："></a>命令行语法：</h4><p><strong><em>常规语法</em></strong></p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>参数/开关</strong></th><th style="text-align:left"><strong>说明</strong></th><th style="text-align:left"><strong>支持的模式</strong></th></tr></thead><tbody><tr><td style="text-align:left">Source-drive:</td><td style="text-align:left">指定文件丢失的存储设备。必须与目标驱动器不同。</td><td style="text-align:left">全部</td></tr><tr><td style="text-align:left">Destination-drive:</td><td style="text-align:left">指定要放置恢复文件的存储设备和文件夹。必须与源驱动器不同。</td><td style="text-align:left">全部</td></tr><tr><td style="text-align:left">/regular</td><td style="text-align:left">常规模式，未损坏的 NTFS 驱动器的标准恢复选项</td><td style="text-align:left">Regular</td></tr><tr><td style="text-align:left">/extensive</td><td style="text-align:left">广泛模式，适用于所有文件系统的彻底恢复选项</td><td style="text-align:left">广泛</td></tr><tr><td style="text-align:left">/n<filter></td><td style="text-align:left">使用文件名、文件路径、文件类型或通配符扫描特定文件。例如：<br>- 文件名：/n myfile.docx<br>- 文件路径：/n /users/\<username\>/Documents/<br>- 通配符：/n myfile.*、/n *.docx、/n <em>\<string\></em></td><td style="text-align:left">全部</td></tr><tr><td style="text-align:left">/?</td><td style="text-align:left">一般用户的语法和开关摘要。</td><td style="text-align:left">全部</td></tr><tr><td style="text-align:left">/!</td><td style="text-align:left">高级用户的语法和开关摘要。</td><td style="text-align:left">全部</td></tr></tbody></table></div><p><strong><em>高级语法</em></strong></p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>开关</strong></th><th style="text-align:left"><strong>说明</strong></th><th style="text-align:left"><strong>支持的模式</strong></th></tr></thead><tbody><tr><td style="text-align:left">/ntfs</td><td style="text-align:left">NTFS 模式，使用主文件表实现正常 NTFS 驱动器的快速恢复选项</td><td style="text-align:left">NTFS</td></tr><tr><td style="text-align:left">/segment</td><td style="text-align:left">段模式，使用文件记录段的 NTFS 驱动器的恢复选项</td><td style="text-align:left">段</td></tr><tr><td style="text-align:left">/signature</td><td style="text-align:left">使用文件标头的所有文件系统类型的签名模式和恢复选项</td><td style="text-align:left">签名</td></tr><tr><td style="text-align:left">/y:<type(s)></td><td style="text-align:left">恢复特定扩展组，逗号分隔</td><td style="text-align:left">签名</td></tr><tr><td style="text-align:left">/#</td><td style="text-align:left">签名模式扩展组和支持的文件类型。</td><td style="text-align:left">签名</td></tr><tr><td style="text-align:left">/p:<folder></td><td style="text-align:left">将恢复操作的日志文件保存在与恢复驱动器上的默认位置不同的位置（例如， D:\logfile）。</td><td style="text-align:left">全部</td></tr><tr><td style="text-align:left">/a</td><td style="text-align:left">重写用户提示，这在脚本文件中很有用。</td><td style="text-align:left">全部</td></tr><tr><td style="text-align:left">/u</td><td style="text-align:left">例如，从回收站中恢复未删除的文件。</td><td style="text-align:left">NTFS 段</td></tr><tr><td style="text-align:left">/k</td><td style="text-align:left">恢复系统文件。</td><td style="text-align:left">NTFS 段</td></tr><tr><td style="text-align:left">/o:&lt;a\</td><td style="text-align:left">n\</td><td style="text-align:left">b&gt;</td><td>指定在选择是否覆盖文件时，是始终（a），从不（n），还是始终保留两者（b）。默认操作是提示覆盖。</td><td>NTFS 段</td></tr><tr><td style="text-align:left">/g</td><td style="text-align:left">恢复没有主数据流的文件。</td><td style="text-align:left">NTFS 段</td></tr><tr><td style="text-align:left">/e</td><td style="text-align:left">为了保持结果易于管理并专注于用户文件，默认情况下会筛选某些文件类型，但此开关会删除该筛选器。有关这些文件类型的完整列表，请参阅此表后面的信息。</td><td style="text-align:left">NTFS 段</td></tr><tr><td style="text-align:left">/e:<extension></td><td style="text-align:left">指定筛选的文件类型。有关这些文件类型的完整列表，请参阅此表后面的信息。</td><td style="text-align:left">NTFS 段</td></tr><tr><td style="text-align:left">/s:<sectors></td><td style="text-align:left">指定源设备上的扇区数。若要查找扇区信息，请使用 <a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil">fsutil</a>。</td><td style="text-align:left">段、签名</td></tr><tr><td style="text-align:left">/b:<bytes></td><td style="text-align:left">指定源设备上（分配单元）群集大小。</td><td style="text-align:left">段、签名</td></tr></tbody></table></div><p><strong><em>文件扩展名筛选器列表</em></strong></p><p>默认情况下，将从结果中筛选以下文件类型。使用 <code>/e</code> 开关禁用此筛选器，或使用 <code>/e:&lt;extension&gt;</code> 筛选器来指定要筛选的文件类型。</p><p>_, adm, admx, appx, appx, ascx, asm, aspx, aux, ax, bin, browser, c, cab, cat cdf-ms, catalogItem, cdxm, cmake, cmd, coffee, config, cp, cpp, cs, cshtm, css, cur, dat, dll, et, evtx, exe, fon, gpd, h, hbakedcurve, htm, htm, ico, id, ildl, ilpdb, iltoc, iltocpdb, in, inf, inf_loc, ini, js, json, lib, lnk, log, man, manifest, map, metadata, mf, mof, msc, msi, mui, mui, mum, mun, nls, npmignore, nupkg, nuspec, obj, p7s, p7x, pak, pckdep, pdb, pf, pkgdef, plist, pnf, pp, pri, props, ps1, ps1xm, psd1, psm1, py, resjson, resw, resx, rl, rs, sha512, snippet, sq, sys, t4, targets, th, tlb, tmSnippet, toc, ts, tt, ttf, vb, vbhtm, vbs, vsdir, vsix, vsixlangpack, vsixmanifest, vstdir, vstemplate, vstman, winmd, xam, xbf, xm, xrm-ms, xs, xsd, ym</p><h4 id="我的操作与结果："><a href="#我的操作与结果：" class="headerlink" title="我的操作与结果："></a>我的操作与结果：</h4><p>我选择的恢复命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Winfr C: E: /regular /n E:/<br></code></pre></td></tr></table></figure><br>执行后，软件提示输入<code>Y</code>确认恢复操作。恢复完成后，文件被放在E盘的<code>Recovery_&lt;date and time&gt;</code>文件夹中。</p><ul><li>优势：保留了完整的文件结构（包括文件夹层级），一些久未使用的文件夹被完整恢复。</li><li>不足：大部分文件（如PDF、DOCX）打开后显示损坏，仅少数TXT文件和图片能正常打开。</li></ul><h3 id="3-DiskGenius（未尝试的专业工具）"><a href="#3-DiskGenius（未尝试的专业工具）" class="headerlink" title="3. DiskGenius（未尝试的专业工具）"></a>3. DiskGenius（未尝试的专业工具）</h3><p>DiskGenius是一款功能强大的专业数据恢复软件，支持多种文件系统和恢复模式，提供图形界面，操作相对简单。但由于前两次尝试已消耗较多时间，我未进一步尝试。</p><blockquote><p>官网链接：<a href="https://www.diskgenius.cn/">DiskGenius 官方网站</a></p></blockquote><h2 id="四、总结与教训"><a href="#四、总结与教训" class="headerlink" title="四、总结与教训"></a>四、总结与教训</h2><p>这次事件让我深刻意识到数据安全的重要性，总结以下教训：</p><h3 id="1-数据无价，操作前务必备份"><a href="#1-数据无价，操作前务必备份" class="headerlink" title="1. 数据无价，操作前务必备份"></a>1. 数据无价，操作前务必备份</h3><p>涉及文件删除、格式化等危险操作时，一定要先备份重要数据。即使是「看似简单」的脚本，也可能因意外导致不可逆的损失。</p><h3 id="2-谨慎使用AI生成的代码"><a href="#2-谨慎使用AI生成的代码" class="headerlink" title="2. 谨慎使用AI生成的代码"></a>2. 谨慎使用AI生成的代码</h3><p>AI生成的代码可能存在潜在风险（尤其是文件操作、系统命令类），使用前必须：</p><ul><li>逐行检查逻辑（如本次脚本的路径解析漏洞）；</li><li>在测试环境中验证（用空文件夹或非重要数据测试效果）；</li><li>明确代码的「边界条件」（如路径不存在时的处理）。</li></ul><p>就像下图的提醒：AI不会为你的错误负责，最终承担损失的是自己。<br><img src="b53a1b6f950a710f3b2a425e356477b8.jpg" alt=""></p><h3 id="3-数据恢复的注意事项"><a href="#3-数据恢复的注意事项" class="headerlink" title="3. 数据恢复的注意事项"></a>3. 数据恢复的注意事项</h3><ul><li>误删后<strong>立即停止对目标磁盘的操作</strong>（避免新数据覆盖原有扇区）；</li><li>优先使用专业工具（如DiskGenius）或官方工具（如Windows File Recovery）；</li><li>恢复后需逐一验证文件完整性，不要依赖「恢复成功」的提示。</li></ul><p>希望我的经历能给大家提个醒：对待数据操作，再谨慎也不为过。</p>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恢复</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>摆脱忙碌焦虑</title>
    <link href="/2025/08/04/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/%E6%91%86%E8%84%B1%E5%BF%99%E7%A2%8C%E7%84%A6%E8%99%91/"/>
    <url>/2025/08/04/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/%E6%91%86%E8%84%B1%E5%BF%99%E7%A2%8C%E7%84%A6%E8%99%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gdb常用指令</title>
    <link href="/2025/08/04/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/gdb%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2025/08/04/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/gdb%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>GDB（GNU Debugger）提供了丰富的调试命令，涵盖代码运行、断点管理、变量查看、堆栈分析等多个方面。以下是 GDB 的所有主要调试命令，按类别分类：</p><hr><h2 id="1-启动和退出"><a href="#1-启动和退出" class="headerlink" title="1. 启动和退出"></a>1. <strong>启动和退出</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>gdb program</code></td><td>调试可执行文件 <code>program</code></td></tr><tr><td><code>gdb --args program arg1 arg2</code></td><td>传递参数给 <code>program</code></td></tr><tr><td><code>gdb -p PID</code></td><td>附加到进程 PID</td></tr><tr><td><code>q</code> / <code>quit</code></td><td>退出 GDB</td></tr></tbody></table></div><hr><h2 id="2-运行程序"><a href="#2-运行程序" class="headerlink" title="2. 运行程序"></a>2. <strong>运行程序</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>r</code> / <code>run [args]</code></td><td>运行程序，可传递参数</td></tr><tr><td><code>start</code></td><td>启动程序并停在 <code>main()</code> 之前</td></tr><tr><td><code>kill</code></td><td>终止正在调试的程序</td></tr></tbody></table></div><hr><h2 id="3-断点（Breakpoints）"><a href="#3-断点（Breakpoints）" class="headerlink" title="3. 断点（Breakpoints）"></a>3. <strong>断点（Breakpoints）</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>b</code> / <code>break func_name</code></td><td>在函数 <code>func_name</code> 处设置断点</td></tr><tr><td><code>b line_number</code></td><td>在当前源文件的 <code>line_number</code> 处设置断点</td></tr><tr><td><code>b file:line</code></td><td>在指定文件 <code>file</code> 的 <code>line</code> 行处设置断点</td></tr><tr><td><code>b *address</code></td><td>在内存地址 <code>address</code> 处设置断点</td></tr><tr><td><code>info breakpoints</code></td><td>显示所有断点</td></tr><tr><td><code>delete [num]</code></td><td>删除编号为 <code>num</code> 的断点（默认删除所有断点）</td></tr><tr><td><code>clear func_name</code></td><td>清除函数 <code>func_name</code> 的断点</td></tr><tr><td><code>clear file:line</code></td><td>清除 <code>file</code> 文件 <code>line</code> 行的断点</td></tr><tr><td><code>enable [num]</code></td><td>启用编号为 <code>num</code> 的断点</td></tr><tr><td><code>disable [num]</code></td><td>禁用编号为 <code>num</code> 的断点</td></tr><tr><td><code>condition num expr</code></td><td>仅当 <code>expr</code> 为真时，触发编号为 <code>num</code> 的断点</td></tr></tbody></table></div><hr><h2 id="4-观察点（Watchpoints）"><a href="#4-观察点（Watchpoints）" class="headerlink" title="4. 观察点（Watchpoints）"></a>4. <strong>观察点（Watchpoints）</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>watch var</code></td><td>监视变量 <code>var</code> 变化时暂停</td></tr><tr><td><code>rwatch var</code></td><td>变量 <code>var</code> 被读取时暂停</td></tr><tr><td><code>awatch var</code></td><td>变量 <code>var</code> 被读/写时暂停</td></tr><tr><td><code>info watchpoints</code></td><td>显示所有监视点</td></tr><tr><td><code>delete watch num</code></td><td>删除编号为 <code>num</code> 的监视点</td></tr></tbody></table></div><hr><h2 id="5-单步执行（Stepping）"><a href="#5-单步执行（Stepping）" class="headerlink" title="5. 单步执行（Stepping）"></a>5. <strong>单步执行（Stepping）</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>s</code> / <code>step</code></td><td>单步执行代码（进入函数内部）</td></tr><tr><td><code>n</code> / <code>next</code></td><td>单步执行代码（不进入函数内部）</td></tr><tr><td><code>finish</code></td><td>运行到当前函数返回</td></tr><tr><td><code>until</code></td><td>运行到当前代码块结束</td></tr></tbody></table></div><hr><h2 id="6-继续执行"><a href="#6-继续执行" class="headerlink" title="6. 继续执行"></a>6. <strong>继续执行</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>c</code> / <code>continue</code></td><td>继续执行到下一个断点</td></tr><tr><td><code>jump line</code></td><td>跳转到 <code>line</code> 行执行</td></tr></tbody></table></div><hr><h2 id="7-堆栈（Stack）"><a href="#7-堆栈（Stack）" class="headerlink" title="7. 堆栈（Stack）"></a>7. <strong>堆栈（Stack）</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>bt</code> / <code>backtrace</code></td><td>显示当前调用栈</td></tr><tr><td><code>bt full</code></td><td>显示完整的调用栈（包含参数和变量）</td></tr><tr><td><code>frame num</code></td><td>切换到编号 <code>num</code> 的栈帧</td></tr><tr><td><code>up</code></td><td>向上移动一层栈帧</td></tr><tr><td><code>down</code></td><td>向下移动一层栈帧</td></tr></tbody></table></div><hr><h2 id="8-打印变量"><a href="#8-打印变量" class="headerlink" title="8. 打印变量"></a>8. <strong>打印变量</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>p</code> / <code>print expr</code></td><td>打印表达式 <code>expr</code> 的值</td></tr><tr><td><code>ptype var</code></td><td>显示变量 <code>var</code> 的类型</td></tr><tr><td><code>whatis var</code></td><td>显示变量 <code>var</code> 的类型</td></tr><tr><td><code>x addr</code></td><td>以十六进制格式查看 <code>addr</code> 处的内存</td></tr><tr><td><code>x/4x addr</code></td><td>以十六进制显示 <code>addr</code> 处的 4 个单位数据</td></tr></tbody></table></div><hr><h2 id="9-寄存器"><a href="#9-寄存器" class="headerlink" title="9. 寄存器"></a>9. <strong>寄存器</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>info registers</code></td><td>显示所有寄存器的值</td></tr><tr><td><code>p $eax</code></td><td>打印寄存器 <code>eax</code> 的值</td></tr></tbody></table></div><hr><h2 id="10-信号（Signals）"><a href="#10-信号（Signals）" class="headerlink" title="10. 信号（Signals）"></a>10. <strong>信号（Signals）</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>handle SIGSEGV stop</code></td><td>在 <code>SIGSEGV</code> 信号触发时暂停</td></tr><tr><td><code>handle SIGINT nostop</code></td><td>忽略 <code>SIGINT</code> 信号</td></tr></tbody></table></div><hr><h2 id="11-调试共享库"><a href="#11-调试共享库" class="headerlink" title="11. 调试共享库"></a>11. <strong>调试共享库</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>info sharedlibrary</code></td><td>显示加载的共享库</td></tr><tr><td><code>set solib-search-path path</code></td><td>设置共享库搜索路径</td></tr></tbody></table></div><hr><h2 id="12-修改变量"><a href="#12-修改变量" class="headerlink" title="12. 修改变量"></a>12. <strong>修改变量</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>set var = value</code></td><td>修改变量值</td></tr><tr><td><code>set $eax = 0x1234</code></td><td>修改寄存器值</td></tr></tbody></table></div><hr><h2 id="13-附加进程"><a href="#13-附加进程" class="headerlink" title="13. 附加进程"></a>13. <strong>附加进程</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>attach PID</code></td><td>附加到进程 <code>PID</code></td></tr><tr><td><code>detach</code></td><td>断开调试进程</td></tr></tbody></table></div><hr><h2 id="14-线程调试"><a href="#14-线程调试" class="headerlink" title="14. 线程调试"></a>14. <strong>线程调试</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>info threads</code></td><td>显示所有线程</td></tr><tr><td><code>thread num</code></td><td>切换到 <code>num</code> 号线程</td></tr><tr><td><code>thread apply all cmd</code></td><td>对所有线程执行 <code>cmd</code></td></tr></tbody></table></div><hr><h2 id="15-脚本"><a href="#15-脚本" class="headerlink" title="15. 脚本"></a>15. <strong>脚本</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>source file</code></td><td>运行 <code>file</code> 中的 GDB 命令</td></tr><tr><td><code>define cmd</code></td><td>自定义命令</td></tr><tr><td><code>document cmd</code></td><td>添加自定义命令的文档</td></tr><tr><td><code>save breakpoints file</code></td><td>将断点信息保存到 <code>file</code></td></tr></tbody></table></div><hr><h2 id="16-GDB-调试-TUI-模式"><a href="#16-GDB-调试-TUI-模式" class="headerlink" title="16. GDB 调试 TUI 模式"></a>16. <strong>GDB 调试 TUI 模式</strong></h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>layout src</code></td><td>显示源码窗口</td></tr><tr><td><code>layout asm</code></td><td>显示汇编窗口</td></tr><tr><td><code>layout regs</code></td><td>显示寄存器窗口</td></tr><tr><td><code>tui enable</code></td><td>启用 TUI 模式</td></tr><tr><td><code>tui disable</code></td><td>禁用 TUI 模式</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随机过程</title>
    <link href="/2025/08/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B/"/>
    <url>/2025/08/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="数学常识"><a href="#数学常识" class="headerlink" title="数学常识"></a>数学常识</h1><h2 id="概率论"><a href="#概率论" class="headerlink" title="概率论"></a>概率论</h2><h3 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h3><p>条件概率是指在已知某一事件发生的条件下，另一个事件发生的概率。形式化定义为：</p><script type="math/tex; mode=display">P(A | B) = \frac{P(A \cap B)}{P(B)}, \quad P(B) > 0</script><h3 id="全概率公式"><a href="#全概率公式" class="headerlink" title="全概率公式"></a>全概率公式</h3><p>全概率公式用于计算一个事件的概率，该事件可以通过多个互斥事件的并集来表示。形式化定义为：</p><script type="math/tex; mode=display">P(A) = \sum_{i} P(A | B_{i}) P(B_{i})</script><p>其中，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.457ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1086 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(792,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 是一组互斥且完备的事件。</p><h3 id="贝叶斯公式"><a href="#贝叶斯公式" class="headerlink" title="贝叶斯公式"></a>贝叶斯公式</h3><p>贝叶斯公式用于更新事件的概率，基于新的信息。形式化定义为：</p><script type="math/tex; mode=display">P(A | B) = \frac{P(B | A) P(A)}{P(B)}, \quad P(B) > 0</script><h3 id="概率分布和概率密度"><a href="#概率分布和概率密度" class="headerlink" title="概率分布和概率密度"></a>概率分布和概率密度</h3><h4 id="离散随机变量"><a href="#离散随机变量" class="headerlink" title="离散随机变量"></a>离散随机变量</h4><p>离散随机变量的概率分布函数（Probability Mass Function, PMF）定义为：</p><script type="math/tex; mode=display">P(X = x) = p_X(x)</script><h4 id="连续随机变量"><a href="#连续随机变量" class="headerlink" title="连续随机变量"></a>连续随机变量</h4><p>连续随机变量的概率密度函数（Probability Density Function, PDF）定义为：</p><script type="math/tex; mode=display">f_X(x) = \frac{d}{dx} P(X \leq x)</script><p>这个定义是需要熟悉的，有些时候往往会通过算一个极限来求出 PDF。</p><script type="math/tex; mode=display">f_X(x) = \lim_{\Delta x \to 0} \frac{P(x \leq X < x + \Delta x)}{\Delta x}</script><p>这在实际计算中经常用到。</p><h4 id="累积分布函数"><a href="#累积分布函数" class="headerlink" title="累积分布函数"></a>累积分布函数</h4><p>累积分布函数（Cumulative Distribution Function, CDF）定义为：</p><script type="math/tex; mode=display">F_X(x) = P(X \leq x)</script><h4 id="联合分布"><a href="#联合分布" class="headerlink" title="联合分布"></a>联合分布</h4><p>对于多个随机变量的联合分布，定义为：</p><script type="math/tex; mode=display">P(X_1 = x_1, X_2 = x_2, \ldots, X_n = x_n) = p_{X_1, X_2, \ldots, X_n}(x_1, x_2, \ldots, x_n)</script><p>对于连续随机变量的联合分布，定义为：</p><script type="math/tex; mode=display">P(X_1 \leq x_1, X_2 \leq x_2, \ldots, X_n \leq x_n) = F_{X_1, X_2, \ldots, X_n}(x_1, x_2, \ldots, x_n)</script><p>概率密度函数为：</p><script type="math/tex; mode=display">f_{X_1, X_2, \ldots, X_n}(x_1, x_2, \ldots, x_n) = \frac{\partial^n}{\partial x_1 \partial x_2 \cdots \partial x_n} F_{X_1, X_2, \ldots, X_n}(x_1, x_2, \ldots, x_n)</script><p>如果 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="14.79ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 6537 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1264.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1709.2,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2973.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3418.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(4757.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5201.8,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 是独立的，则有：</p><script type="math/tex; mode=display">P(X_1 = x_1, X_2 = x_2, \ldots, X_n = x_n) = P(X_1 = x_1) P(X_2 = x_2) \cdots P(X_n = x_n)</script><p>概率密度上也有</p><script type="math/tex; mode=display">f_{X_1, X_2, \ldots, X_n}(x_1, x_2, \ldots, x_n) = f_{X_1}(x_1) f_{X_2}(x_2) \cdots f_{X_n}(x_n)</script><p>当然联合分布也有</p><script type="math/tex; mode=display">F_{X_1, X_2, \ldots, X_n}(x_1, x_2, \ldots, x_n) = F_{X_1}(x_1) F_{X_2}(x_2) \cdots F_{X_n}(x_n)</script><h4 id="随机变量函数的分布"><a href="#随机变量函数的分布" class="headerlink" title="随机变量函数的分布"></a>随机变量函数的分布</h4><p>对于随机变量 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 和函数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.51ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4203.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(1040.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2096.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(2573.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2962.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(3814.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，其分布可以通过以下方式计算：</p><p>比如 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="11.072ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 4894 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mo" transform="translate(1000.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2056.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(3130.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4131,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container>，我们用 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.636ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 723 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 来表示 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.726ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 763 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container>，则有：</p><script type="math/tex; mode=display">Y = Z - X</script><p>然后我们可以通过联合分布来计算：</p><script type="math/tex; mode=display">f_{X+Y}(x, y) = \int_{-\infty}^{+\infty} f(x, z-x) =\int_{-\infty}^{+\infty} f_X(x) f_Y(z - x) \, dx</script><h3 id="数字特征"><a href="#数字特征" class="headerlink" title="数字特征"></a>数字特征</h3><h4 id="期望"><a href="#期望" class="headerlink" title="期望"></a>期望</h4><p>期望（Expectation）是随机变量的加权平均值，定义为：</p><script type="math/tex; mode=display">\mathbb{E}[X] = \sum_{x} x P(X = x) \quad \text{(离散随机变量)}</script><script type="math/tex; mode=display">\mathbb{E}[X] = \int_{-\infty}^{+\infty} x f_X(x) \, dx \quad \text{(连续随机变量)}</script><p>对于高纬度随机变量，可以使用多重积分：</p><script type="math/tex; mode=display">\mathbb{E}[X] = \int_{-\infty}^{+\infty} \cdots\int_{-\infty}^{+\infty}  x_1 x_2 \cdots f_X(x_1, x_2, \ldots) \, dx_1 \, dx_2 \cdots</script><h5 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h5><ol><li>线性性质：对于常数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container>，有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="22.272ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9844.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D53C" d="M12 666Q12 675 24 683H582Q590 680 593 672V588Q593 514 591 502T575 490Q567 490 563 495T555 517Q552 556 517 590Q486 623 445 634T340 648H282Q266 636 264 620T260 492V370H277Q329 375 358 391T404 439Q420 480 420 506Q420 529 436 529Q445 529 451 521Q455 517 455 361Q455 333 455 298T456 253Q456 217 453 207T437 197Q420 196 420 217Q420 240 406 270Q377 328 284 335H260V201Q261 174 261 134Q262 73 264 61T278 38Q281 36 282 35H331Q400 35 449 50Q571 93 602 179Q605 203 622 203Q629 203 634 197T640 183Q638 181 624 95T604 3L600 -1H24Q12 5 12 16Q12 35 51 35Q92 38 97 52Q102 60 102 341T97 632Q91 645 51 648Q12 648 12 666ZM137 341Q137 131 136 89T130 37Q129 36 129 35H235Q233 41 231 48L226 61V623L231 635L235 648H129Q132 641 133 638T135 603T137 517T137 341ZM557 603V648H504Q504 646 515 639Q527 634 542 619L557 603ZM420 317V397L406 383Q394 370 380 363L366 355Q373 350 382 346Q400 333 409 328L420 317ZM582 61L586 88Q585 88 582 83Q557 61 526 46L511 37L542 35H577Q577 36 578 39T580 49T582 61Z"></path></g></g><g data-mml-node="mo" transform="translate(667,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(945,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1474,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(2548.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3548.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(3977.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4533.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(5589,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6118,0)"><g data-mml-node="mi"><path data-c="1D53C" d="M12 666Q12 675 24 683H582Q590 680 593 672V588Q593 514 591 502T575 490Q567 490 563 495T555 517Q552 556 517 590Q486 623 445 634T340 648H282Q266 636 264 620T260 492V370H277Q329 375 358 391T404 439Q420 480 420 506Q420 529 436 529Q445 529 451 521Q455 517 455 361Q455 333 455 298T456 253Q456 217 453 207T437 197Q420 196 420 217Q420 240 406 270Q377 328 284 335H260V201Q261 174 261 134Q262 73 264 61T278 38Q281 36 282 35H331Q400 35 449 50Q571 93 602 179Q605 203 622 203Q629 203 634 197T640 183Q638 181 624 95T604 3L600 -1H24Q12 5 12 16Q12 35 51 35Q92 38 97 52Q102 60 102 341T97 632Q91 645 51 648Q12 648 12 666ZM137 341Q137 131 136 89T130 37Q129 36 129 35H235Q233 41 231 48L226 61V623L231 635L235 648H129Q132 641 133 638T135 603T137 517T137 341ZM557 603V648H504Q504 646 515 639Q527 634 542 619L557 603ZM420 317V397L406 383Q394 370 380 363L366 355Q373 350 382 346Q400 333 409 328L420 317ZM582 61L586 88Q585 88 582 83Q557 61 526 46L511 37L542 35H577Q577 36 578 39T580 49T582 61Z"></path></g></g><g data-mml-node="mo" transform="translate(6785,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(7063,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(7915,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(8415.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(9415.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container>。（对任意随机变量 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 和常数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="3.173ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 1402.7 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(529,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(973.7,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container> 成立）</li><li>独立性：如果 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.726ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 763 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container> 独立，则 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.626ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8232.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D53C" d="M12 666Q12 675 24 683H582Q590 680 593 672V588Q593 514 591 502T575 490Q567 490 563 495T555 517Q552 556 517 590Q486 623 445 634T340 648H282Q266 636 264 620T260 492V370H277Q329 375 358 391T404 439Q420 480 420 506Q420 529 436 529Q445 529 451 521Q455 517 455 361Q455 333 455 298T456 253Q456 217 453 207T437 197Q420 196 420 217Q420 240 406 270Q377 328 284 335H260V201Q261 174 261 134Q262 73 264 61T278 38Q281 36 282 35H331Q400 35 449 50Q571 93 602 179Q605 203 622 203Q629 203 634 197T640 183Q638 181 624 95T604 3L600 -1H24Q12 5 12 16Q12 35 51 35Q92 38 97 52Q102 60 102 341T97 632Q91 645 51 648Q12 648 12 666ZM137 341Q137 131 136 89T130 37Q129 36 129 35H235Q233 41 231 48L226 61V623L231 635L235 648H129Q132 641 133 638T135 603T137 517T137 341ZM557 603V648H504Q504 646 515 639Q527 634 542 619L557 603ZM420 317V397L406 383Q394 370 380 363L366 355Q373 350 382 346Q400 333 409 328L420 317ZM582 61L586 88Q585 88 582 83Q557 61 526 46L511 37L542 35H577Q577 36 578 39T580 49T582 61Z"></path></g></g><g data-mml-node="mo" transform="translate(667,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(945,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(1797,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(2560,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(3115.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4171.6,0)"><g data-mml-node="mi"><path data-c="1D53C" d="M12 666Q12 675 24 683H582Q590 680 593 672V588Q593 514 591 502T575 490Q567 490 563 495T555 517Q552 556 517 590Q486 623 445 634T340 648H282Q266 636 264 620T260 492V370H277Q329 375 358 391T404 439Q420 480 420 506Q420 529 436 529Q445 529 451 521Q455 517 455 361Q455 333 455 298T456 253Q456 217 453 207T437 197Q420 196 420 217Q420 240 406 270Q377 328 284 335H260V201Q261 174 261 134Q262 73 264 61T278 38Q281 36 282 35H331Q400 35 449 50Q571 93 602 179Q605 203 622 203Q629 203 634 197T640 183Q638 181 624 95T604 3L600 -1H24Q12 5 12 16Q12 35 51 35Q92 38 97 52Q102 60 102 341T97 632Q91 645 51 648Q12 648 12 666ZM137 341Q137 131 136 89T130 37Q129 36 129 35H235Q233 41 231 48L226 61V623L231 635L235 648H129Q132 641 133 638T135 603T137 517T137 341ZM557 603V648H504Q504 646 515 639Q527 634 542 619L557 603ZM420 317V397L406 383Q394 370 380 363L366 355Q373 350 382 346Q400 333 409 328L420 317ZM582 61L586 88Q585 88 582 83Q557 61 526 46L511 37L542 35H577Q577 36 578 39T580 49T582 61Z"></path></g></g><g data-mml-node="mo" transform="translate(4838.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(5116.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(5968.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6246.6,0)"><g data-mml-node="mi"><path data-c="1D53C" d="M12 666Q12 675 24 683H582Q590 680 593 672V588Q593 514 591 502T575 490Q567 490 563 495T555 517Q552 556 517 590Q486 623 445 634T340 648H282Q266 636 264 620T260 492V370H277Q329 375 358 391T404 439Q420 480 420 506Q420 529 436 529Q445 529 451 521Q455 517 455 361Q455 333 455 298T456 253Q456 217 453 207T437 197Q420 196 420 217Q420 240 406 270Q377 328 284 335H260V201Q261 174 261 134Q262 73 264 61T278 38Q281 36 282 35H331Q400 35 449 50Q571 93 602 179Q605 203 622 203Q629 203 634 197T640 183Q638 181 624 95T604 3L600 -1H24Q12 5 12 16Q12 35 51 35Q92 38 97 52Q102 60 102 341T97 632Q91 645 51 648Q12 648 12 666ZM137 341Q137 131 136 89T130 37Q129 36 129 35H235Q233 41 231 48L226 61V623L231 635L235 648H129Q132 641 133 638T135 603T137 517T137 341ZM557 603V648H504Q504 646 515 639Q527 634 542 619L557 603ZM420 317V397L406 383Q394 370 380 363L366 355Q373 350 382 346Q400 333 409 328L420 317ZM582 61L586 88Q585 88 582 83Q557 61 526 46L511 37L542 35H577Q577 36 578 39T580 49T582 61Z"></path></g></g><g data-mml-node="mo" transform="translate(6913.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(7191.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(7954.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>。</li></ol><h5 id="全期望公式"><a href="#全期望公式" class="headerlink" title="全期望公式"></a>全期望公式</h5><p>对于随机变量 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 和条件 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.726ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 763 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container>，全期望公式为：</p><script type="math/tex; mode=display">\mathbb{E}[X] = \mathbb{E}[\mathbb{E}[X | Y]]</script><p>内层的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.05ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3116 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D53C" d="M12 666Q12 675 24 683H582Q590 680 593 672V588Q593 514 591 502T575 490Q567 490 563 495T555 517Q552 556 517 590Q486 623 445 634T340 648H282Q266 636 264 620T260 492V370H277Q329 375 358 391T404 439Q420 480 420 506Q420 529 436 529Q445 529 451 521Q455 517 455 361Q455 333 455 298T456 253Q456 217 453 207T437 197Q420 196 420 217Q420 240 406 270Q377 328 284 335H260V201Q261 174 261 134Q262 73 264 61T278 38Q281 36 282 35H331Q400 35 449 50Q571 93 602 179Q605 203 622 203Q629 203 634 197T640 183Q638 181 624 95T604 3L600 -1H24Q12 5 12 16Q12 35 51 35Q92 38 97 52Q102 60 102 341T97 632Q91 645 51 648Q12 648 12 666ZM137 341Q137 131 136 89T130 37Q129 36 129 35H235Q233 41 231 48L226 61V623L231 635L235 648H129Q132 641 133 638T135 603T137 517T137 341ZM557 603V648H504Q504 646 515 639Q527 634 542 619L557 603ZM420 317V397L406 383Q394 370 380 363L366 355Q373 350 382 346Q400 333 409 328L420 317ZM582 61L586 88Q585 88 582 83Q557 61 526 46L511 37L542 35H577Q577 36 578 39T580 49T582 61Z"></path></g></g><g data-mml-node="mo" transform="translate(667,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(945,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1797,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(2075,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(2838,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container> 是在条件 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.726ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 763 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container> 下对 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 的期望，而外层的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 667 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D53C" d="M12 666Q12 675 24 683H582Q590 680 593 672V588Q593 514 591 502T575 490Q567 490 563 495T555 517Q552 556 517 590Q486 623 445 634T340 648H282Q266 636 264 620T260 492V370H277Q329 375 358 391T404 439Q420 480 420 506Q420 529 436 529Q445 529 451 521Q455 517 455 361Q455 333 455 298T456 253Q456 217 453 207T437 197Q420 196 420 217Q420 240 406 270Q377 328 284 335H260V201Q261 174 261 134Q262 73 264 61T278 38Q281 36 282 35H331Q400 35 449 50Q571 93 602 179Q605 203 622 203Q629 203 634 197T640 183Q638 181 624 95T604 3L600 -1H24Q12 5 12 16Q12 35 51 35Q92 38 97 52Q102 60 102 341T97 632Q91 645 51 648Q12 648 12 666ZM137 341Q137 131 136 89T130 37Q129 36 129 35H235Q233 41 231 48L226 61V623L231 635L235 648H129Q132 641 133 638T135 603T137 517T137 341ZM557 603V648H504Q504 646 515 639Q527 634 542 619L557 603ZM420 317V397L406 383Q394 370 380 363L366 355Q373 350 382 346Q400 333 409 328L420 317ZM582 61L586 88Q585 88 582 83Q557 61 526 46L511 37L542 35H577Q577 36 578 39T580 49T582 61Z"></path></g></g></g></g></svg></mjx-container> 是对 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.726ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 763 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container> 的期望。相当于对 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.726ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 763 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container> 的所有可能值进行枚举，然后加权平均。</p><h4 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h4><p>方差（Variance）是随机变量与其期望之间的偏离程度，定义为：</p><script type="math/tex; mode=display">\mathrm{Var}(X) = \mathbb{E}[(X - \mathbb{E}[X])^2] = \mathbb{E}[X^2] - (\mathbb{E}[X])^2</script><h4 id="协方差"><a href="#协方差" class="headerlink" title="协方差"></a>协方差</h4><p>协方差（Covariance）是两个随机变量之间的线性关系，定义为：</p><script type="math/tex; mode=display">COV(X, Y) = \mathbb{E}[(X - \mathbb{E}[X])(Y - \mathbb{E}[Y])] = \mathbb{E}[XY] - \mathbb{E}[X]\mathbb{E}[Y]</script><p>其实方差是协方差的特例，即 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="22.227ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9824.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(1523,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(2292,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2681,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(3533,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3977.7,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(4829.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5496.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6552.2,0)"><g data-mml-node="mi"><path data-c="56" d="M114 620Q113 621 110 624T107 627T103 630T98 632T91 634T80 635T67 636T48 637H19V683H28Q46 680 152 680Q273 680 294 683H305V637H284Q223 634 223 620Q223 618 313 372T404 126L490 358Q575 588 575 597Q575 616 554 626T508 637H503V683H512Q527 680 627 680Q718 680 724 683H730V637H723Q648 637 627 596Q627 595 515 291T401 -14Q396 -22 382 -22H374H367Q353 -22 348 -14Q346 -12 231 303Q114 617 114 620Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(750,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(1250,0)"></path></g></g><g data-mml-node="mo" transform="translate(8194.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8583.2,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(9435.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。</p><p>他们与期望有着密切的关系：</p><p>记忆：协方差=乘积的期望 - 期望的乘积</p><h5 id="协方差矩阵"><a href="#协方差矩阵" class="headerlink" title="协方差矩阵"></a>协方差矩阵</h5><p>对于多维随机变量 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.533ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9517.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D417" d="M327 0Q306 3 174 3Q52 3 43 0H33V62H98L162 63L360 333L157 624H48V686H59Q80 683 217 683Q368 683 395 686H408V624H335L393 540L452 458L573 623Q573 624 528 624H483V686H494Q515 683 646 683Q769 683 778 686H787V624H658L575 511Q493 398 493 397L508 376Q522 356 553 312T611 229L727 62H835V0H824Q803 3 667 3Q516 3 489 0H476V62H513L549 63L401 274L247 63Q247 62 292 62H338V0H327Z"></path></g></g><g data-mml-node="mo" transform="translate(1146.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2202.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2591.6,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3856.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4300.8,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5565.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(6010,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(7348.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(7793.3,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(9128.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，协方差矩阵定义为：</p><script type="math/tex; mode=display">\Sigma = \begin{pmatrix}\mathrm{Var}(X_1) & COV(X_1, X_2) & \cdots & COV(X_1, X_n) \\COV(X_2, X_1) & \mathrm{Var}(X_2) & \cdots & COV(X_2, X_n) \\\vdots & \vdots & \ddots & \vdots \\COV(X_n, X_1) & COV(X_n, X_2) & \cdots & \mathrm{Var}(X_n)\end{pmatrix}</script><p>这在高维高斯过程中非常重要。</p><h3 id="自相关函数"><a href="#自相关函数" class="headerlink" title="自相关函数"></a>自相关函数</h3><p>随机过程的自相关函数定义为</p><script type="math/tex; mode=display">R_X(t_1, t_2) = \mathbb{E}[X(t_1) X(t_2)]</script><h3 id="协方差函数"><a href="#协方差函数" class="headerlink" title="协方差函数"></a>协方差函数</h3><p>随机过程的协方差函数定义为</p><script type="math/tex; mode=display">C_X(t_1, t_2) = \mathbb{E}[(X(t_1) - \mathbb{E}[X(t_1)])(X(t_2) - \mathbb{E}[X(t_2)])]</script><h3 id="平稳性"><a href="#平稳性" class="headerlink" title="平稳性"></a>平稳性</h3><h4 id="宽平稳"><a href="#宽平稳" class="headerlink" title="宽平稳"></a>宽平稳</h4><p>定义：</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.505ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1991 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(852,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1241,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1602,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 对于任意的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="4.615ex" height="1.855ex" role="img" focusable="false" viewBox="0 -626 2039.8 820"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(797.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1242.2,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>，都有</p><script type="math/tex; mode=display">\mathbb{E}[X(t_1)] = \mathbb{E}[X(t_2)]</script><p>且</p><script type="math/tex; mode=display">R_X(t_1, t_2) = R_X(t_1 + \tau, t_2 + \tau)</script><p>即自相关函数只与时间差 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="10.561ex" height="1.756ex" role="img" focusable="false" viewBox="0 -626 4668.1 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g><g data-mml-node="mo" transform="translate(794.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(1850.6,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2870.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(3870.6,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container> 有关。即</p><script type="math/tex; mode=display">R_X(t_1, t_2) = R_X(\tau) = R_X(t_2 - t_1))</script><p>也就是说，要证明是宽平稳的，只需要证明自相关函数只与时间差 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.029ex;" xmlns="http://www.w3.org/2000/svg" width="1.17ex" height="1.005ex" role="img" focusable="false" viewBox="0 -431 517 444"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g></g></g></svg></mjx-container> 有关。  </p><h4 id="严平稳"><a href="#严平稳" class="headerlink" title="严平稳"></a>严平稳</h4><p>定义：</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.505ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1991 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(852,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1241,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1602,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 对于任意的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="4.615ex" height="1.855ex" role="img" focusable="false" viewBox="0 -626 2039.8 820"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(797.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1242.2,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>，都有</p><script type="math/tex; mode=display">F_{X(t_1), X(t_2)}(x_1, x_2) = F_{X(t_1 + \tau), X(t_2 + \tau)}(x_1, x_2)</script><p>即联合分布函数不随时间平移而改变。  </p><h3 id="母函数"><a href="#母函数" class="headerlink" title="母函数"></a>母函数</h3><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a><strong>定义：</strong></h4><p>令 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 是取值为非负整数的随机变量，已知 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.759ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6523.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(2269.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3325.6,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(3846.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4513.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(5569.1,0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container> 是对应的概率，则称一个 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 型如</p><script type="math/tex; mode=display">G_X(s) = \mathbb{E}[s^X] = \sum_{k=0}^{\infty} p_k s^k</script><p>的函数为<strong>概率母函数（Probability Generating Function）</strong>。</p><p>也有别名加生成函数和形式级数。</p><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a><strong>性质</strong></h4><p>已知随机变量 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 的概率母函数为：</p><script type="math/tex; mode=display">G_X(s) = \mathbb{E}[s^X] = \sum_{k=0}^{\infty} p_k s^k</script><p>则有以下性质：</p><ol><li><strong>归一性</strong>  </li></ol><script type="math/tex; mode=display">   G_X(1) = 1</script><ol><li><strong>期望公式</strong>  </li></ol><script type="math/tex; mode=display">   \mathbb{E}[X] = G_X'(1)</script><ol><li><strong>方差公式</strong>  </li></ol><script type="math/tex; mode=display">   \mathrm{Var}(X) = G_X''(1) + G_X'(1)\left(1 - G_X'(1)\right)</script><p><strong>概率母函数的性质：计算两个离散随机变量和的分布</strong></p><p>概率母函数除了描述单个随机变量的分布外，还有一个非常有用的性质 —— <strong>可用于计算两个独立离散随机变量之和的分布</strong>。</p><p><strong>定理：</strong></p><p>设 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.861ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 1264.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.861ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 1264.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container> 是两个<strong>相互独立</strong>的、取非负整数值的随机变量，分别具有概率母函数：</p><script type="math/tex; mode=display">G_{X_1}(t) = \mathbb{E}[t^{X_1}], \quad G_{X_2}(t) = \mathbb{E}[t^{X_2}]</script><p>则它们之和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="13.432ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 5937.1 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2185.6,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3672.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(4672.6,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container> 的概率母函数为：</p><script type="math/tex; mode=display">G_X(t) = G_{X_1 + X_2}(t) = G_{X_1}(t) \cdot G_{X_2}(t)</script><p>也就是说：<strong>独立随机变量的和的概率母函数，等于各自概率母函数的乘积。</strong></p><h3 id="特征函数"><a href="#特征函数" class="headerlink" title="特征函数"></a>特征函数</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>特征函数（Characteristic Function）是随机变量分布的一个重要工具，定义为：</p><script type="math/tex; mode=display">\phi_X(\omega) = \mathbb{E}[e^{j\omega X}] = \int_{-\infty}^{\infty} e^{j\omega x} f_X(x) \, dx</script><p>其中，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="0.932ex" height="1.957ex" role="img" focusable="false" viewBox="0 -661 412 865"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></svg></mjx-container> 是虚数单位，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.407ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 622 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g></g></g></svg></mjx-container> 是频率变量。</p><p>其实就是对随机变量 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 的概率密度函数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.714ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2525.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g><g data-mml-node="mo" transform="translate(1175.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1564.5,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2136.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 进行傅里叶逆变换。</p><h4 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h4><ol><li>特征函数与概率分布一一对应</li><li>若 $X<em>1, X_2 … X_n<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="33.937ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 15000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">相</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">互</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">独</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">立</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">则</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">它</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">们</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">特</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">征</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">函</text></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(13000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">满</text></g><g data-mml-node="mi" transform="translate(14000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">足</text></g></g></g></svg></mjx-container>$<br>  \phi</em>{X<em>1 + X_2 + … + X_n}(\omega) = \phi</em>{X<em>1}(\omega) \cdot \phi</em>{X<em>2}(\omega) \cdots \phi</em>{X_n}(\omega)</li></ol><script type="math/tex; mode=display">## 高数### Gamma 积分公式#### 📌 定义（欧拉积分形式）对于复数 \( z \)，实部大于 0：</script><p>\Gamma(z) = \int_0^{\infty} t^{z-1} e^{-t} \, dt \quad \text{Re}(z) &gt; 0</p><script type="math/tex; mode=display">---注意，很多时候去凑形式的时候，往往忘记了 $t^{z-1}$ 中的 $t$ 也要凑。#### 🎯 特殊值- 当 $z = n \in \mathbb{N}^+$ 时：</script><p>\Gamma(n) = (n - 1)!</p><script type="math/tex; mode=display">- 例子：</script><p>\Gamma(1) = 0! = 1, \quad \Gamma(2) = 1! = 1, \quad \Gamma(3) = 2! = 2</p><script type="math/tex; mode=display">- 特别地：</script><p>\Gamma\left(\frac{1}{2}\right) = \sqrt{\pi}</p><script type="math/tex; mode=display">---#### 🔁 变形与代换形式- 代换  $t = x^2$，可以得到：</script><p>\Gamma\left(\frac{1}{2}\right) = \int_0^{\infty} x^{-1/2} e^{-x} \, dx = \sqrt{\pi}</p><script type="math/tex; mode=display">---##### 🔗 与 Beta 函数关系Beta 函数定义为：</script><p>B(x, y) = \int_0^1 t^{x-1}(1 - t)^{y - 1} \, dt</p><script type="math/tex; mode=display">与 Gamma 函数的关系：</script><p>B(x, y) = \frac{\Gamma(x)\Gamma(y)}{\Gamma(x + y)}</p><script type="math/tex; mode=display">---###### 📉 斯特林近似（当 \( z \to \infty \) 时）</script><p>\Gamma(z) \approx \sqrt{2\pi} \, z^{z - \frac{1}{2}} e^{-z}</p><script type="math/tex; mode=display">---### 高斯积分#### 高斯积分（Gaussian Integral）##### 1. 基本高斯积分最基础的高斯积分形式为：</script><p>\int_{-\infty}^{+\infty} e^{-x^2} \, dx = \sqrt{\pi}</p><script type="math/tex; mode=display">##### 2. 带参数的高斯积分对于带参数的高斯积分：</script><p>\int_{-\infty}^{+\infty} e^{-a x^2} \, dx = \sqrt{\frac{\pi}{a}}, \quad a &gt; 0</p><script type="math/tex; mode=display">##### 3. 奇函数高斯积分对于奇函数乘以高斯函数的积分：</script><p>\int_{-\infty}^{+\infty} x^k e^{-x^2} \, dx = 0, \quad k \text{ 为奇数}</p><script type="math/tex; mode=display">##### 4. 偶函数高斯积分对于偶函数乘以高斯函数的积分：</script><p>\int_{-\infty}^{+\infty} x^{2n} e^{-x^2} \, dx = \frac{(2n-1)!!}{2^n} \sqrt{\pi}, \quad n \in \mathbb{N}</p><script type="math/tex; mode=display">### 平方展开式对于任意 $a_1, a_2, \dots, a_n$，平方和的展开公式为：</script><p>\left(\sum<em>{k=1}^n a_k\right)^2 = \sum</em>{k=1}^n a<em>k^2 + 2 \sum</em>{1 \leq k &lt; l \leq n} a_k a_l.</p><script type="math/tex; mode=display">## 线性代数### 特征值和特征向量设 $A$ 是一个 $n \times n$ 的矩阵，$\lambda$ 是一个标量，$v$ 是一个非零向量。如果满足以下方程：</script><p>A v = \lambda v</p><script type="math/tex; mode=display">则称 $\lambda$ 是矩阵 $A$ 的特征值，$v$ 是对应的特征向量。#### 具体如何计算呢特征值和特征向量的计算可以通过求解以下特征方程来完成：</script><p>\text{det}(\lambda I - A) = 0</p><script type="math/tex; mode=display">其中 $I$ 是单位矩阵，$\text{det}$ 表示行列式。特征值 $\lambda$ 的求解就是求解这个方程的根。解关于 $\lambda$ 的多项式方程后，可以得到特征值 $\lambda_1, \lambda_2, \ldots, \lambda_n$。对应的特征向量可以通过将特征值代入以下方程求解：</script><p>(A - \lambda_i I)v = 0</p><script type="math/tex; mode=display">这个方程一定是线性相关的，求到最后用某一个 $x$ 来表示其他的 $x$，然后就可以得到特征向量。### 对角化一个矩阵 $A$ 可以被对角化，如果存在一个可逆矩阵 $P$ 和一个对角矩阵 $D$，使得：</script><p>A = P D P^{-1}</p><script type="math/tex; mode=display">其中 $D$ 的对角线元素是 $A$ 的特征值。对角化的过程通常包括以下步骤：1. **计算特征值**：求解特征方程 $\text{det}(\lambda I - A) = 0$。2. **计算特征向量**：对于每个特征值 $\lambda_i$，求解方程 $(A - \lambda_i I)v = 0$。3. **构造矩阵 $P$ 和 $D$**：将特征向量按列排列形成矩阵 $P$，将特征值按对角线排列形成对角矩阵 $D$。对角化的好处在于可以简化矩阵的运算，特别是在计算矩阵的幂或指数时。### 对称一个矩阵 $A$ 是对称的，如果它等于它的转置，即：</script><p>A = A^T</p><script type="math/tex; mode=display">对称矩阵具有以下性质：1. **实特征值**：所有特征值都是实数。2. **正交特征向量**：对应不同特征值的特征向量是正交的。3. **可对角化**：对称矩阵总是可以被对角化，且可以通过正交矩阵对角化。### 正交对角化对于对称矩阵 $A$，一定可以找到一个正交矩阵 $Q$ 和一个对角矩阵 $D$，使得：</script><p>A = Q D Q^T</p><script type="math/tex; mode=display">其中 $D$ 的对角线元素是 $A$ 的特征值，$Q$ 的列向量是 $A$ 的正交特征向量。与一般的对角化不同，我们这里多一步，对特征向量做**正交归一化**# 随机过程## 定义你现在知道 **随机变量（random variable）** 是啥了，它表示**一个**“值不确定”的量，比如投一次骰子，结果是个离散随机变量；温度计测一次温度，是个连续随机变量。但这些都是**一次性的不确定**。**随机过程（stochastic process）** = 多次 + 时变 + 不确定换句话说，**随机过程就是一组随时间变化的随机变量序列**。你把时间引入随机变量，就是随机过程。# 离散时间马尔科夫链## 定义设有可数样本空间的 $\mathcal{S}$，如果随机过程 $\{X_n\}_{n=0}^{\infty}$ 满足：</script><p>P(X<em>{n+1} = i</em>{n+1} | X<em>n = i_n, X</em>{n-1} = i<em>{n-1}, \ldots, X_0 = i_0) = P(X</em>{n+1} = i_{n+1} | X_n = i_n)</p><script type="math/tex; mode=display">对任意的 $n \geq 0$，则称 $\{X_n\}_{n=0}^{\infty}$ 是一个**离散时间马尔科夫链**（DTMC）。定义告诉我们，马尔科夫链的未来状态只与当前状态有关，而与过去的状态无关。这种性质称为**无后效性**（Markov property）。## 状态转移概率对于马尔科夫链 $X_n$ 的 $n$ 步转移概率定义为：</script><p>P(X<em>{k+n} = j | X_k = i) = P</em>{ij}^{(n)}</p><script type="math/tex; mode=display">得到一个矩阵 $P^{(n)}$在我们的课程中，认为转移概率不依赖于 $k$ ，因此是**齐次的**特别地当 $n=1$ 时，称为**一步转移概率**：</script><p>P<em>{ij} = P(X</em>{k+1} = j | X_k = i)</p><script type="math/tex; mode=display">## C-K 方程C-K 方程（Chapman-Kolmogorov 方程）是描述马尔科夫链状态转移的基本方程。它表明从状态 $i$ 到状态 $j$ 的 $n$ 步转移概率可以通过中间状态的转移概率来计算：</script><p>P<em>{ij}^{(n + m)} = \sum</em>{k} P<em>{ik}^{(n)} P</em>{kj}^{(m)}</p><script type="math/tex; mode=display">矩阵形式为</script><p>P^{(n + m)} = P^{(n)} P^{(m)}</p><script type="math/tex; mode=display">这意味着，$n$ 步转移矩阵可以通过一步转移矩阵的乘积来计算。</script><p>P^{(n)} = P^n</p><script type="math/tex; mode=display">有括号表示 $n$ 步转移概率矩阵，没有括号表示 $n$ 次矩阵乘积。这里通常会用到矩阵的**幂运算**，即将转移矩阵 $P$ 自身乘以 $n$ 次。为了简化计算，我们可以使用矩阵的特征分解或对角化方法。## 表示方法### 转移矩阵法对于马尔科夫链 $\{X_n\}_{n=0}^{\infty}$，可以用转移矩阵 $P$ 来表示状态转移概率：</script><p>P = \begin{pmatrix}<br>p<em>{00} &amp; p</em>{01} &amp; \cdots &amp; p<em>{0n} \<br>p</em>{10} &amp; p<em>{11} &amp; \cdots &amp; p</em>{1n} \<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>p<em>{n0} &amp; p</em>{n1} &amp; \cdots &amp; p_{nn}<br>\end{pmatrix}</p><script type="math/tex; mode=display">其中 $P_{ij}$ 表示从状态 $i$ 到状态 $j$ 的一步转移概率。### 状态转移图状态转移图是马尔科夫链的图形表示方法，其中每个状态用节点表示，转移概率用有向边表示。边上的权重表示从一个状态到另一个状态的转移概率。### 递推函数</script><p>X<em>{n+1} = f(X_n, Z</em>{n+1})</p><script type="math/tex; mode=display">其中 $Z_k$ 是一个随机变量序列，只需要满足下列条件之一：1. $Z_k$ 独立同分布，且与 $X_0$ 独立2. $Z_k$ 同分布，且给定 $X_n$ 的条件下，$Z_k$ 独立于 $X_0$这是我们==最常用到的证明方法==，特别是当状态空间有限时。 ## 状态分类### 可达性状态 $j$ 从状态 $i$ 可达，当且仅当存在一个正整数 $n$，使得 $P_{ij}^{(n)} > 0$。这意味着从状态 $i$ 可以通过若干步转移到达状态 $j$。### 传递性状态 $i$ 是传递的，若 $i \rightarrow j, j\rightarrow k$，则 $i \rightarrow k$。即如果从状态 $i$ 可以到达状态 $j$，并且从状态 $j$ 可以到达状态 $k$，则从状态 $i$ 也可以到达状态 $k$。### 相通性状态 $i$ 和状态 $j$ 是相通的，当且仅当 $i \rightarrow j$ 且 $j \rightarrow i$。这意味着从状态 $i$ 可以到达状态 $j$，并且从状态 $j$ 也可以到达状态 $i$。相同是一种等价关系！因此，==**等价类具有相同的类性质**==。这是很有用的，意味着当我们==确定了一个状态的性质后，可以直接推广到整个等价类==。### 闭集状态集合 $C$ 是闭集，当且仅当对于任意的状态 $i \in C$ 和 $j \notin C$，都有 $P_{ij} = 0$。这意味着从闭集中的状态无法转移到闭集外的状态，是一种"进得去，出不来"的吸收态。### 不可约性如果闭集 $C$ 没有闭的真子集，则称 $C$ 是不可约的。（$C$ 中任意两状态都相通）一个马尔科夫链是 **不可约的**，如果从任意状态 i 出发，经过有限步转移后能以 **正概率** 到达任意其他状态 j如果链是 **可约的**（Reducible），则存在某些状态子集，一旦进入就无法离开可以想象成韦恩图### 周期性状态 $i$ 的周期 $d_i$ 定义为：</script><p>d<em>i = \gcd{n : P</em>{ii}^{(n)} &gt; 0}</p><script type="math/tex; mode=display">讲人话，即状态 $i$ 回到自身的步数的最大公约数。如果 $d_i = 1$，则称状态 $i$ 是**非周期的**（aperiodic）；如果 $d_i > 1$，则称状态 $i$ 是**周期的**（periodic）。判断周期性，画图即可如果两个状态 $i$ 和 $j$ 相通，则它们的周期相同，即 $d_i = d_j$。其实先前提到过，如果两个状态是相通的，那么他们属于同一个类，共享类性质，周期当然相同。### 长时间特性人们往往关注马尔科夫链长时间后的统计特性，比如哪些状态会被频繁访问，哪些状态会被忽略。为了描述这种长期行为，我们引入了常返性（recurrence）和瞬时性（transience）的概念。#### 首达概率状态 $j$ 从状态 $i$ 经过 $n$ 步的首达概率定义为：</script><p>f<em>{ij}^{(n)} = P(X_n = j, X</em>{n-1} \neq j, \ldots, X_1 \neq j | X_0 = i)</p><script type="math/tex; mode=display">通常这个概率可以通过状态转移图，然后一个个去计算。然后得到规律，即得到 $n$ 的一般表达式。#### 常返性与瞬时性如果</script><p>f<em>{ii}=\sum</em>{n=1}^{\infty} f_{ij}^{(n)} = 1</p><script type="math/tex; mode=display">那么状态 $i$ 是**常返的**（recurrent），否则是**瞬时的**（transient）。**另外的判断定理**</script><p>\sum<em>{n=0}^{+\infty} p</em>{ii}^{(n)}=\frac{1}{1-f_{ii}}</p><script type="math/tex; mode=display">如果</script><p>\sum<em>{n=1}^{\infty} p</em>{ii}^{(n)} = \infty</p><script type="math/tex; mode=display">则状态 $i$ 是常返的；如果</script><p>\sum<em>{n=1}^{\infty} p</em>{ii}^{(n)} &lt; \infty</p><script type="math/tex; mode=display">则状态 $i$ 是瞬时的。直观理解- **常返状态**：像一个“黑洞”，一旦进入，就会无限次返回（如随机游走在一维整数格点上的原点）。- **非常返状态**：像一个“临时站点”，最终可能会被抛弃（如随机游走在三维空间中的点，几乎不会返回原点）。#### 首达时间对于常返状态，我们可以定义他的首达时间。常返态 $i$ 的首达时间定义为：</script><p>T_i = \min{n \geq 1 : X_n = i | X_0 = i}</p><script type="math/tex; mode=display">根据首达时间，可以定义平均首达时间：</script><p>\mu<em>i = E[T_i] = \sum</em>{n=1}^{\infty} n f_{ii}^{(n)}</p><script type="math/tex; mode=display">如果 $\mu_i < \infty$，则称状态 $i$ 是**正常返的**（positive recurrent），否则是**零返的**（null recurrent）。如何理解呢？> - **正常返状态**：平均返回时间是有限的，意味着状态会被频繁访问 (**会回来，而且回来得比较勤快**)>     - **典型例子**：有限状态不可约马尔科夫链的所有状态（如天气预报模型中的“晴天”“雨天”）> - **零返状态**：平均返回时间是无限的，意味着状态会被稀疏访问 (**会回来，但可能要等很久很久**)>     - **典型例子**：一维对称随机游走（醉汉左右晃悠，最终会回家，但平均等待时间无限）##### 推论：常返性对转移概率极限的影响对于瞬时态和零常返态，有</script><p>\lim<em>{n \to \infty} p</em>{ii}^{(n)} = 0</p><script type="math/tex; mode=display">对于非周期正返态，有</script><p>\lim<em>{n \to \infty} p</em>{ii}^{(n)} = \frac{f_{ii}}{\mu_i}</p><script type="math/tex; mode=display">其中 $\mu_i$ 是状态 $i$ 的平均返回时间。#### 常返态存在定理1. 对于有限状态马尔科夫链，一定存在正常返态。2. 对于不可约的马尔科夫链，所有状态都是正常返的。这个定理告诉我们，各状态的常返性可以一眼看出！只需要判断是否有限状态或不可约即可。对找到的不可约状态，直接认为是正常返的。 别 tm 再去死算计算首达概率了！## 极限行为与平稳分布这里考虑的问题是，当马尔科夫链运行足够长时间后，状态分布是否会趋向于某个稳定的分布，极限是否存在，如果存在，如何求解。### 极限分布如果存在一个概率分布 $\pi$，使得对于任意状态 $i$，都有：</script><p>\lim_{n \to \infty} P(X_n = i) = p_i</p><script type="math/tex; mode=display">则称 $\pi$ 是马尔科夫链的**极限分布**（stationary distribution）。又</script><p>P(X<em>n=j)) = \sum</em>{i} p_{ij}^{(n)} P(X_0=i)</p><script type="math/tex; mode=display">可以知道：极限分布依赖于初始分布 $P(X_0=i)$ 和转移概率 $p_{ij}^{(n)}$。由[[##推论：常返性对转移概率极限的影响]]可知，当是非常返态或者零常返态的，极限分布概率为 0，所以马尔科夫链最终形态由正常返态决定。可约->有正常返的->极限随初值周期->极限可能不存在### 平稳分布如果存在一个概率分布 $\pi=(p_1, p_2, \ldots, p_n)$，满足平衡方程</script><p>\pi = \pi P</p><script type="math/tex; mode=display">则称 $\pi$ 是马尔科夫链的**平稳分布**（stationary distribution）。平稳分布是马尔科夫链长期行为的一个重要特征，它描述了在长时间运行后，状态分布的稳定性。通常列出平衡方程之后，还需要加上 $\sum \pi_i=1$ 来确保 $\pi$ 是一个概率分布。注意：1. 有时候极限尽管不存在，但仍然可以找到平稳分布。2. 平稳分布和极限存在没有必然联系3. 平稳分布不一定是唯一的，可能存在多个平稳分布。#### 平稳分布存在定理存在的充要条件是链中存在正常返态存在且唯一的充要条件是链中存在唯一的不可约正常返子集# 泊松过程## 定义随机过程 $N(t)$ 表示时间段 $[0, t]$ 内发生事件数目的总和，则称其为计数过程。把满足下面的条件的计数过程称为标准泊松过程：1. $N(0) = 0$，即在时间 $0$ 时刻没有发生事件。2. 平稳增量性，对于任意的 $0 \leq s < t$，事件发生的次数 $N(t) - N(s)$ 只与时间间隔 $t - s$ 有关3. 独立增量性，对于任意的 $0 \leq s < t$，事件发生的次数 $N(t) - N(s)$ 与 $N(s)$ 独立。4. 微元时间内发生多于一个事件的概率是刚好发生一次的概率的无穷小量。对于某类题，要你证明是泊松过程，严格按照定义，证明每一个条件### 概率分布</script><p>P(N(t)=k) = \frac{(\lambda t)^k e^{-\lambda t}}{k!}, \quad k = 0, 1, 2, \dots</p><script type="math/tex; mode=display">### $\lambda$ 的含义$\lambda$ 是单位时间内事件发生的平均次数，称为**到达率**（arrival rate）。它描述了事件发生的频率。</script><p>\lambda = \lim_{t \to 0} \frac{N(t)}{t}</p><script type="math/tex; mode=display">### 期望和方差其期望和方差分别为：</script><p>E[N(t)] =  Var[N(t)] = \lambda t</p><script type="math/tex; mode=display">### 母函数泊松过程的母函数（生成函数）为：</script><p>M(t) = E[e^{tN(t)}] = e^{\lambda t(e^t - 1)}</p><script type="math/tex; mode=display">## 性质### 联合分布为了求解泊松过程的联合分布，我们可以利用泊松过程的平稳增量性和独立增量性设 $N(t)$ 是强度为 $\lambda$ 的泊松过程，则对于任意的 $0 \leq t_1 < t_2 < \cdots < t_n$，$0 \leq k_1, k_2, \ldots, k_n$，有：</script><p>P(N(t<em>1) = k_1, N(t_2) = k_2, \ldots, N(t_n) = k_n) = \prod</em>{i=1}^n P(N(t<em>i) - N(t</em>{i-1}) = k<em>i - k</em>{i-1})</p><script type="math/tex; mode=display">### 条件分布设 $N(t)$ 是强度为 $\lambda$ 的泊松过程，$0 \leq s < t$，则有：</script><p>P(N(t) = m | N(s) = k) = \frac{\lambda^{m-k} (t-s)^{m-k} e^{-\lambda(t-s)}}{(m-k)!}</p><script type="math/tex; mode=display">这说明在已知 $N(s) = m$ 的条件下，$N(t) - N(s)$ 仍然服从泊松分布，实际上就是 $N(t-s)$### 到达时刻#### 概率密度对于强度为 $\lambda$ 的泊松过程，设 $S_n$ 是第 $n$ 次到达的时刻服从于 Gamma 分布，概率密度为：</script><p>f_{S_n}(t) = \lambda e^{-\lambda t} \frac{(\lambda t)^{n-1}}{(n-1)!}, \quad t \geq 0</p><script type="math/tex; mode=display">证明：用微元法，第 $n$ 次到达时刻 $S_n$ 可以看作是前 $n-1$ 次到达时刻 $S_{n-1}$ 加上一个独立的指数分布随机变量 $X_n$，即：</script><p>f<em>{S_n}=\lim</em>{\Delta t \to 0}  \frac{P(t \le S<em>n \le t + \Delta t)}{\Delta t}= \lim</em>{\Delta t \to 0}\frac{P(N(t)=n - 1)P(N(t+\Delta t) - N(t) = 1)}{\Delta t} =  e^{-\lambda t} \frac{(\lambda t)^{n-1}}{(n-1)!}\lambda</p><script type="math/tex; mode=display">#### 联合密度任意 $n$ 次事件的到达时刻的联合概率密度为</script><p>f_{S_1 \ldots S_n}(t_1, t_2, \ldots, t_n) = \lambda^ne^{-\lambda t_n}</p><script type="math/tex; mode=display">证明思路同上面微元法，这里不给了#### 条件密度已知 $[0, t]$ 内发生了 $n$ 次事件，设 $S_1, S_2, \ldots, S_n$ 是这些事件的到达时刻，则它们的条件密度为</script><p>f_{S_1, S_2, \ldots, S_n | N(t) = n}(t_1, t_2, \ldots, t_n) = \frac{n!}{t^n}, \quad 0 \leq t_1 &lt; t_2 &lt; \cdots &lt; t_n \leq t</p><script type="math/tex; mode=display">### 事件间隔对于强度为 $\lambda$ 的泊松过程，事件间隔 $S_n$ 服从指数分布，概率密度为：</script><p>f_{S_n}(t) = \lambda e^{-\lambda t}, \quad t \geq 0</p><script type="math/tex; mode=display">指数分布具有无记忆性。这意味着泊松过程的事件间隔（注意不是到达时刻）是独立的，并且每个间隔的分布不受前一个间隔的影响。从任意一个时间点开始重新观察，得到的新过程在概率意义上与原过程相同。#### 可加性两个泊松过程 $N_1(t)$ 和 $N_2(t)$ 的事件间隔之和仍然服从泊松分布，且参数为 $\lambda_1 + \lambda_2$。即：</script><p>P(N_1(t) + N_2(t) = k) = \frac{(\lambda_1 t + \lambda_2 t)^k e^{-(\lambda_1 + \lambda_2)t}}{k!}, \quad k = 0, 1, 2, \ldots</p><script type="math/tex; mode=display">但是！做差不成立！### 顺序统计量注意，以下定义是独立于泊松过程的概率论的知识#### 定义设 $X_1, X_2, \ldots, X_n$ 是从同一分布中独立抽取的随机变量，则它们的顺序统计量定义为：> 第 $i$ 个顺序统计量 $X_{(i)}$ 是这 $n$ 个随机变量中第 $i$ 小的值。记作 $X_{(i)}$#### 概率密度对于第 $k$ 个顺序统计量 $X_{(k)}$，其期望为：</script><p>E[X_{(k)}] = \frac{k}{n+1}</p><script type="math/tex; mode=display">#### 联合分布对于 $n$ 个独立同分布的随机变量 $X_1, X_2, \ldots, X_n$，它们的顺序统计量 $X_{(1)}, X_{(2)}, \ldots, X_{(n)}$ 的联合分布为：</script><p>f<em>{X</em>{(1)}, X<em>{(2)}, \ldots, X</em>{(n)}}(x_1, x_2, \ldots, x_n) = n! f_X(x_1) f_X(x_2) \cdots f_X(x_n)  </p><script type="math/tex; mode=display">其中 $f_X(x)$ 是单个随机变量的概率密度函数。$n!$ 是因为每个顺序统计量的排列方式有 $n!$ 种可能。#### 与泊松过程的关系对于泊松过程的事件到达时刻 $S_1, S_2, \ldots, S_n$，它们与 $n$ 个独立的 $(0,t)$ 上的均匀分布随机变量 $U_1, U_2, \ldots, U_n$ 的顺序统计量有相同的分布。</script><p>(S<em>1, S_2, \ldots, S_n) \overset{d}{=} (U</em>{(1)}, U<em>{(2)}, \ldots, U</em>{(n)})</p><script type="math/tex; mode=display">因此有##### 推论如果 $S_1, S_2, \ldots, S_n$ 是泊松过程的事件到达时刻，对任意函数 $g(x)$</script><p>E[\sum_{k=1}^n g(S_k)|N(t)=n] = nEg(U) </p><script type="math/tex; mode=display">其中 $U$ 是均匀分布在 $(0,t)$ 上的随机变量。这一推论是很有用的，用一道例题来说明：###### 等待时间总和设乘客按照参数为 $\lambda$ 的泊松过程到达机场，飞机起飞时间为 $t$。求在飞机起飞前到达的乘客的等待时间总和的期望。 **解**设在飞机起飞前到达的乘客数为 $N(t)$，则他们的到达时刻为 $S_1, S_2, \ldots, S_{N(t)}$。每个乘客的等待时间为 $t - S_i$，因此到达乘客的等待时间总和为：</script><p>\sum_{i=1}^{N(t)} (t - S_i)</p><script type="math/tex; mode=display">注意这里 $N(t)$ 是随机变量，我们需要将他固定下来，因此要使用条件期望：</script><p> E(\sum<em>{i=1}^{N(t)} (t - S_i))= E</em>{N(t)}(E(\sum_{i=1}^{N(t)} (t - S_i)|N(t)))</p><script type="math/tex; mode=display">利用[[##推论]]，有</script><p>E(\sum_{i=1}^{N(t)} (t - S_i)|N(t)=n) = n E_U(t - U)= n(t - \frac{t}{2}) = \frac{nt}{2}</p><script type="math/tex; mode=display">因此带回有</script><p>E(\sum<em>{i=1}^{N(t)} (t - S_i)) = E</em>{N(t)}(\frac{N(t)t}{2}) = \frac{t}{2} E(N(t)) = \frac{t}{2} \lambda \lambda t = \frac{\lambda t^2}{2}</p><script type="math/tex; mode=display">## 泊松过程的拓广泊松过程的托管本质上就是在放松它的各种限制条件### 非齐次泊松过程#### 定义非齐次泊松过程是指到达率 $\lambda(t)$ 随时间变化的泊松过程。其定义与齐次泊松过程类似，但增量的分布依赖于时间。</script><p>\lambda(t) = \lim_{\Delta t \to 0} \frac{N(t + \Delta t) - N(t)}{\Delta t}</p><script type="math/tex; mode=display">需要格外注意的是，这里的 $\lambda(t)$ 是一个确定性的函数，而不是随机变量。这一点将与后面的条件泊松过程区分开来。#### 概率分布对于非齐次泊松过程，事件在时间 $[0, t]$ 内发生的次数 $N(t)$ 的概率分布为：</script><p>P(N(t) = k) = \frac{[\int_0^t \lambda(s) ds]^k }{k!}e^{-\int_0^t \lambda(s) ds}, \quad k = 0, 1, 2, \ldots</p><script type="math/tex; mode=display">可以看到，只是原来的 $\lambda t$ 换成了 $\int_0^t \lambda (s) ds$，即在时间 $[0, t]$ 内的总到达率。若 $\lambda(t)$ 是常数 $\lambda$，则退化为齐次泊松过程。  例如，在 $[t_1, t_2]$ 上出现 $k$ 个事件的概率为：</script><p>P(N(t<em>2)-N(t_1)=k)=\frac{[\int</em>{t<em>1}^{t_2} \lambda(s) ds]^k }{k!}e^{-\int</em>{t_1}^{t_2} \lambda(s) ds}</p><script type="math/tex; mode=display">期望和方差都为</script><p>\int_{t_1}^{t_2}\lambda(t)dt</p><script type="math/tex; mode=display">**其实**只需要把标准泊松过程的 $\lambda t$ 换成 $\int_0^t \lambda(s) ds$ 即可。剩余的一样，仅仅失去平稳增量性。### 复合泊松过程#### 定义复合泊松过程是指在泊松过程的基础上，放宽了每次到达事件的数量限制。即在每个时间间隔内，可能发生多个事件，每个事件的数量服从某种分布。> 所以复合的意思就是，标准泊松，每次事件数不是 1，而是另一个分布设 $N(t)$ 是泊松过程，$Y_i$ 是每次到达事件的数量，则复合泊松过程 $Y{(t)}$ 定义为：</script><p>Y(t) = \sum_{i=1}^{N(t)} Y_i</p><script type="math/tex; mode=display">#### 特征函数定理</script><p>\phi<em>Y(t) = exp\left(\lambda t [\phi</em>{Y_1}(u) - 1] \right) </p><script type="math/tex; mode=display">这意味着，复合泊松过程的分布由泊松过程的参数 $\lambda$ 和每次到达事件数量的分布决定。### 条件泊松（随机参数泊松）放宽独立增量性，允许到达率 $\lambda(t)$ 是一个随机变量，这样的泊松过程称为条件泊松过程（或随机参数泊松过程）。#### 定义条件泊松过程是指在给定某些条件下，泊松过程的到达率 $\lambda(t)$ 是一个随机变量。即在某些条件下，泊松过程的到达率是随机的。#### 概率分布条件泊松过程的参数 $\Lambda$ 为连续随机变量时（概率密度函数为 $f_\Lambda(\lambda)$），则条件泊松过程的概率分布为：</script><p>P(N(t) = k)=\int<em>0^\infty P(N(t) = k | \Lambda = \lambda) f</em>\Lambda(\lambda) d\lambda =\int<em>0^\infty \frac{[\lambda t]^k e^{-\lambda t}}{k!} f</em>\Lambda(\lambda) d\lambda  </p><script type="math/tex; mode=display">这其实就是个全概率公式，利用了条件泊松过程的定义。### 更新过程#### 定义与标准泊松对比，更新过程的事件间隔是独立同分布的随机变量。#### 概率分布设更新过程的事件间隔的分布为 $F_T(t)$，概率密度为 $f_T(t)$，$S_n=\sum_{i=1}^n T_i$ 是第 $n$ 次事件发生的时间，则更新过程的概率分布为：</script><p>P(N(t) = n) = F<em>{S_n}(t)-F</em>{S_{n+1}}(t) </p><script type="math/tex; mode=display">其中 $F_{S_n}(t)$ 是第 $n$ 次事件发生的时间的分布函数。这里 $F_{S_n}(t)$ 可以通过卷积得到，设 $F_{k}(t) = F_{S_k}(t)$，则有</script><p>F<em>n(t) = \int_0^t f_T(s) \cdot F</em>{n-1}(t-s) \, ds</p><script type="math/tex; mode=display">也就是 $f_T(s)$ 的 $n$ 重卷积。为了理解这个公式，我们需要==将次数转化到时间轴==上，$t$ 时刻发生了 $n$ 个事件，那么等价于 $S_n$ 这个事件发生在 $t$ 时刻前，而 $S_{n+1}$ 这个事件发生在 $t$ 时刻后，因此 $F_{S_n}(t)-F_{S_{n+1}}(t)$ 就是在 $t$ 时刻发生了 $n$ 个事件的概率。 $n$ 重卷积难做？那就用拉普拉斯变换转为频域上的乘法运算吧</script><p>\mathcal{L}{F_{S_n}(t)} = \mathcal{L}{f_T(t)}^n</p><script type="math/tex; mode=display"># 连续时间马尔科夫链## 定义设可数状态空间的连续时间随机过程 $X(t)$, 对所有$k\in \mathbb{N}$, $s, s_1, \ldots, s_k, s$ 且 $s \ge s_k \ge \ldots \ge s_1 \ge 0$ , 有</script><p>P(X(t+s) = j | X(t) = i, X(t+s_1) = i_1, \ldots, X(t+s_k) = i_k) = P(X(t+s) = j | X(t) = i)</p><script type="math/tex; mode=display">则称 $X(t)$ 为连续时间马尔科夫链。我们所讨论的马尔科夫链都为齐次的，满足</script><p>P(X(t+s) = j | X(s) = i) = P(X(t) = j | X(0) = i)</p><script type="math/tex; mode=display">### 与离散时间马尔科夫链的区别#### 区别1. 离马的状态转移发生在离散的时间点上，而连马的状态转移可以发生在任意时刻。2. 离马的转移概率矩阵是一个固定的矩阵，而连马的转移概率矩阵是一个函数，依赖于时间。## 状态转移概率状态转移概率矩阵 $P(t)$ 定义为：</script><p>P_{ij}(t) = P(X(t) = j | X(0) = i)</p><script type="math/tex; mode=display">矩阵形式为：</script><p>P(t) = \begin{pmatrix}<br>P<em>{00}(t) &amp; P</em>{01}(t) &amp; P<em>{02}(t) &amp; \cdots \<br>P</em>{10}(t) &amp; P<em>{11}(t) &amp; P</em>{12}(t) &amp; \cdots \<br>P<em>{20}(t) &amp; P</em>{21}(t) &amp; P_{22}(t) &amp; \cdots \<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots<br>\end{pmatrix}</p><script type="math/tex; mode=display">一定满足行和为一：</script><p>\sum<em>{j} P</em>{ij}(t) = 1, \quad \forall i</p><script type="math/tex; mode=display">和离散的一样，也满足C-K方程：</script><p>P(t+s) = P(t)P(s)</p><script type="math/tex; mode=display">## Q矩阵### 标准连续时间马尔科夫链标准连续时间马尔科夫链的转移概率矩阵 $P(t)$ 满足$$\lim_{t \to 0} P(t) = I</script><p>其中 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.14ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 504 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g></g></g></svg></mjx-container> 是单位矩阵。</p><p>这意味着当时间趋近于零时，转移概率矩阵趋近于单位矩阵，即在极短的时间内，状态不会发生变化。</p><h3 id="Q矩阵"><a href="#Q矩阵" class="headerlink" title="Q矩阵"></a>Q矩阵</h3><p>如果满足标准条件，那么可以定义极限</p><script type="math/tex; mode=display">Q = \lim_{t \to 0} \frac{P(t) - I}{t}</script><p>其中 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.79ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 791 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g></g></g></svg></mjx-container> 称为<strong>转移率矩阵</strong>或<strong>速率矩阵</strong>。<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.79ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 791 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g></g></g></svg></mjx-container> 的元素 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="2.408ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 1064.3 736.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container> 表示从状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 到状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="0.932ex" height="1.957ex" role="img" focusable="false" viewBox="0 -661 412 865"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></svg></mjx-container> 的瞬时转移率，即在极短时间内从状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 转移到状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="0.932ex" height="1.957ex" role="img" focusable="false" viewBox="0 -661 412 865"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></svg></mjx-container> 的速率。</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>后面我们经常会计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="2.408ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 1064.3 736.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container>。需要注意：</p><ol><li>如果 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="4.73ex" height="1.957ex" role="img" focusable="false" viewBox="0 -661 2090.6 865"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1678.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></svg></mjx-container>，则 $q<em>{ii} = \lim</em>{t \to 0} \frac{P_{ii}(t) - 1}{t}$</li><li>如果 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="4.73ex" height="2.106ex" role="img" focusable="false" viewBox="0 -716 2090.6 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mi" transform="translate(1678.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></svg></mjx-container>，则 $q<em>{ij} = \lim</em>{t \to 0} \frac{P_{ij}(t)}{t}$</li></ol><h4 id="保守性"><a href="#保守性" class="headerlink" title="保守性"></a>保守性</h4><p>对于标准有限状态连续时间马尔科夫链，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.79ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 791 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g></g></g></svg></mjx-container> 矩阵的每一行的和为零，即</p><script type="math/tex; mode=display">\sum_{j} q_{ij} = 0, \quad \forall i</script><p>这表示在任意时刻，系统必须处于某个状态。</p><h3 id="停留时间定理"><a href="#停留时间定理" class="headerlink" title="停留时间定理"></a>停留时间定理</h3><p>设连续时间马尔科夫链满足标准性和保守性条件，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="26.484ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 11705.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g><g data-mml-node="mo" transform="translate(794.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1850.6,0)"><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(834,0)"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3223.2,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(638.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1694.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2472.3,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(3028.1,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(3880.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4269.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(4630.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5296.9,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mi" transform="translate(6352.7,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(7204.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(7593.7,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(8093.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></svg></mjx-container> 表示从状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.819ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2130 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(852,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1241,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(1741,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 开始到达其他状态的时间。则有</p><ol><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.029ex;" xmlns="http://www.w3.org/2000/svg" width="1.17ex" height="1.005ex" role="img" focusable="false" viewBox="0 -431 517 444"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g></g></g></svg></mjx-container> 的分布是参数为 $q<em>{ii}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="14.581ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 6444.7 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">指</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">分</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">布</text></g><g data-mml-node="mo" transform="translate(5000,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5444.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">即</text></g></g></g></svg></mjx-container>P(\tau &gt; t) = e^{-q</em>{ii} t}$。</li><li>条件分布 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.512ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9508.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1992,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2381,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g><g data-mml-node="mo" transform="translate(2898,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3564.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4620.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(5032.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(5310.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(6162.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(6551.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(7051.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7718.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(8774.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9119.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>  = $\frac{q<em>{ij}}{q</em>{ii}}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="11.312ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 5000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">即</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">状</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">态</text></g></g></g></svg></mjx-container>i<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="29.412ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 13000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">停</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">留</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">结</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">束</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">后</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">转</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">移</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">到</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">状</text></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">态</text></g></g></g></svg></mjx-container>j$ 的概率与速率矩阵的元素有关。</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.029ex;" xmlns="http://www.w3.org/2000/svg" width="1.17ex" height="1.005ex" role="img" focusable="false" viewBox="0 -431 517 444"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g></g></g></svg></mjx-container> 与 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.505ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1991 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(852,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1241,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1602,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 在给定 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.819ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2130 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(852,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1241,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(1741,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 的条件下是独立的。</li></ol><h2 id="嵌入链"><a href="#嵌入链" class="headerlink" title="嵌入链"></a>嵌入链</h2><p>从连马中只抽出<strong>跳转了</strong>和<strong>跳去哪了</strong>的信息，形成一个离散时间马尔科夫链，称为嵌入链<br>它的转移概率为</p><script type="math/tex; mode=display">p_{ij} = \begin{cases}\frac{q_{ij}}{-q_{ii}}, & i \neq j \\0, & i = j\end{cases}</script><h2 id="Kolmogorov方程"><a href="#Kolmogorov方程" class="headerlink" title="Kolmogorov方程"></a>Kolmogorov方程</h2><p>Kolmogorov方程描述了连续时间马尔科夫链的状态转移概率矩阵 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.276ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1890 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1501,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 的演化。它有两种形式：前向和后向。</p><h3 id="前向Kolmogorov方程"><a href="#前向Kolmogorov方程" class="headerlink" title="前向Kolmogorov方程"></a>前向Kolmogorov方程</h3><script type="math/tex; mode=display">\frac{dP(t)}{dt} = P(t)Q</script><h3 id="后向Kolmogorov方程"><a href="#后向Kolmogorov方程" class="headerlink" title="后向Kolmogorov方程"></a>后向Kolmogorov方程</h3><script type="math/tex; mode=display">\frac{dP(t)}{dt} = QP(t)</script><h3 id="转移概率的收敛级数形式"><a href="#转移概率的收敛级数形式" class="headerlink" title="转移概率的收敛级数形式"></a>转移概率的收敛级数形式</h3><p>如果 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.79ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 791 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g></g></g></svg></mjx-container> 是一个有限矩阵，则可以将转移概率矩阵 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.276ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1890 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1501,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 表示为</p><script type="math/tex; mode=display">P(t) = I + tQ + \frac{t^2}{2!}Q^2 + \frac{t^3}{3!}Q^3 + \cdots</script><p>这个级数形式可以用于计算转移概率矩阵，尤其在 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container> 较小的情况下。</p><h2 id="极限行为"><a href="#极限行为" class="headerlink" title="极限行为"></a>极限行为</h2><h3 id="平稳分布"><a href="#平稳分布" class="headerlink" title="平稳分布"></a>平稳分布</h3><p>平稳分布是指当时间趋近于无穷大时，马尔科夫链的状态分布趋于一个固定的分布。设 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.29ex" height="1ex" role="img" focusable="false" viewBox="0 -431 570 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g></g></svg></mjx-container> 是平稳分布，则满足</p><script type="math/tex; mode=display">\pi = \pi P(t)</script><p>这表示在平稳分布下，状态的分布不随时间变化。</p><p>同样也可以用速率矩阵 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.79ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 791 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g></g></g></svg></mjx-container> 来描述平稳分布：</p><script type="math/tex; mode=display">\pi Q = 0</script><p>这表示在平稳分布下，状态的转移率矩阵 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.79ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 791 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g></g></g></svg></mjx-container> 的每一行和为零。</p><h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><p>对于不可约的连续时间马尔科夫链</p><p>如果<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="7.228ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 3194.6 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mi" transform="translate(570,0)"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(1638.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2694.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>有解，则存在唯一的平稳分布 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.29ex" height="1ex" role="img" focusable="false" viewBox="0 -431 570 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g></g></svg></mjx-container>，且满足</p><script type="math/tex; mode=display">\lim_{t \to \infty} P_{ij}(t) = \pi_j</script><p>如果无解，则不存在平稳分布。</p><script type="math/tex; mode=display">\lim_{t \to \infty} P_{ij}(t) = 0</script><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="纯生过程"><a href="#纯生过程" class="headerlink" title="纯生过程"></a>纯生过程</h3><p>纯生过程是一种特殊的连续时间马尔科夫链，其中状态空间为非负整数，且状态只能增加或保持不变。其在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.782ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2555.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(639,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1083.7,0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(1916.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(2277.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>内的转移概率为</p><script type="math/tex; mode=display">P_{ij}(\Delta t) = \begin{cases}\lambda_i \Delta t + o(\Delta t), & j = i+1 \\o(\Delta t), & j = i \\0, & \text{otherwise}\end{cases}</script><p>根据定义可以算出<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.79ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 791 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g></g></g></svg></mjx-container>矩阵为</p><script type="math/tex; mode=display">Q_{ij} = \begin{cases}\lambda_i, & j = i+1 \\-\lambda_i, & j = i \\0, & \text{otherwise}\end{cases}</script><script type="math/tex; mode=display">Q = \begin{pmatrix}-\lambda_0 & \lambda_0 & 0 & 0 & \cdots\\0 & -\lambda_1 & \lambda_1 & 0 & \cdots\\0 & 0 & -\lambda_2 & \lambda_2 & \cdots\\\vdots & \vdots & \vdots & \ddots & \ddots  \end{pmatrix}</script><p>可验证</p><script type="math/tex; mode=display">\pi Q = 0</script><p>只有平凡解，即 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.438ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2403.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mo" transform="translate(847.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1903.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>。<br>因此纯生过程没有平稳分布。</p><h3 id="生灭过程"><a href="#生灭过程" class="headerlink" title="生灭过程"></a>生灭过程</h3><p>生灭过程是一种连续时间马尔科夫链，其状态空间为非负整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="9.063ex" height="1.946ex" role="img" focusable="false" viewBox="0 -666 4006 860"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(944.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1444.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1889.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2389.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2834,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g></g></g></svg></mjx-container>，且从状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 只能转移到相邻状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.677ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2067.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>（死亡）或 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.677ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2067.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>（出生）。</p><p>设生灭过程的出生率为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.059ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 910 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>（从状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 到状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.677ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2067.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> 的速率），死亡率为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="2.104ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 930 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g><g data-mml-node="mi" transform="translate(636,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>（从状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 到状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.677ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2067.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> 的速率）。</p><p>其在 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.365ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4139.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(639,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1083.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1666.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2667.1,0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(3500.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(3861.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container> 内的转移概率为：</p><script type="math/tex; mode=display">P_{ij}(\Delta t) = \begin{cases}\lambda_i \Delta t + o(\Delta t), & j = i+1 \\\mu_i \Delta t + o(\Delta t), & j = i-1 \\1 - (\lambda_i + \mu_i) \Delta t + o(\Delta t), & j = i \\o(\Delta t), & \text{otherwise}\end{cases}</script><p>其中 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="6.5ex" height="1.995ex" role="img" focusable="false" viewBox="0 -666 2873.1 882"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g><g data-mml-node="mn" transform="translate(636,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1317.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2373.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>（状态 0 不能再减少）。</p><p>根据定义，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.79ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 791 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g></g></g></svg></mjx-container> 矩阵为：</p><script type="math/tex; mode=display">Q_{ij} = \begin{cases}\lambda_i, & j = i+1 \\\mu_i, & j = i-1 \\-(\lambda_i + \mu_i), & j = i \\0, & \text{otherwise}\end{cases}</script><p>矩阵形式为：</p><script type="math/tex; mode=display">Q = \begin{pmatrix}-\lambda_0 & \lambda_0 & 0 & 0 & \cdots \\\mu_1 & -(\lambda_1 + \mu_1) & \lambda_1 & 0 & \cdots \\0 & \mu_2 & -(\lambda_2 + \mu_2) & \lambda_2 & \cdots \\\vdots & \vdots & \vdots & \ddots & \ddots\end{pmatrix}</script><h4 id="平稳分布-1"><a href="#平稳分布-1" class="headerlink" title="平稳分布"></a>平稳分布</h4><p>设平稳分布为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.568ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8207.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mo" transform="translate(847.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1903.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2292.6,0)"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mn" transform="translate(603,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(3299.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3743.8,0)"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mn" transform="translate(603,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(4750.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5195,0)"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mn" transform="translate(603,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(6201.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(6646.2,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(7818.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，则需满足 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="7.228ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 3194.6 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mi" transform="translate(570,0)"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(1638.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2694.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>，即：</p><p>对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.929ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2178.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1678.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="17.887ex" height="2.059ex" role="img" focusable="false" viewBox="0 -694 7906.2 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(778,0)"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mn" transform="translate(616,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="msub" transform="translate(1797.6,0)"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mn" transform="translate(603,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(3026.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(4026.6,0)"><g data-mml-node="mi"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g><g data-mml-node="mn" transform="translate(636,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msub" transform="translate(5066.1,0)"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mn" transform="translate(603,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(6350.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(7406.2,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></p><p>对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="4.929ex" height="1.819ex" role="img" focusable="false" viewBox="0 -666 2178.6 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1678.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>：$\lambda<em>{i-1} \pi</em>{i-1} - (\lambda<em>i + \mu_i) \pi_i + \mu</em>{i+1} \pi_{i+1} = 0$</p><p>这可以简化为<strong>细致平衡条件</strong>：</p><script type="math/tex; mode=display">\lambda_i \pi_i = \mu_{i+1} \pi_{i+1}, \quad i \geq 0</script><p>递推可得：</p><script type="math/tex; mode=display">\pi_n = \pi_0 \prod_{k=0}^{n-1} \frac{\lambda_k}{\mu_{k+1}}, \quad n \geq 1</script><p>由归一化条件 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex;" xmlns="http://www.w3.org/2000/svg" width="12.544ex" height="2.563ex" role="img" focusable="false" viewBox="0 -789.6 5544.4 1132.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="msub" transform="translate(2633.6,0)"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mi" transform="translate(603,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3988.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5044.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，得到：</p><script type="math/tex; mode=display">\pi_0 = \frac{1}{1 + \sum_{n=1}^{\infty} \prod_{k=0}^{n-1} \frac{\lambda_k}{\mu_{k+1}}}</script><p>当且仅当级数 $\sum<em>{n=1}^{\infty} \prod</em>{k=0}^{n-1} \frac{\lambda<em>k}{\mu</em>{k+1}}$ 收敛时，存在平稳分布。</p><h1 id="高斯过程"><a href="#高斯过程" class="headerlink" title="高斯过程"></a>高斯过程</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>设随机过程<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.505ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1991 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(852,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1241,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1602,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，如果<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.253ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10719.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="2200" d="M0 673Q0 684 7 689T20 694Q32 694 38 680T82 567L126 451H430L473 566Q483 593 494 622T512 668T519 685Q524 694 538 694Q556 692 556 674Q556 670 426 329T293 -15Q288 -22 278 -22T263 -15Q260 -11 131 328T0 673ZM414 410Q414 411 278 411T142 410L278 55L414 410Z"></path></g><g data-mml-node="mi" transform="translate(556,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1156,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1600.7,0)"><path data-c="2200" d="M0 673Q0 684 7 689T20 694Q32 694 38 680T82 567L126 451H430L473 566Q483 593 494 622T512 668T519 685Q524 694 538 694Q556 692 556 674Q556 670 426 329T293 -15Q288 -22 278 -22T263 -15Q260 -11 131 328T0 673ZM414 410Q414 411 278 411T142 410L278 55L414 410Z"></path></g><g data-mml-node="msub" transform="translate(2156.7,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(2954.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3398.9,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4196.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(4641.1,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(5979.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(6424.4,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7570.5,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(8515.3,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(8793.3,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(9293.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9737.9,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(10441.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>，都有</p><script type="math/tex; mode=display">(X(t_1), X(t_2), \ldots, X(t_n))</script><p>服从<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>元高斯分布，则称<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.505ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1991 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(852,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1241,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1602,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>为<strong>高斯过程</strong>。</p><h3 id="单元高斯分布"><a href="#单元高斯分布" class="headerlink" title="单元高斯分布"></a>单元高斯分布</h3><p>设随机变量 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 服从单元高斯分布，记作</p><script type="math/tex; mode=display">X \sim \mathcal{N}(\mu, \sigma)</script><p>其中 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.364ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 603 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g></g></g></svg></mjx-container> 是均值，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.292ex" height="1ex" role="img" focusable="false" viewBox="0 -431 571 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g></g></g></svg></mjx-container> 是标准差。则其概率密度函数为：</p><script type="math/tex; mode=display">f_X(x) = \frac{1}{\sqrt{2\pi}\sigma} \exp\left(-\frac{(x - \mu)^2}{2\sigma^2}\right)</script><h3 id="多元高斯分布"><a href="#多元高斯分布" class="headerlink" title="多元高斯分布"></a>多元高斯分布</h3><p>设随机变量<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.495ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9500.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2185.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2574.6,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3839.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4283.8,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5548.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5993,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(7331.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(7776.3,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(9111.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>服从多元高斯分布，记作</p><script type="math/tex; mode=display">X \sim \mathcal{N}(\mu, \Sigma)</script><p>其中 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.364ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 603 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g></g></g></svg></mjx-container> 是均值向量，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.633ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 722 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="3A3" d="M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z"></path></g></g></g></svg></mjx-container> 是协方差矩阵。则其概率密度函数为：</p><script type="math/tex; mode=display">f_X(x) = \frac{1}{(2\pi)^{n/2}|\Sigma|^{1/2}} \exp\left(-\frac{1}{2}(x - \mu)^T \Sigma^{-1} (x - \mu)\right)</script><h4 id="特征函数-1"><a href="#特征函数-1" class="headerlink" title="特征函数"></a>特征函数</h4><p>多元高斯过程的特征函数为：</p><script type="math/tex; mode=display">\phi_X(\omega) = \exp\left(j \omega^T \mu - \frac{1}{2} \omega^T \Sigma \omega\right)</script><p>当结论记下来就好</p><h4 id="性质-3"><a href="#性质-3" class="headerlink" title="性质"></a>性质</h4><h5 id="线性性"><a href="#线性性" class="headerlink" title="线性性"></a>线性性</h5><p>设 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.924ex" height="2.351ex" role="img" focusable="false" viewBox="0 -789 5712.2 1039"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8,0)"><path data-c="223C" d="M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2185.6,0)"><g data-mml-node="mi"><path data-c="4E" d="M343 705Q358 705 358 698Q360 696 370 658T411 524T484 319Q536 174 590 82L595 73L615 152Q646 274 683 407Q729 571 752 637T799 727Q852 780 937 788Q939 788 947 788T958 789H962Q979 789 979 765Q979 722 951 692Q942 683 924 683Q888 681 859 672T818 654T803 639Q784 608 708 322T631 15Q631 14 630 15Q630 17 629 15Q628 14 628 12Q621 -4 601 -17T560 -31Q550 -31 546 -28T530 -7Q484 67 458 123T398 272Q352 392 314 514L306 535V534Q306 533 296 488T272 379T234 239T185 100T127 -7T61 -50Q34 -50 4 -34T-27 8Q-27 33 -12 61T18 90Q21 90 36 77T87 57H92Q109 57 123 78T162 173Q206 299 232 417T265 599T276 667Q284 681 304 693T343 705Z"></path></g></g><g data-mml-node="mo" transform="translate(3164.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3553.6,0)"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g><g data-mml-node="mo" transform="translate(4156.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4601.2,0)"><path data-c="3A3" d="M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z"></path></g><g data-mml-node="mo" transform="translate(5323.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></svg></mjx-container> 是常数矩阵，则 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="28.498ex" height="2.47ex" role="img" focusable="false" viewBox="0 -841.7 12595.9 1091.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1824.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2824.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(3531.2,0)"><path data-c="223C" d="M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4587,0)"><g data-mml-node="mi"><path data-c="4E" d="M343 705Q358 705 358 698Q360 696 370 658T411 524T484 319Q536 174 590 82L595 73L615 152Q646 274 683 407Q729 571 752 637T799 727Q852 780 937 788Q939 788 947 788T958 789H962Q979 789 979 765Q979 722 951 692Q942 683 924 683Q888 681 859 672T818 654T803 639Q784 608 708 322T631 15Q631 14 630 15Q630 17 629 15Q628 14 628 12Q621 -4 601 -17T560 -31Q550 -31 546 -28T530 -7Q484 67 458 123T398 272Q352 392 314 514L306 535V534Q306 533 296 488T272 379T234 239T185 100T127 -7T61 -50Q34 -50 4 -34T-27 8Q-27 33 -12 61T18 90Q21 90 36 77T87 57H92Q109 57 123 78T162 173Q206 299 232 417T265 599T276 667Q284 681 304 693T343 705Z"></path></g></g><g data-mml-node="mo" transform="translate(5566,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5955,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(6705,0)"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g><g data-mml-node="mo" transform="translate(7530.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(8530.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(8959.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9404.1,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(10154.1,0)"><path data-c="3A3" d="M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z"></path></g><g data-mml-node="msup" transform="translate(10876.1,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(783,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(12206.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。</p><p>这意味着对一个多元高斯分布它的<strong>线性组合</strong>以及它的任何一个<strong>子向量</strong>均服从高斯分布</p><h5 id="独立性"><a href="#独立性" class="headerlink" title="独立性"></a>独立性</h5><p>设 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.924ex" height="2.351ex" role="img" focusable="false" viewBox="0 -789 5712.2 1039"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8,0)"><path data-c="223C" d="M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2185.6,0)"><g data-mml-node="mi"><path data-c="4E" d="M343 705Q358 705 358 698Q360 696 370 658T411 524T484 319Q536 174 590 82L595 73L615 152Q646 274 683 407Q729 571 752 637T799 727Q852 780 937 788Q939 788 947 788T958 789H962Q979 789 979 765Q979 722 951 692Q942 683 924 683Q888 681 859 672T818 654T803 639Q784 608 708 322T631 15Q631 14 630 15Q630 17 629 15Q628 14 628 12Q621 -4 601 -17T560 -31Q550 -31 546 -28T530 -7Q484 67 458 123T398 272Q352 392 314 514L306 535V534Q306 533 296 488T272 379T234 239T185 100T127 -7T61 -50Q34 -50 4 -34T-27 8Q-27 33 -12 61T18 90Q21 90 36 77T87 57H92Q109 57 123 78T162 173Q206 299 232 417T265 599T276 667Q284 681 304 693T343 705Z"></path></g></g><g data-mml-node="mo" transform="translate(3164.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3553.6,0)"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g><g data-mml-node="mo" transform="translate(4156.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4601.2,0)"><path data-c="3A3" d="M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z"></path></g><g data-mml-node="mo" transform="translate(5323.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.494ex" height="2.351ex" role="img" focusable="false" viewBox="0 -789 5522.2 1039"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(1040.8,0)"><path data-c="223C" d="M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2096.6,0)"><g data-mml-node="mi"><path data-c="4E" d="M343 705Q358 705 358 698Q360 696 370 658T411 524T484 319Q536 174 590 82L595 73L615 152Q646 274 683 407Q729 571 752 637T799 727Q852 780 937 788Q939 788 947 788T958 789H962Q979 789 979 765Q979 722 951 692Q942 683 924 683Q888 681 859 672T818 654T803 639Q784 608 708 322T631 15Q631 14 630 15Q630 17 629 15Q628 14 628 12Q621 -4 601 -17T560 -31Q550 -31 546 -28T530 -7Q484 67 458 123T398 272Q352 392 314 514L306 535V534Q306 533 296 488T272 379T234 239T185 100T127 -7T61 -50Q34 -50 4 -34T-27 8Q-27 33 -12 61T18 90Q21 90 36 77T87 57H92Q109 57 123 78T162 173Q206 299 232 417T265 599T276 667Q284 681 304 693T343 705Z"></path></g></g><g data-mml-node="mo" transform="translate(3075.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3464.6,0)"><path data-c="1D708" d="M74 431Q75 431 146 436T219 442Q231 442 231 434Q231 428 185 241L137 51H140L150 55Q161 59 177 67T214 86T261 119T312 165Q410 264 445 394Q458 442 496 442Q509 442 519 434T530 411Q530 390 516 352T469 262T388 162T267 70T106 5Q81 -2 71 -2Q66 -2 59 -1T51 1Q45 5 45 11Q45 13 88 188L132 364Q133 377 125 380T86 385H65Q59 391 59 393T61 412Q65 431 74 431Z"></path></g><g data-mml-node="mo" transform="translate(3994.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4439.2,0)"><path data-c="39B" d="M320 708Q326 716 340 716H348H355Q367 716 372 708Q374 706 423 547T523 226T575 62Q581 52 591 50T634 46H661V0H653Q644 3 532 3Q411 3 390 0H379V46H392Q464 46 464 65Q463 70 390 305T316 539L246 316Q177 95 177 84Q177 72 198 59T248 46H253V0H245Q230 3 130 3Q47 3 38 0H32V46H45Q112 51 127 91Q128 92 224 399T320 708Z"></path></g><g data-mml-node="mo" transform="translate(5133.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>有</p><script type="math/tex; mode=display">\Sigma_{11} = \text{Cov}(X_1, X_1) = E((X_1-\mu_1)(X_1-\mu_1)^T)</script><script type="math/tex; mode=display">\Sigma_{22} = \text{Cov}(X_2, X_2) = E((X_2-\mu_2)(X_2-\mu_2)^T)</script><script type="math/tex; mode=display">\Sigma_{12} = \text{Cov}(X_1, X_2) = E((X_1-\mu_1)(X_2-\mu_2)^T) = \Sigma_{21}^T</script><p>如果 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="7.569ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 3345.7 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="3A3" d="M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z"></path></g><g data-mml-node="TeXAtom" transform="translate(755,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(1789.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2845.7,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>，则 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.861ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 1264.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.861ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 1264.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container> 独立。</p><h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h6><p>设 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.747ex" height="2.47ex" role="img" focusable="false" viewBox="0 -841.7 6518.1 1091.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2185.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2574.6,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3839.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4283.8,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="msup" transform="translate(5548.3,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></g></svg></mjx-container>，求一个常系数矩阵 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></svg></mjx-container> 使得 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.368ex" height="1.805ex" role="img" focusable="false" viewBox="0 -716 3698.6 798"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(1040.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2096.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(2846.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 的各组分.</p><p><strong>解</strong><br>设</p><script type="math/tex; mode=display">A = \begin{pmatrix}I & A' \\0 & I\end{pmatrix}</script><p>其中 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.14ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 504 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g></g></g></svg></mjx-container> 是单位矩阵，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.325ex" height="1.717ex" role="img" focusable="false" viewBox="0 -759 1027.5 759"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(783,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g></g></svg></mjx-container> 是任意矩阵。<br>则</p><script type="math/tex; mode=display">Y = AX = \begin{pmatrix}X_1 + A'X_2 \\X_2\end{pmatrix}</script><p>要使得<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.726ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 763 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container> 的各组分独立，则需要满足</p><script type="math/tex; mode=display">\text{Cov}(X_1 + A'X_2, X_2) = Cov(X_1, X_2) + A' \text{Cov}(X_2, X_2) = 0</script><p>这意味着</p><script type="math/tex; mode=display">A' \Sigma_{22} + \Sigma_{12} = 0</script><p>因此</p><script type="math/tex; mode=display">A' = -\Sigma_{12} \Sigma_{22}^{-1}</script><h2 id="布朗运动"><a href="#布朗运动" class="headerlink" title="布朗运动"></a>布朗运动</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>标准布朗运动（Brownian motion）是一个特殊的高斯过程，满足以下条件</p><ol><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.757ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3870.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(759,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1148,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(1648,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2314.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3370.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>，即初始位置为零。</li><li>平稳增量，即 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="22.736ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10049.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(759,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1148,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1509,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2120.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3120.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(3879.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4268.4,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(4737.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5404.2,0)"><path data-c="223C" d="M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"></path></g><g data-mml-node="mi" transform="translate(6460,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(7219,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7608,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(8191.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(9191.4,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(9660.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li><li>对任意<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.294ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1898 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(759,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1148,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1509,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 服从正态分布</li></ol><h3 id="性质-4"><a href="#性质-4" class="headerlink" title="性质"></a>性质</h3><ol><li>期望<script type="math/tex; mode=display">E[B(t)] = 0</script></li><li>方差<script type="math/tex; mode=display">\text{Var}(B(t)) = t</script></li><li>协方差<script type="math/tex; mode=display">\text{Cov}(B(t), B(s)) = \min(t, s)</script></li></ol><p>这里尤其需要注意协方差的计算，有一个常用的技巧</p><script type="math/tex; mode=display">\text{Cov}(B(t), B(s)) = E[B(t)B(s)] - E[B(t)]E[B(s)] = E[B(t)B(s)]</script><p>因为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.971ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9711.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(764,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1042,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(1801,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2190,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(2551,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2940,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(3495.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4551.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(5315.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(5593.6,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(6352.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6741.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(7210.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7599.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(8155.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(9211.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>。</p><p>然后我们可以利用技巧得到</p><script type="math/tex; mode=display">E[B(t)B(s)] = E(B(t)[B(s)-B(t)+B(t)]) = E[B(t)[B(s)-B(t)]] + E[B(t)^2]</script><p>这就让我们可以用独立增量的性质来计算协方差。</p><script type="math/tex; mode=display">\text{Cov} = E(B(t))E(B(s-t)) + E(B(t)^2) = 0 + t = t</script><ol><li>布朗运动几乎处处连续，但是几乎处处不可微。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Learnings</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++</title>
    <link href="/2025/08/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/"/>
    <url>/2025/08/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/</url>
    
    <content type="html"><![CDATA[<h1 id="C-理论题总结"><a href="#C-理论题总结" class="headerlink" title="C++理论题总结"></a>C++理论题总结</h1><p>By lhr 2024/7/7</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[toc]</p><h1 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h1><h2 id="PPT"><a href="#PPT" class="headerlink" title="PPT"></a>PPT</h2><ul><li>namespace<ul><li>所有全局变量共享一个命名空间——默认namespace</li></ul></li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul><li>Question 4 - 单选题</li></ul><p>当x = 24, y = 4 时，语句cout&lt;&lt;( x &gt; 23 &amp;&amp; x - y &lt;=20) &lt;&lt; endl; 的执行结果为：</p><p>A.true</p><p>B.1</p><p>C.0</p><p>D.false</p><hr><p>Standard Answer: B</p><p>只能记住，C++条件运算输出的是1/0</p><ul><li>Question 5 - 单选题</li></ul><p>在Linux系统下，选择与下述代码输出相同的选项：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cout</span> &lt;&lt; <span class="hljs-string">&quot;The answer is:&quot;</span> &lt;&lt; ends &lt;&lt; <span class="hljs-number">3</span>.<span class="hljs-number">14</span> * <span class="hljs-number">4</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>A.<code>double a = 3.14 * 4; printf(&quot;The answer is: %f&quot;, a);</code></p><p>B.<code>cout &lt;&lt; &quot;The answer is: &quot;; cout &lt;&lt; 3.14 * 4 &lt;&lt; endl;</code></p><p>C.<code>printf(&quot;The answer is:&quot;); putchar(&#39;\0&#39;); printf(&quot;%.2f\n&quot;, 3.14 * 4);</code></p><p>D.<code>printf(&quot;The answer is: %d\n&quot;, 3.14 * 4);</code></p><hr><p>Standard Answer: C</p><p>解释：</p><ul><li>==<code>std::ends</code> 的主要功能是向输出流中插入一个空字符（null character）==，即 ASCII 码为 0 的字符。</li><li>这个空字符通常用于标记 C 风格字符串的结束。在 C 和 C++ 中，字符串通常以空字符结尾。</li><li>不同于 <code>std::endl</code>，<code>std::ends</code> 不会刷新输出流的缓冲区。它只是简单地插入一个空字符。</li></ul><ul><li>Question 7 - 单选题</li></ul><p>下述语句的输出是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cout</span> &lt;&lt; <span class="hljs-number">1</span> + <span class="hljs-string">&quot;20.24&quot;</span> &lt;&lt; endl &lt;&lt; <span class="hljs-number">20</span>.<span class="hljs-number">24</span>;<br><br></code></pre></td></tr></table></figure><p>A.编译错误</p><p>B.21.24</p><p>20.24</p><p>C.120.24 20.24</p><p>D.0.24\n20.24</p><hr><p>Standard Answer: D</p><p>解释：一个整型加一个字符串，其实是地址+1，从0开始输出</p><p>Question 8 - 单选题</p><p>当输入为<code>x</code>时下面语句的输出是？</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int x<span class="hljs-comment">;</span><br>cin&gt;&gt;x<span class="hljs-comment">;</span><br>cout&lt;&lt;x<span class="hljs-comment">;</span><br><br></code></pre></td></tr></table></figure><p>A.0</p><p>B.x</p><p>C.编译错误</p><p>D.字符x的ASKII码</p><hr><p>Standard Answer: A</p><p>解释：</p><p>在C++中，如果你运行了上面的代码并尝试输入一个非整数值（如字母<code>x</code>），那么<code>cin &gt;&gt; x;</code>这一行将会失败，因为它期待的是一个整数。当输入流<code>cin</code>遇到它不能解析为整数的字符时，它会停止读取，并设置一个错误状态（failbit），并将x设置为0。</p><p>Question 12 - 单选题</p><p>下面代码在输入2以后，输出为？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> cout;<br>cin&gt;&gt;cout;<br>std::cout&lt;&lt;(cout&lt;&lt;cout);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>A.2</p><p>B.编译错误</p><p>C.4</p><p>D.8</p><hr><p>Standard Answer: D</p><p>解释：</p><p>注意命名空间之间的嵌套，全局cout覆盖了std的cout，&lt;&lt; 左操作数是整数，所以移位</p><p>Question 13 - 单选题</p><p>下面代码在输入2以后，输出为？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> cout;<br>cin&gt;&gt;cout;<br>cout&lt;&lt;cout;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>A.没有任何输出</p><p>B.编译错误</p><p>C.运行错误</p><p>D.2</p><hr><p>Standard Answer: A</p><p>Question 17 - 单选题</p><p>判断：引用就是某一变量（目标）的一个别名，对引用的操作与对变量直接操作完全一样。</p><p>A.正确</p><p>B.错误</p><hr><p>Standard Answer: A</p><h1 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h1><ul><li>Question 4 - 单选题当输入内容是“ Hello World! ”时（注意开头和结尾处各有一个空格），下列语句的输出结果是？</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string str1, str2;<br>cin &gt;&gt; str1 &gt;&gt; str2;<br>cout &lt;&lt; str1 &lt;&lt; str2;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>A.<code>HelloWorld!</code></p><p>B.<code>Hello</code>（开头处有一空格）</p><p>C.<code>Hello</code>（结尾处有一空格）</p><p>D.<code>Hello World</code></p><hr><p>Standard Answer: A</p><p>无论输入多少个空格如“                     hello        world        ”都会输出helloworld</p><ul><li><p>Question 5 - 单选题</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>  当输入内容是“ Hello World! ”时（注意开头和结尾处各有一个空格），下列语句的输出结果是？</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>string str;<br><span class="hljs-built_in">getline</span>(cin, str);<br>cout &lt;&lt; str;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>  A.<code>HelloWorld!</code></p><p>  B.<code>Hello World!</code>（注意结尾处有一空格）</p><p>  C.<code>Hello World!</code>（注意开头处有一空格）</p><p>  D.<code>Hello World!</code>（注意开头和结尾处各有一个空格）</p><hr><p>  Standard Answer: D</p></li><li><p>Question 6 - 单选题</p><h1 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h1><p>  下列选项的操作符中，不属于string对象的比较运算符的是？</p><p>  A.!=</p><p>  B.&lt;=</p><p>  C.=</p><p>  D.&lt;=&gt;</p><hr><p>  Standard Answer: C</p><p>  注意审题：比较运算符，C是赋值运算符</p><p>  在C++中，<code>&lt;=&gt;</code> 是一个称为“三向比较运算符”（也称为“spaceship operator”）的C++20引入的新特性。这个运算符用于返回一个整数，该整数表示两个操作数之间的相对顺序。</p><p>  具体来说，对于<code>a &lt;=&gt; b</code>：</p><ul><li>如果 <code>a</code> 小于 <code>b</code>，则返回负整数。</li><li>如果 <code>a</code> 等于 <code>b</code>，则返回零。</li><li><p>如果 <code>a</code> 大于 <code>b</code>，则返回正整数。</p><p>对于<code>std::string</code>，<code>&lt;=&gt;</code>运算符允许你以一种简洁且类型安全的方式比较两个字符串。</p><p>例如，如果你有两个<code>std::string</code>对象<code>str1</code>和<code>str2</code>，你可以这样使用<code>&lt;=&gt;</code>：</p></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++">```cpp<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string str1 = <span class="hljs-string">&quot;apple&quot;</span>;<br>    std::string str2 = <span class="hljs-string">&quot;banana&quot;</span>;<br><br>    <span class="hljs-keyword">auto</span> result = str1 &lt;=&gt; str2;<br><br>    <span class="hljs-keyword">if</span> (result &lt; <span class="hljs-number">0</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;str1 is less than str2\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result == <span class="hljs-number">0</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;str1 is equal to str2\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;str1 is greater than str2\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>```<br></code></pre></td></tr></table></figure><ul><li><p>Question 8 - 单选题</p><h1 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h1><p>  现有如下三个string对象：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">string s1 = <span class="hljs-string">&quot;Hello&quot;</span>, s2 = <span class="hljs-string">&quot;, &quot;</span>, s3 = <span class="hljs-string">&quot;C++!&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>  则下列哪个选项的语句中string对象的初始化会出错？</p><p>  A.<code>string s4 = s1 + &quot;, &quot; + s3;</code></p><p>  B.<code>string s5 = s1 + &quot;, &quot; + &quot;C++!&quot;;</code></p><p>  C.<code>string s6 = &quot;Hello&quot; + s2 + &quot;C++!&quot;;</code></p><p>  D.<code>string s7 = &quot;Hello&quot; + &quot;, &quot; + s3;</code></p><hr><p>  Standard Answer: D</p><p>  解释：没有定义两个字符串数组的加法，而前面三个选项都有一个字符串跟在运算符的两边，所以可以运算</p></li><li><p>Question 10 - 单选题</p><h1 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h1><p>  下列语句的执行结果是？</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string str = <span class="hljs-string">&quot;sysu-computer&quot;</span>;<br><span class="hljs-type">int</span> pos1 = str.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;u&#x27;</span>);<br><span class="hljs-type">int</span> pos2 = str.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-number">10</span>);<br><span class="hljs-type">int</span> pos3 = str.<span class="hljs-built_in">rfind</span>(<span class="hljs-string">&#x27;u&#x27;</span>);<br>cout &lt;&lt; pos1 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; pos2 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; pos3;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>  A.3 9 9</p><p>  B.3 -1 9</p><p>  C.3 -1 -4</p><p>  D.3 -1 3</p><hr><p>  Standard Answer: B</p><p>  解释：这个题容易错误的地方在于，无论从左边还是从右边——都是返回他的下标</p></li><li><p><code>for(auto &amp;c : str)</code>注意使用你用和不用引用的区别。如果不用引用的话是复制一个拷贝出来，不会改变原来的对象。如果是用引用的话，可以直接修改原来的对象。</p></li><li><p>Question 12 - 单选题</p><h1 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h1><p>  现有一个长度大于等于 4 的string对象<code>str</code>，需要判断<code>str</code>是否以“Sysu”开头（即，前 4 个字符所构成的子串内容是否为“Sysu”）。</p><p>  下列选项中的表达式，单独作为判断条件，无法实现上述功能的是？</p><p>  A.str.find(“Sysu”) == 0</p><p>  B.str &gt;= “Sysu”</p><p>  C.str.substr(0, 4) == “Sysu”</p><p>  D.str.compare(0, 4, “Sysu”) == 0</p><hr><p>  Standard Answer: B</p><p>  解释：想要得到答案非常容易。但是想强调的是C选项里面，它是左闭右开区间。</p></li><li><p>Question 14 - 单选题</p><h1 id="问题-5"><a href="#问题-5" class="headerlink" title="问题"></a>问题</h1><p>  下列两段程序的运行情况为：<br>  程序一：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> n)</span></span>&#123;<br>array &lt;<span class="hljs-type">bool</span>, n&gt; arr;<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">func1</span>(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>  程序二：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> n = <span class="hljs-number">2</span>;<br>array &lt;<span class="hljs-type">bool</span>, n&gt; arr;<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">func2</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>  A.程序一和程序二均可正常运行</p><p>  B.程序一和程序二均不可正常运行</p><p>  C.程序一可正常运行，程序二不可正常运行</p><p>  D.程序一不可正常运行，程序二可正常运行</p><hr><p>  Standard Answer: D</p><p>  解释：程序一不可以运行的原因是——他要到运行时传参的时候才可以确定尖括号里面的值。但是程序二，它在编译的时候就可以确定尖括号里面的值是常量。</p></li><li><p>Question 18 - 单选题</p><h1 id="问题-6"><a href="#问题-6" class="headerlink" title="问题"></a>问题</h1><p>  关于下列语句，说法正确的是：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * arg;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * arg;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    array&lt;<span class="hljs-type">int</span>, func1(10)&gt; a;<br>    array&lt;<span class="hljs-type">int</span>, func2(10)&gt; b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>  A.a, b 均能完成初始化</p><p>  B.a 能完成初始化， b 不能完成初始化</p><p>  C.a 不能完成初始化， b 能完成初始化</p><p>  D.a, b 均不能完成初始化</p><hr><p>  Standard Answer: C</p><p>  解释：同理</p></li><li><p>在 C++11 标准中，建议按照以下方式将 const 和 constexpr 的功能区分开：</p><ul><li>凡是表达“只读”语义的场景都使用 const</li><li>凡是表达“常量”语义的场景都使用 constexpr</li></ul></li><li><p>Question 16 - 单选题</p><h1 id="问题-7"><a href="#问题-7" class="headerlink" title="问题"></a>问题</h1><p>下列语句的运行结果为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; const_b = a;<br>    cout &lt;&lt; const_b &lt;&lt; endl;<br>    a = <span class="hljs-number">2</span>;<br>    cout &lt;&lt; const_b &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>A.1<br>1</p><p>B.1<br>2</p><p>C.2<br>1</p><p>D.2<br>2</p><hr><p>Standard Answer: B</p><p>解释：他只是不能通过const_b来改变a</p><p>但是注意：<img src="C:/Users/19912/AppData/Roaming/Typora/typora-user-images/image-20240618232307666.png" alt="image-20240618232307666" style="zoom:50%;" />是绝对不可以反过来的</p><p>变式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">double</span> a = <span class="hljs-number">3.14</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp; b = a;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; c = a;<br>    <br>    cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl;<br>    <span class="hljs-comment">// output:3.14, 3.14, 3</span><br>    <br>    a *= <span class="hljs-number">2</span>;<br>    <br>    cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl;<br>    <span class="hljs-comment">// output:6.28, 6.28, 3</span><br>&#125;<br></code></pre></td></tr></table></figure><p>为什么c不会跟着变呢，因为<code>const int &amp; c</code>必须要指向一个<code>int</code>的变量，所以在第4行的时候，创建了一个临时变量，然后c指向这个临时变量</p></li></ul><ul><li><p>Question 17 - 单选题</p><h1 id="问题-8"><a href="#问题-8" class="headerlink" title="问题"></a>问题</h1><p>关于下列语句（1）和语句（2），说法正确的是：</p><p>（1）const int a = 3 + 6;<br>（2）constexpr int a = 3 + 6;</p><p>A.（1）和（2）均合法</p><p>B.（1）和（2）均不合法</p><p>C.（1）合法，（2）不合法</p><p>D.（1）不合法，（2）合法</p><hr><p>Standard Answer: A</p><p>在C++中，<code>const</code> 和 <code>constexpr</code> 都用于声明常量，但它们之间有一些关键的区别。</p><ol><li><strong>编译时和运行时</strong>：</li></ol></li></ul><pre><code class="hljs">    * 使用 `const` 声明的常量在运行时具有确定的值。这意味着这个值在编译时可能不知道，但在程序执行时它必须有一个确定的值。    * 使用 `constexpr` 声明的常量在编译时就有确定的值。编译器在编译阶段就会计算其值，并将其嵌入到生成的代码中。因此，`constexpr` 常量可以用于那些需要常量表达式的地方，比如数组的大小、模板参数等。2. **初始化**：    * `const` 常量可以使用任何在编译时或运行时能够确定的表达式进行初始化。    * `constexpr` 常量必须使用常量表达式进行初始化，这通常意味着它只能包含编译时常量、文字值以及只调用其他 `constexpr` 函数的函数调用。3. **函数和类构造函数**：    * 除了变量，你还可以将 `constexpr` 应用于函数或类的构造函数。这表示这些函数或构造函数在编译时就能计算出结果。    * `const` 不能这样使用。4. **内存位置**：    * `const` 和 `constexpr` 在内存中的位置没有固定的区别。它们都可能存储在只读数据段中，但这不是由 `const` 或 `constexpr` 关键字直接决定的，而是由它们的使用方式和上下文决定的。对于你给出的两个例子：（1）`const int a = 3 + 6;`这里，`a` 是一个常量，它的值在运行时是确定的（尽管在这种情况下，编译器可能在编译时就能计算出它的值）。（2）`constexpr int a = 3 + 6;`这里，`a` 是一个编译时常量。它的值在编译时就被确定为9，并且这个值会被嵌入到生成的代码中。由于它是一个编译时常量，它可以用于那些需要常量表达式的地方。注意：虽然在这个例子中，`const` 和 `constexpr` 的效果看起来是一样的，但在更复杂的场景中，它们之间的区别可能会更加明显。</code></pre><ul><li><p>Question 19 - 单选题</p><h1 id="问题-9"><a href="#问题-9" class="headerlink" title="问题"></a>问题</h1><p>  下列关于 auto 关键字的说法，错误的是：</p><p>  A.使用 auto 声明的变量必须初始化</p><p>  B.函数和模板参数不能被声明为 auto</p><p>  C.auto 不能用于类型转换或其他一些操作，如 sizeof 和 typeid 操作</p><p>  D.定义在一个 auto 序列的变量不必始终推导成同一类型</p><hr><p>  Standard Answer: D</p><p>  解释：auto的一些知识点，通过这个题来熟悉</p></li></ul><h1 id="第三周"><a href="#第三周" class="headerlink" title="第三周"></a>第三周</h1><ul><li><p>类内定义的函数一定是内联的</p></li><li><p>判断：sizeof(引用)是指所指向变量的大小；sizeof(指针)结果为对象地址的大小</p><p>  A.正确</p><p>  B.错误</p><hr><p>  Standard Answer: A</p><p>  解释：在C++中，<code>sizeof</code> 是一个操作符，用于获取对象或类型在内存中所占用的字节大小。但是，当 <code>sizeof</code> 应用于引用（reference）时，情况有些特殊。</p><p>  引用本身并不是一个对象，它只是一个别名，或者说是一个已存在对象的另一个名字。因此，你不能直接取一个引用的 <code>sizeof</code>，因为引用本身并不占用额外的内存空间（除了在编译时用于一些内部处理，但这与 <code>sizeof</code> 无关）。</p><p>  当你写 <code>sizeof(引用)</code> 时，你实际上是在获取该引用所指向的对象类型的大小。</p></li></ul><h1 id="第四周"><a href="#第四周" class="headerlink" title="第四周"></a>第四周</h1><h2 id="PPT-1"><a href="#PPT-1" class="headerlink" title="PPT"></a>PPT</h2><ul><li><p>默认参数只能在普通参数的右边</p></li><li><p>析构函数不能直接调用</p></li><li><p>友元函数没有this指针</p></li><li><p>static成员没有this指针</p></li><li><p>只有动态成员才有this指针</p></li><li><p>this指针是所有成员函数的隐含参数</p></li><li><p>static成员函数不接收this指针做参数</p></li><li><p>当成员参数与成员数据重名时，必须用this访问成员数据</p></li><li><p>在C++中，<code>static</code> 成员（无论是数据成员还是成员函数）都是<u>与类本身关联的</u>，<u>而不是与类的任何特定实例（对象）关联的</u>。因此，它们不需要通过类的实例（即对象）来访问，而是可以<u>直接通过类名来访问</u>。</p><p>  当你尝试在 <code>static</code> 成员函数中使用 <code>this</code> 指针时，编译器会报错，因为 <code>this</code> 指针是指向调用该函数的对象的指针，而 <code>static</code> 成员函数并不与任何特定对象关联。</p><p>  以下是一些关于 <code>static</code> 成员的基本点：</p><ol><li><strong>静态数据成员</strong>：</li></ol></li></ul><pre><code class="hljs">    * 静态数据成员在类的所有实例之间共享。    * 静态数据成员需要在类定义之外进行有且只有一次的初始化。注意格式为 Typename ClassName::VarName = 0;(不要再加static)    * 可以通过类名或对象名来访问静态数据成员，但推荐使用类名。ClassName::VarName = 1;    * 具有全局生存期，所有对象共享的储存空间2. **静态成员函数**：    * 静态成员函数只能访问静态数据成员、其他静态成员函数和全局变量。    * 静态成员函数没有 `this` 指针。    * 静态成员函数不能访问非静态数据成员或调用非静态成员函数（没有this指针做参数）（除非它们通过对象名或指针/引用显式传递）。示例：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> staticVar; <span class="hljs-comment">// 静态数据成员</span><br><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">staticFunc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// this-&gt;staticVar;  // 错误：静态成员函数不能使用this指针</span><br>        MyClass::staticVar = <span class="hljs-number">42</span>; <span class="hljs-comment">// 正确：使用类名访问静态数据成员</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">nonStaticFunc</span><span class="hljs-params">()</span> </span>&#123;<br>        MyClass::staticVar = <span class="hljs-number">10</span>; <span class="hljs-comment">// 正确：也可以在非静态成员函数中通过类名访问静态数据成员</span><br>        <span class="hljs-keyword">this</span>-&gt;nonStaticVar = <span class="hljs-number">20</span>; <span class="hljs-comment">// 正确：非静态成员函数可以使用this指针访问非静态数据成员</span><br>    &#125;<br><br>    <span class="hljs-type">int</span> nonStaticVar; <span class="hljs-comment">// 非静态数据成员</span><br>&#125;;<br><br><span class="hljs-type">int</span> MyClass::staticVar = <span class="hljs-number">0</span>; <span class="hljs-comment">// 静态数据成员的初始化（不能再加static，否则报错）</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    MyClass obj;<br>    MyClass::<span class="hljs-built_in">staticFunc</span>(); <span class="hljs-comment">// 调用静态成员函数</span><br>    std::cout &lt;&lt; MyClass::staticVar &lt;&lt; std::endl; <span class="hljs-comment">// 输出：42</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>在这个示例中，`staticVar` 是一个静态数据成员，而 `staticFunc` 是一个静态成员函数。`staticFunc` 使用类名 `MyClass` 来访问和修改 `staticVar`，而不是使用 `this` 指针。同样，你也可以通过对象名（如 `obj.staticVar`）来访问静态数据成员，但这通常不是推荐的做法，因为它可能会导致混淆。</code></pre><ul><li><p><code>mutable</code> 关键字用于修饰类的非静态成员变量，<u>表示即使该类的对象是 <code>const</code> 的，这个成员变量也可以被修改。</u>这在某些特定的场景下是有用的，比如当你需要在 <code>const</code> 成员函数内部修改某个成员变量的值，但又不希望改变对象本身的逻辑状态时。</p><p>  ==好好学这个，可以偷鸡！==</p><p>  以下是一个简单的C++示例，展示了 <code>mutable</code> 的用法：</p></li></ul><pre><code class="hljs"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> mutableValue;<br><br>    <span class="hljs-built_in">MyClass</span>(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> mv) : <span class="hljs-built_in">value</span>(v), <span class="hljs-built_in">mutableValue</span>(mv) &#123;&#125;<br><br>    <span class="hljs-comment">// 一个const成员函数，可以修改mutableValue但不能修改value</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printAndIncrementMutable</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Before increment: &quot;</span> &lt;&lt; mutableValue &lt;&lt; std::endl;<br>        mutableValue++; <span class="hljs-comment">// 这是允许的，因为mutableValue是可变的</span><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;After increment: &quot;</span> &lt;&lt; mutableValue &lt;&lt; std::endl;<br><br>        <span class="hljs-comment">// value++; // 这是不允许的，因为value不是mutable的，且我们在一个const成员函数中</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-type">const</span> MyClass <span class="hljs-title">obj</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)</span></span>;<br>    obj.<span class="hljs-built_in">printAndIncrementMutable</span>(); <span class="hljs-comment">// 输出: Before increment: 20, After increment: 21</span><br>    <span class="hljs-comment">// obj.value = 30; // 这是不允许的，因为obj是const的</span><br>    obj.mutableValue = <span class="hljs-number">1</span>; <span class="hljs-comment">// it&#x27;s ok！</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>在上面的示例中，尽管 `obj` 是一个 `const` 对象，我们仍然可以在 `printAndIncrementMutable` 函数中修改 `mutableValue` 的值，因为 `mutableValue` 被声明为 `mutable`。但是，尝试修改 `value` 的值会导致编译错误，因为 `value` 不是 `mutable` 的，且我们在一个 `const` 成员函数中。</code></pre><ul><li><p>Question 6 - 单选题</p><p>  关于构造函数和析构函数的区别，表述正确是</p><p>  A.它们具有不相同的函数名</p><p>  B.构造函数不会返回类型，而析构函数会</p><p>  C.构造函数允许传入函数参数，而析构函数不能</p><p>  D.构造函数不允许传入函数参数，而析构函数能</p><hr><p>  Standard Answer: C</p><p>  解释：A: 根据网上，是同名的</p></li><li><p>Question 7 - 单选题</p><p>  下列哪个选项是程序的输出：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>    <span class="hljs-built_in">Foo</span>() &#123;<br>        x = <span class="hljs-number">1</span>;<br>        y = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">Foo</span>(<span class="hljs-type">int</span> x_ = <span class="hljs-number">10</span>, <span class="hljs-type">int</span> y_ = <span class="hljs-number">10</span>) &#123;<br>        x = x_;<br>        y = y_;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">p</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-number">20</span>;  <span class="hljs-comment">// local variable</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;x is &quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;y is &quot;</span> &lt;&lt; y &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Foo foo;  <span class="hljs-comment">//&quot;message&quot;: &quot;类 \&quot;Foo\&quot; 包含多个默认构造函数&quot;,</span><br>    cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; endl; <span class="hljs-comment">// x was not declare in this scope</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>  A.1 1</p><p>  B.10 10</p><p>  C.编译错误</p><p>  D.无法预期的值</p><hr><p>  Standard Answer: C</p></li><li><p>Question 10 - 单选题</p><p>  下列c++代码的输出是什么</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-built_in">A</span>()&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Constructor called&quot;</span>;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span>&#123;<br>A a;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>  A.Constructor called</p><p>  B.程序没有输出</p><p>  C.编译错误</p><p>  D.Segmentation fault</p><hr><p>  Standard Answer: C</p><p>  解释：一定要小心，默认是private</p></li><li><p>Question 20 - 单选题</p><p>  下列c++代码的输出是什么</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">int</span> x;<br>  <span class="hljs-type">int</span> y;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Test</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>) &#123; <span class="hljs-keyword">this</span>-&gt;x = x; <span class="hljs-keyword">this</span>-&gt;y = y; &#125;<br>  <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Inside fun1()&quot;</span>; &#125;<br>  <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Inside fun2()&quot;</span>; <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">fun1</span>(); &#125;<br>&#125;;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  Test obj;<br>  obj.<span class="hljs-built_in">fun2</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>  A.Inside fun2() Inside fun1()</p><p>  B.Inside fun2()</p><p>  C.Inside fun1() Inside fun2()</p><p>  D.编译错误</p><hr><p>  Standard Answer: D</p><p>  解释：小心！！static成员函数没有this指针</p></li></ul><h1 id="第五周"><a href="#第五周" class="headerlink" title="第五周"></a>第五周</h1><ul><li><p>Question 2 - 单选题</p><p>  下列说法正确的是</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Circle.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">Circle</span>(<span class="hljs-number">5</span>).<span class="hljs-built_in">getArea</span>() &lt;&lt; endl;<br>cout &lt;&lt; (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Circle</span>(<span class="hljs-number">5</span>))-&gt;<span class="hljs-built_in">getArea</span>() &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>  A.Circle(5).getArea() 编译出错</p><p>  B.new Circle(5).getArea() 编译出错</p><p>  C.该程序能够编译通过，但不能运行</p><p>  D.该程序能够通过编译，也能够运行，但 new Circle(5) 在堆上创建了匿名对象，这将导致内存泄漏。</p><hr><p>  Standard Answer: D</p></li><li><p>Question 4 - 单选题</p><p>  删除空指针会发生什么？</p><p>  A.不会报错</p><p>  B.不会报错，但必须提前将空指针指定一个类型(例如<code>int * p = nullptr;</code> <code>delete p;</code>)</p><p>  C.编译错误</p><p>  D.运行时错误</p><hr><p>  Standard Answer: B</p></li><li><p>Question 7 - 单选题</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span>* t = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">5</span>);<br><span class="hljs-type">int</span>* p = t;<br><span class="hljs-keyword">delete</span> t;<br><span class="hljs-keyword">delete</span> p;<br>cout &lt;&lt; *p &lt;&lt; endl;<br><br></code></pre></td></tr></table></figure><p>  该段代码的输出是</p><p>  A.不确定的脏值</p><p>  B.0</p><p>  C.5</p><p>  D.出现运行时错误</p><hr><p>  Standard Answer: D</p><p>  解释：上一题是空指针nullptr，但是这里是有所指但是无法访达的指针，所以runtime error</p></li><li><p>Question 6 - 单选题</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> x;<br><span class="hljs-built_in">A</span>() :<span class="hljs-built_in">x</span>(<span class="hljs-number">0</span>) &#123; cout &lt;&lt; <span class="hljs-string">&quot;A::A() x=&quot;</span> &lt;&lt;x&lt;&lt;endl; &#125;<br>~<span class="hljs-built_in">A</span>() &#123; cout &lt;&lt; <span class="hljs-string">&quot;A::~A() x=&quot;</span> &lt;&lt; x &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>A* p = <span class="hljs-keyword">new</span> A[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br>p[i].x = i;<br>&#125;<br><span class="hljs-keyword">delete</span> []p;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>  运行结果为？</p><p>  A.<code>A::A() x=0</code></p><p>   <code>A::A() x=0</code></p><p>   <code>A::A() x=0</code> </p><p>   <code>A::~A() x=2</code> </p><p>   <code>A::~A() x=1</code> </p><p>   <code>A::~A() x=0</code></p><hr><p>  就考了一件事情：析构顺序与构造顺序相反</p></li><li><p>Question 20 - 单选题</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">A* arr[<span class="hljs-number">4</span>]=&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">A</span>(<span class="hljs-number">0</span>),<span class="hljs-literal">NULL</span>,<span class="hljs-keyword">new</span> <span class="hljs-built_in">A</span>(<span class="hljs-number">0</span>)&#125;;<br></code></pre></td></tr></table></figure><p>  该语句生成了几个A对象</p><p>  A.1</p><p>  B.2</p><p>  C.3</p><p>  D.4</p><hr><p>  Standard Answer: B</p><p>  解释：上一题直接new了3个，这里只new了两个</p></li><li><p>Question 8 - 单选题</p><p>  以下程序段的执行结果是</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-type">int</span> x;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">A</span>() :<span class="hljs-built_in">x</span>(<span class="hljs-number">0</span>) &#123; cout &lt;&lt; <span class="hljs-string">&quot;A::A()&quot;</span> &lt;&lt; endl; &#125;<br>~<span class="hljs-built_in">A</span>() &#123; cout &lt;&lt; <span class="hljs-string">&quot;A::~A()&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>A* p = <span class="hljs-keyword">new</span> A[<span class="hljs-number">10</span>];<br>p += <span class="hljs-number">1</span>;<br><span class="hljs-keyword">delete</span> []p;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>  A.编译不通过</p><p>  B.打印10个A::A(), 10个A::~A()</p><p>  C.打印10个A::A(), 9个A::~A()</p><p>  D.打印10个A::A()，运行异常终止</p><hr><p>  Standard Answer: D</p><p>  解释：因为 <code>p</code> 不再指向数组的起始地址，所以这里的行为是未定义的（Undefined Behavior, UB）。在大多数实现中，这会导致运行时异常终止，因为 <code>delete []</code> 操作符期望一个指向数组第一个元素的指针，以便正确地释放整个数组的内存并调用每个对象的析构函数。</p></li><li><p>Question 13 - 不定项选择题</p><p>  在下列有关类、抽象、封装和数据隐藏的说法中，正确的有？</p><p>  A.类表示可以通过类方法的公共接口对类对象执行的操作；这是抽象。</p><p>  B.类隐藏了实现的细节，例如数据表示和方法代码；这就是封装。</p><p>  C.类可以对数据成员使用私有可见性，这意味着只能通过成员函数访问数据；这是数据隐藏。</p><p>  D.使用类是C++中可以轻松实现面向对象功能抽象、数据隐藏和封装的方式。</p><hr><p>  Standard Answer: C, A, B, D</p></li></ul><h1 id="第六周"><a href="#第六周" class="headerlink" title="第六周"></a>第六周</h1><ul><li><p>Question 1 - 单选题</p><p>  <strong>静态联编(static binding)</strong>是指在运行阶段就能确定调用的动态对象的方法的技术。</p><p>  A.正确</p><p>  B.错误</p><hr><p>  Standard Answer: B</p><p>  解释：也称为早期联编或编译时联编，是在编译阶段就确定了方法调用与其实现的对应关系。这通常发生在非虚方法（非多态方法）的调用中。</p><p>  在静态联编中，编译器在编译时会根据调用方法的对象的类型来确定要调用的方法。由于这种确定是在编译时进行的，因此它不会受到运行时对象实际类型的影响。</p></li><li><p>注意区别</p><ul><li><p>```C++<br>  //已经重写拷贝构造函数<br>  Test t1;<br>  Test t2 = t1;// 调用拷贝构造函数<br>  t2 = t1;     // 只是调用=</p>  <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>- Question <span class="hljs-number">3</span> - 单选题<br><br>```<span class="hljs-function">cpp</span><br><span class="hljs-function">A <span class="hljs-title">func</span>()</span><br>&#123;<br><span class="hljs-function">A <span class="hljs-title">tmp</span>(<span class="hljs-params"><span class="hljs-number">1</span></span>)</span>;<br><span class="hljs-keyword">return</span> tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>A a = func(); <br>        <span class="hljs-function">A <span class="hljs-title">aa</span>(<span class="hljs-params">a</span>)</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br><br></code></pre></td></tr></table></figure><p>A是一个具有拷贝构造函数的类，如果<strong>考虑</strong>编译优化，该段程序调用了几次拷贝构造函数。</p><p>A.0</p><p>B.1</p><p>C.2</p><p>D.3</p></li></ul><hr><p>  Standard Answer: B</p><p>  解释：</p><ol><li><code>func()</code> 返回 <code>tmp</code> 时，编译器可能会应用命名返回值优化（NRVO），直接在返回值的位置构造 <code>tmp</code>，避免拷贝构造函数的调用。</li><li>在 <code>A a = func();</code> 这行代码中，如果应用了（NRVO），则不会调用拷贝构造函数。</li><li><p><code>A aa(a);</code> 这行代码会调用拷贝构造函数来初始化 <code>aa</code>。</p><p>因此，在考虑编译器优化的情况下，这段程序最少可能调用拷贝构造函数<strong>1次</strong>。这是因为编译器优化可以消除<code>func()</code>返回时的拷贝构造函数调用，但<code>A aa(a);</code>这行代码中的拷贝构造函数调用无法被优化掉。</p></li></ol></li><li><p>Question 4 - 单选题</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">A <span class="hljs-title">func1</span><span class="hljs-params">(A a)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><br><span class="hljs-function">A&amp; <span class="hljs-title">func2</span><span class="hljs-params">(A&amp; a)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">A <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>; <br><span class="hljs-built_in">func1</span>(a); <br>    <span class="hljs-built_in">func2</span>(a);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>  A是一个具有拷贝构造函数的类，如果<strong>不考虑</strong>编译优化，该段程序调用了几次拷贝构造函数，几次析构函数。</p><hr><p>  2， 3     0,   1</p><p>  解释：注意，不考虑编译优化，返回的时候会先拷贝到一个新的临时对象上</p></li><li><p>Question 8 - 单选题</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">double</span> a = <span class="hljs-number">3.14</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; b = a;<br>a = <span class="hljs-number">6.28</span>;<br>cout&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;b&lt;&lt;endl;<br><br></code></pre></td></tr></table></figure><p>  这段代码的输出是？</p><p>  A.6.28, 6</p><p>  B.6.28, 3</p><p>  C.6.28, 6.28</p><p>  D.6.28, 3.14</p><hr><p>  Standard Answer: B</p><p>  解释：由于<code>const int &amp; b</code>必须要指向一个<code>int</code>的变量，所以第二行的时候会生成一个整型临时变量来给b指，所以a改变的时候，b不变</p></li><li><p>Question 9 - 单选题</p>  <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>&amp; s</span>)</span><br>&#123;<br>    cout &lt;&lt; s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    func(<span class="hljs-string">&quot;123&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>  该段代码的输出是</p><p>  A.编译不通过</p><p>  B.123</p><hr><p>  Standard Answer: A</p><p>  解释：这段代码不能编译通过。原因在于<code>func</code>函数期望的参数是一个<code>string&amp;</code>（非const引用），而在<code>main</code>函数中调用<code>func(&quot;123&quot;);</code>时，传递的是一个字符串字面量。字符串字面量是一个常量字符数组，它可以被隐式转换为<code>const string</code>，但不能直接绑定到非const引用上。下面的代码同理</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; x)</span></span>&#123;<br>    cout&lt;&lt;x&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">func</span>(i * <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><img src="C:/Users/19912/AppData/Roaming/Typora/typora-user-images/image-20240629153919970.png" alt="image-20240629153919970" style="zoom:50%;" /></p></li><li><p>那反过来是不是就对了呢？</p></li><li><p><img src="C:/Users/19912/AppData/Roaming/Typora/typora-user-images/image-20240629153838861.png" alt="image-20240629153838861" style="zoom:50%;" /></p></li><li><p>Question 14 - 不定项选择题</p><p>  关于const引用，以下说法正确的是</p><p>  A.const引用是一个比较万能的类型，可以初始化为左值，右值，类型转换的左值对象。</p><p>  B.把const引用作为函数参数，可以防止程序错误修改不该修改的实参。</p><p>  C.非const的引用可以初始化为右值</p><p>  D.把const引用作为函数参数，可以提高程序的运行效率</p><hr><p>  Standard Answer: D, B, A</p></li></ul><h1 id="第八周"><a href="#第八周" class="headerlink" title="第八周"></a>第八周</h1><p>Question 1 - 不定项选择题</p><p>若定义正常对象的形式为<code>A a(parameter);</code>,那么定义常对象的形式为</p><p>A.A const a(parameter);</p><p>B.A a(parameter);</p><p>C.A a(parameter) const;</p><p>D.const A a(parameter);</p><hr><p>Standard Answer: A, D</p><p>解析：注意！！AD等价</p><p>Question 2 - 不定项选择题</p><p>如果在一个类中声明以下4个重载函数，有哪两个是互相冲突的？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">Point <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 1</span><br><span class="hljs-function"><span class="hljs-type">const</span> Point <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 2</span><br><span class="hljs-function">Point <span class="hljs-title">fun1</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;  <span class="hljs-comment">// 3</span><br><span class="hljs-function"><span class="hljs-type">const</span> Point <span class="hljs-title">fun1</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;  <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><p>A.1、2</p><p>B.1、3</p><p>C.2、3</p><p>D.3、4</p><hr><p>Standard Answer: A, D</p><p>解析：</p><p>前面那个<code>const</code>只是表示返回值类型<br>括号里的<code>const</code>表示<code>this指针</code>的类型，限定<code>this指针</code>的修改权限<br>分号前的<code>const</code>表示所有成员的修改权限</p><p>函数签名：名称，参数类型，不考虑返回值，也即是前面的<code>const</code>不影响重载，后面反之</p><h1 id="第九周"><a href="#第九周" class="headerlink" title="第九周"></a>第九周</h1><ul><li>下面关于继承说法不正确的是:</li></ul><p>A.继承可以使用现有类的所有功能，并在无需重新编写原来类的情况下对这些功能进行扩展。</p><p>B.继承体系中派生类应体现出与基类的不同。</p><p>C.派生类对象一定比基类对象大。</p><p>D.继承呈现了面向对象程序设计的层次结构，体现了由简单到复杂的认知过程。</p><hr><p>Standard Answer: C</p><p>解析：如果派生类没有新的成员变量，而且没有因为内存对齐而改变存储填充，派生类大小和基类相同；但是，如果派生类添加了新的成员变量或因为内存对齐而增加了额外的填充，那么派生类对象的大小就会比基类对象大。</p><ul><li>派生类析构函数的作用是什么？</li></ul><p>A.释放派生类新增的资源</p><p>B.释放基类的资源</p><p>C.释放派生类和基类的所有资源</p><p>D.不需要做任何操作</p><hr><p>Standard Answer: A</p><p>解析：派生类的构造函数和析构函数并不是释放派生类和基类的所有资源</p><p>本质上都只是<code>构造/销毁 派生的变量 + 调用基类的构造/析构函数</code></p><ul><li><p>Question 8 - 单选题</p><p>  在派生类析构函数中，可以如何调用基类的析构函数？</p><p>  A.直接调用基类的析构函数</p><p>  B.使用基类的析构函数的名称作为成员初始化列表的一部分调用</p><p>  C.不需要调用，基类的析构函数会自动被调用</p><p>  D.只能调用公有基类的析构函数</p><hr><p>  Standard Answer: C</p></li><li><p>如果派生类没有定义构造函数和析构函数，会发生什么？</p></li></ul><p>A.编译错误</p><p>B.调用基类的默认构造函数和析构函数</p><p>C.调用派生类的默认构造函数和析构函数</p><p>D.不做任何操作</p><hr><p>Standard Answer: C</p><p>解析：调用默认构造/析构函数然后在这些默认函数里调用基类的函数</p><h1 id="第十周"><a href="#第十周" class="headerlink" title="第十周"></a>第十周</h1><ul><li><p>在C++中，重载（overloading）、覆盖（overriding）和隐藏（hiding）是三种不同的函数处理方式。它们在继承和多态性方面有着各自不同的作用和行为。以下是对这三者的详细解释和区别：</p><h3 id="重载（Overloading）"><a href="#重载（Overloading）" class="headerlink" title="重载（Overloading）"></a>重载（Overloading）</h3><p>重载指的是在同一个作用域中，定义多个具有相同名字但参数列表不同的函数。这些函数可以是普通函数，也可以是类成员函数。</p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-comment">// 实现1</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">double</span> y)</span> </span>&#123;<br>        <span class="hljs-comment">// 实现2</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">double</span> y)</span> </span>&#123;<br>        <span class="hljs-comment">// 实现3</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>func</code>函数被重载了三次，每次都有不同的参数列表。编译器通过参数列表来区分这些函数。</p><h3 id="覆盖（Overriding）"><a href="#覆盖（Overriding）" class="headerlink" title="覆盖（Overriding）"></a>覆盖（Overriding）</h3><p>覆盖指的是在派生类中重新定义基类中已存在的虚函数。覆盖函数必须具有与基类中被覆盖函数相同的函数签名（参数列表和返回类型）。覆盖通常用于实现多态性。</p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 基类实现</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        <span class="hljs-comment">// 派生类实现</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>Derived</code>类中的<code>show</code>函数覆盖了<code>Base</code>类中的<code>show</code>函数。使用<code>override</code>关键字可以显式地表示该函数是覆盖基类中的虚函数。</p><h3 id="隐藏（Hiding）"><a href="#隐藏（Hiding）" class="headerlink" title="隐藏（Hiding）"></a>隐藏（Hiding）</h3><p>隐藏指的是在派生类中定义一个与基类中同名的函数，这个函数可能具有不同的参数列表。此时，基类中所有同名的函数都会被隐藏，而不是被重载。</p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-comment">// 基类实现</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">double</span> y)</span> </span>&#123;<br>        <span class="hljs-comment">// 派生类实现</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>Derived</code>类中的<code>func</code>函数隐藏了<code>Base</code>类中的<code>func</code>函数。在派生类的对象上调用<code>func</code>时，只有<code>Derived</code>类中的<code>func</code>函数是可见的。要调用基类的函数，可以使用作用域解析运算符。</p><h3 id="区别总结"><a href="#区别总结" class="headerlink" title="区别总结"></a>区别总结</h3><ol><li><strong>重载</strong>：在同一个作用域中，定义多个具有相同名字但参数列表不同的函数。</li><li><strong>覆盖</strong>：在派生类中重新定义基类中的虚函数，必须具有相同的函数签名。</li><li><strong>隐藏</strong>：在派生类中定义一个与基类同名但参数列表不同的函数，这会隐藏基类中的所有同名函数。</li></ol><p>理解这些概念对于正确使用C++中的继承和多态性非常重要。</p></li><li><p>关于虚继承</p><ul><li>C++在设计虚继承机制时，会提供一个虚表（vtable）和一个虚指针（vptr）。虚指针指向虚表，虚表用于存放虚基类（祖父类）成员的地址。通过虚指针和虚表，可以在使用公共基类时快速找到正确的成员。</li><li><p>菱形（钻石）继承的时候，编译器会默认调用父类的默认构造函数（记得提供），左右的类，不再调用父类的构造函数。</p></li><li><p>在类中，如果要使用父类的同名函数，要用域运算符: :</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">Human&amp; Human::<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Human&amp; other) &#123;<br>    Creature::<span class="hljs-keyword">operator</span>=(other);<br>    <span class="hljs-comment">// 基类的指针可以指向继承类——开头的结构是相同的</span><br>    <span class="hljs-keyword">delete</span> [] languages;<br>    languages = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-built_in">strlen</span>(other.languages) + <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">strcpy</span>(languages, other.languages);<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>virtual的范围只有上下两个</p></li><li><p>恢复访问方式</p><ul><li><p>```C++<br>  using  Base::data;</p>  <figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">注意是，恢复为原来的访问方式，不受继承的时候的protected和private影响‘</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">在派生类中显式调用基类构造函数的时候，如果有拷贝构造，可以直接把派生类对象作为参数，如下</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">```C++</span><br><span class="hljs-attribute">Derived(const Derived &amp; other)</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">Base(other), z(other.z) &#123;&#125;</span><br></code></pre></td></tr></table></figure><ul><li><p>在C++中，当你在派生类的构造函数中显式调用基类的构造函数时，使用<code>Derived</code>类的引用<code>other</code>作为参数是合法的，原因如下：</p><ol><li><strong>向上转型（Upcasting）</strong>：在C++中，派生类的对象可以被隐式地转换（向上转型）为基类的引用或指针。这意味着，当你将派生类的引用或指针传递给需要基类引用或指针的函数或构造函数时，转换是自动进行的。这种转换是安全的，因为派生类对象包含了基类的部分。</li><li><strong>基类部分的初始化</strong>：在派生类构造函数中显式调用基类构造函数是初始化派生类对象中基类部分的标准方式。通过将<code>Derived</code>类的引用<code>other</code>传递给基类的拷贝构造函数，你实际上是在告诉编译器：“请使用<code>other</code>对象中的基类部分来初始化当前对象的基类部分。”这样做是必要的，因为基类可能有自己的成员变量需要根据<code>other</code>对象的状态来初始化。</li><li><strong>保持对象状态的一致性</strong>：通过这种方式，你可以确保派生类对象的基类部分是通过基类的拷贝构造函数正确初始化的，这有助于保持对象状态的一致性，特别是当基类有自己的资源管理逻辑（如动态分配的内存）时</li></ol></li></ul></li></ul></li></ul><h1 id="第十一周"><a href="#第十一周" class="headerlink" title="第十一周"></a>第十一周</h1><ul><li><p>Question 1 - 单选题</p><p>  什么是多重继承？</p><p>  A.从派生类派生出基类</p><p>  B.从基类派生出派生类</p><p>  C.从多个基类派生出派生类</p><p>  D.派生出一个派生基类</p><hr><p>  Standard Answer: C</p></li><li><p>下面代码输出什么</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DerivedOne</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;DerivedOne\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DerivedTwo</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;DerivedTwo\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Multiple</span> : <span class="hljs-keyword">public</span> DerivedOne, <span class="hljs-keyword">public</span> DerivedTwo &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        DerivedTwo ::<span class="hljs-built_in">print</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    Multiple both;<br>    DerivedOne one;<br>    DerivedTwo two;<br>    Base *array[<span class="hljs-number">3</span>];<br>    array[<span class="hljs-number">0</span>] = &amp;both; <span class="hljs-comment">// error: 由于没有虚继承，基类的指向不明确</span><br>    array[<span class="hljs-number">1</span>] = &amp;one;<br>    array[<span class="hljs-number">2</span>] = &amp;two;<br>    array[i]-&gt;<span class="hljs-built_in">print</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Question 9 - 单选题</p><p>从基类继承了哪些内容？</p><p>A.构造函数及其析构函数</p><p>B.Operator=() 成员</p><p>C.友元</p><p>D.以上所有均不是</p><hr><p>Standard Answer: D</p><p>在C++中，派生类从基类继承时，有几种成员和特性是不会被继承的：</p><ol><li><p><strong>构造函数</strong>：基类的构造函数不会被派生类继承。派生类需要定义自己的构造函数。如果需要，派生类的构造函数可以显式地调用基类的构造函数。</p></li><li><p><strong>析构函数</strong>：基类的析构函数不会被派生类继承。派生类需要定义自己的析构函数。析构函数总是按照派生类到基类的顺序被调用。</p></li><li><p><strong>拷贝构造函数和拷贝赋值运算符</strong>：这些用于控制对象如何被复制的特殊成员函数不会被自动继承。派生类需要定义自己的拷贝构造函数和拷贝赋值运算符，如果需要的话，它们可以在其实现中调用基类的对应成员。</p></li><li><p><strong>友元函数</strong>：友元函数是指定的外部函数，它可以访问类的所有私有和保护成员。友元关系不是继承的。如果派生类需要某个函数作为友元，需要在派生类中显式声明。</p></li><li><p><strong>私有成员</strong>：基类的私有成员虽然被派生类继承，但是派生类不能直接访问它们。如果派生类需要访问基类的私有成员，可以通过基类提供的公共或保护的成员函数来实现。</p></li><li><p><strong>默认参数的使用规则</strong>：虽然派生类会继承基类的成员函数，但是成员函数的默认参数是静态绑定的，而不是动态绑定的。这意味着，如果通过基类的指针或引用调用一个继承自基类的函数，使用的默认参数值是基类中定义的值，而不是派生类中可能重新定义的值。</p></li></ol><p>这些限制确保了对象的构造和析构、复制行为可以被适当地控制，并且保护了类的封装性，同时也避免了潜在的多态性相关的问题。</p></li></ul><ul><li><p>Question 10 - 不定项选择题</p><p>  c++的类型兼容规则所指的替代包括以下情况:</p><p>  A.父类指针可以直接指向子类对象</p><p>  B.子类对象可以直接赋值给父类对象</p><p>  C.子类对象可以直接初始化父类对象</p><p>  D.将父类对象直接赋值给子类对象</p><hr><p>  Standard Answer: A, B, C</p></li><li><p>Question 11 - 单选题</p><p>  在C++中，什么是虚拟继承？</p><p>  A.C++ 中增强多重继承的技术</p><p>  B.C++ 中确保基类的私有成员可以以某种方式被访问的技术</p><p>  C.C++ 中避免类的多重继承的技术</p><p>  D.C++ 中避免基类在子类/派生类中出现多个副本的技术</p><hr><p>  Standard Answer: D</p></li><li><p>Question 16 - 单选题</p><p>  下面叙述不正确的是</p><p>  A.在单一继承中，基类的构造函数不可被派生类直接继承或调用</p><p>  B.对基类成员的访问必须是无二义性的</p><p>  C.赋值兼容规则也适用于多重继承的组合</p><p>  D.基类的公有成员在派生类中仍然是公有的</p><hr><p>  Standard Answer: D</p></li><li><p>Question 20 - 不定项选择题</p><p>  哪种访问修饰符的成员会被继承？</p><p>  A.Public</p><p>  B.Protected</p><p>  C.Private</p><p>  D.以上都不会</p><hr><p>  Standard Answer: A, B，C</p><p>  其实都能被继承的，只是访问权限上有不同</p></li></ul><h2 id="程序题出现的问题"><a href="#程序题出现的问题" class="headerlink" title="程序题出现的问题"></a>程序题出现的问题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    private:</span><br><span class="hljs-comment">        char* sound;</span><br><span class="hljs-comment">        int age;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//-----------------------------------------------------</span><br><br>/Creature::<span class="hljs-built_in">Creature</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* _sound, <span class="hljs-type">int</span> _age) : <span class="hljs-built_in">sound</span>(_sound), <span class="hljs-built_in">age</span>(_age) &#123;&#125; <span class="hljs-comment">// error: invalid conversion from &#x27;const char*&#x27; to &#x27;char*&#x27; [-fpermissive]</span><br><br>Creature::<span class="hljs-built_in">Creature</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* _sound, <span class="hljs-type">int</span> _age) : <span class="hljs-built_in">age</span>(_age) &#123;<br>    sound = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-built_in">strlen</span>(_sound) + <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">strcpy</span>(sound, _sound);<br>&#125;<span class="hljs-comment">//correct</span><br><br><span class="hljs-comment">//-----------------------------------------------------</span><br><br>Human&amp; Human::<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Human&amp; other) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> != &amp;other) &#123;<br>        <span class="hljs-comment">// this-&gt;Creature = other; // error: invalid use of &#x27;Creature::Creature&#x27;</span><br>        <span class="hljs-keyword">this</span>-&gt;Creature::<span class="hljs-keyword">operator</span>=(other); <span class="hljs-comment">// 正确地调用基类的赋值运算符</span><br>        <span class="hljs-keyword">delete</span>[] languages;<br>        languages = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-built_in">strlen</span>(other.languages) + <span class="hljs-number">1</span>];<br>        <span class="hljs-built_in">strcpy</span>(languages, other.languages);<br>    &#125;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第十二周"><a href="#第十二周" class="headerlink" title="第十二周"></a>第十二周</h1><ul><li><p>Question 1 - 单选题</p><p>  在C++中，多态意味着什么？</p><p>  A.只具有单一形态的类</p><p>  B.编译时决定行为的类</p><p>  C.允许对象表现出多种行为形态的特性</p><p>  D.仅具备静态行为的类</p><hr><p>  Standard Answer: C</p><p>  概念题</p></li><li><p>第三题</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Object</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> value;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Object</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>) : <span class="hljs-built_in">value</span>(x) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Object::print&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Object::add&quot;</span> &lt;&lt; x &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> : <span class="hljs-keyword">public</span> Object &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> num;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Base</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>) : <span class="hljs-built_in">Object</span>(x + <span class="hljs-number">10</span>), <span class="hljs-built_in">num</span>(x) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Base::show&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-built_in">print</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Base::add:&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Base base;<br>    base.<span class="hljs-built_in">show</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在C++中，<strong><u>构造函数和析构函数中调用虚函数不会发生多态</u></strong>的原因是为了保证对象状态的安全和一致性。具体来说，有以下几个原因：</p><ol><li><p><strong>构造函数中的虚函数调用</strong>：当构造函数被执行时，对象的派生类部分尚未被初始化。如果此时调用虚函数，并且该虚函数被派生类覆盖，那么该虚函数可能会操作派生类的成员变量，但这些成员变量此时还没有被初始化，这可能会导致不可预知的行为或错误。因此，在构造函数中，虚函数调用不会被动态绑定到派生类的实现。</p></li><li><p><strong>析构函数中的虚函数调用</strong>：当析构函数被执行时，派生类的部分已经被销毁，对象被“降级”为其基类的状态。如果此时调用虚函数，并且该虚函数在派生类中有覆盖实现，那么调用派生类的实现就可能操作已经被销毁的成员变量，同样会导致不可预知的行为或错误。因此，在析构函数中，虚函数调用也不会被动态绑定到派生类的实现。</p></li></ol><p>这种设计是为了确保在构造和析构过程中对象的完整性和一致性，避免在对象构造未完成或析构已开始时调用派生类的方法，这些方法可能会错误地操作尚未初始化或已经销毁的成员变量。</p><ul><li>第五题</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Object</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>)</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Object::func:a&quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//---------------------------------------------</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> : <span class="hljs-keyword">public</span> Object &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> b = <span class="hljs-number">20</span>)</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Base::fun:b&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//---------------------------------------------</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Base base;<br>    Object* op = &amp;base;<br>    op-&gt;<span class="hljs-built_in">func</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//out put Base::fun:b10</span><br></code></pre></td></tr></table></figure><p>在这个C++代码中，有几个关键点需要注意来解释为什么输出时<code>b</code>等于10，而不是20。</p><p>在C++中，当通过基类指针或引用来调用虚函数时，会发生动态绑定（或晚期绑定）。但是，这里的关键是==默认参数值是在编译时确定的==，基于函数声明的上下文。由于<code>op</code>是<code>Object*</code>类型，编译器只知道<code>Object</code>类中的<code>func</code>函数及其默认参数值（<code>a = 10</code>），而不知道<code>Base</code>类中的默认参数值（<code>b = 20</code>）。</p><p>因此，当你执行<code>op-&gt;func();</code>时，调用的是<code>Base</code>类中的<code>func</code>函数，但是使用了<code>Object</code>类中定义的默认参数值10。这就是为什么输出是”Base::func:a10”。</p><p>在C++中，当通过基类指针调用一个覆盖的虚函数时，会使用派生类的函数实现，这是多态的表现。然而，函数的<strong><u>默认参数值是静态绑定</u></strong>的，而不是动态绑定的。这意味着默认参数值的选择是根据指针或引用的静态类型来决定的，而不是对象的实际类型。</p><p>在给定的代码中，<a href="vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html"><code>op</code></a>是一个指向<a href="vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html"><code>Base</code></a>对象的<a href="vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html"><code>Object</code></a>类型指针。当调用<a href="vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html"><code>op-&gt;func()</code></a>时，由于<a href="vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html"><code>func</code></a>是一个虚函数，并且在<a href="vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html"><code>Base</code></a>类中被覆盖，所以会调用<a href="vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html"><code>Base</code></a>类中的<a href="vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html"><code>func</code></a>实现。然而，因为<a href="vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html"><code>func</code></a>的调用是通过一个类型为<a href="vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html"><code>Object*</code></a>的指针<a href="vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html"><code>op</code></a>进行的，所以使用的默认参数值是在<a href="vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html"><code>Object</code></a>类中声明的<a href="vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html"><code>func</code></a>函数的默认参数值<code>10</code>，而不是<a href="vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html"><code>Base</code></a>类中的默认参数值<code>20</code>。</p><ul><li>第8题</li></ul><p>==<strong>虚函数不能是静态成员函数</strong>。==</p><p>这是因为在C++中，虚函数和静态成员函数在语义和设计目的上存在根本的差异。</p><ol><li><strong>虚函数</strong>：虚函数主要用于实现动态多态性。当通过基类指针或引用调用虚函数时，实际调用的是指针或引用所指向的对象的实际类型（即派生类）中的虚函数版本（如果已经被重写）。这是通过虚函数表（<code>vtable</code>）和虚指针（<code>vptr</code>）实现的。</li><li><strong>静态成员函数</strong>：静态成员函数与类的一个特定实例无关，而是与类本身相关。它们不能访问类的非静态成员（因为它们不依赖于任何特定的对象实例），并且它们不能是虚函数。静态成员函数主要用于访问静态数据成员或执行与类相关的但与任何特定对象无关的操作。</li></ol><p>由于静态成员函数与类的特定实例无关，因此它们没有与对象的动态类型相关的概念。因此，将它们声明为虚函数是没有意义的。</p><ul><li><p>Question 10 - 不定项选择题</p><p>  以下哪些情况会导致虚函数表的创建？</p><p>  A.定义至少一个虚函数的类</p><p>  B.使用虚继承的类</p><p>  C.包含纯虚函数的类（抽象类）</p><p>  D.所有类都会自动创建虚函数表</p><hr><p>  Standard Answer: A, C</p><p>  解释：好好区分虚继承的概念，虚继承是为了解决菱形继承的过程中出现的多个基类的问题，和虚函数表完全是两码事</p></li><li><p>13.以下哪些是实现运行时多态的方式？</p></li></ul><p>A.函数重载</p><p>B.虚函数</p><p>C.重写（Override）</p><p>D.模板函数</p><p>—-standard answer BC</p><p>解释：</p><p>A. 函数重载（Overloading）虽然是实现多态的一种方式，但它实现的是编译时的多态性，而不是运行时的多态性。函数重载允许在同一个作用域内使用相同的函数名，但具有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）。</p><p>B. 虚函数（Virtual Functions）是实现运行时多态的关键机制。当基类中的成员函数被声明为虚函数时，它就可以在派生类中被重写（Override）。这样，通过基类指针或引用来调用虚函数时，就会根据指针或引用所指向的实际对象类型来调用相应的函数实现，从而实现运行时的多态性。</p><p>C. 重写（Override）是子类对父类中虚函数的重新实现。通过重写，子类可以改变父类中虚函数的行为。这也是实现运行时多态的一种方式。</p><p>D. 模板函数（Template Functions）主要用于实现泛型编程，它与运行时多态没有直接关系。模板函数在编译时根据提供的类型参数生成具体的函数实例，这属于<strong><u>编译时的多态性</u></strong>。</p><ul><li><p>Question 14 - 不定项选择题</p><p>关于动态类型，以下哪些说法是正确的？</p><p>A.动态类型是在运行时确定的</p><p>B.动态类型可以通过向下转型来改变</p><p>C.动态类型决定了实际调用哪个函数版本</p><p>D.动态类型与静态类型总是相同的</p><hr><p>Standard Answer: A, C</p><p>解释：动态类型和静态类型的概念主要用于指针和引用的上下文中，尤其是在涉及到继承和多态时。</p><ul><li><p><strong>静态类型</strong>：是变量声明时的类型，或者说是编译时可知的类型。对于指针和引用，静态类型决定了你可以在该指针或引用上调用哪些成员函数，以及这些函数调用是如何被解析的（比如是否发生动态绑定）。</p></li><li><p><strong>动态类型</strong>：是指针或引用实际指向的对象的类型。动态类型只有在运行时才能确定，它可能与静态类型相同，也可能是静态类型的派生类类型。在使用虚函数时，动态类型决定了哪个函数实现被调用。</p></li></ul><p>这两个概念是理解和实现多态性的关键。在非指针或引用的情况下，变量的类型在编译时是固定的，不存在动态类型的概念，因此通常不会讨论静态类型和动态类型。</p><p>对于B：动态类型是指指针或引用所指向对象的实际类型。动态类型可以在运行时通过向下转型（downcasting）来“改变”，但实际上并不改变对象本身的类型，而是改变我们对该对象类型的解释或访问方式。</p></li></ul><ul><li><p>17.以下哪种情况会发生动态类型转换？</p><p>A.将基类对象赋值给派生类对象</p><p>B.使用static_cast进行类型转换</p><p>C.通过基类指针调用非虚成员函数</p><p>D.显式地使用dynamic_cast进行转换</p><p>—-answer: D</p></li></ul><p>  在C++中，关于动态类型转换的描述，我们来分析这些选项：</p><p>  A. 将基类对象赋值给派生类对象</p><p>  这是不允许的，因为基类对象通常不包含派生类可能添加的所有成员，因此无法直接将基类对象转换为派生类对象。这会导致编译错误。</p><p>  B. 使用static_cast进行类型转换</p><p>  <code>static_cast</code> 是一种编译时类型转换，它不会进行运行时检查。虽然它可以用于多种类型转换，包括基类和派生类之间的转换（当进行安全的上转型或明确知道转换是安全时），但它本身并不直接代表动态类型转换。</p><p>  C. 通过基类指针调用非虚成员函数</p><p>  通过基类指针调用非虚成员函数不会导致动态类型转换。这种调用将总是解析为基类中的函数版本，因为非虚函数是在编译时绑定的。</p><p>  D. 显式地使用dynamic_cast进行转换</p><p>  <code>dynamic_cast</code> 是C++中的一种类型转换运算符，它用于安全地执行运行时类型检查。它主要用于在类层次结构中进行向上转型（这通常是不必要的，因为自动转换就足够了）和向下转型（从基类指针或引用到派生类指针或引用）。当使用 <code>dynamic_cast</code> 进行向下转型时，如果转换不安全（即基类指针不指向派生类对象），它将返回空指针（对于指针类型）或抛出异常（对于引用类型）。因此，这是动态类型转换的一个例子。</p><p>  所以，正确答案是 D：显式地使用dynamic_cast进行转换。</p><ul><li><p>Question 20 - 不定项选择题</p><p>下列关于函数重载的规则，哪些是正确的？</p><p>A.参数类型或个数不同</p><p>B.函数返回类型必须相同</p><p>C.函数名称必须相同</p><p>D.参数名称可以不同</p><hr><p>Standard Answer: A, C, D</p></li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li><p>虚表</p><ul><li><p>from  <a href="https://zhuanlan.zhihu.com/p/75172640">C++ 虚函数表剖析 - 知乎 (zhihu.com)</a></p></li><li><p>虚表是一个指针数组，其元素是虚函数的指针，每个元素对应一个虚函数的函数指针。需要指出的是，普通的函数即非虚函数，其调用并不需要经过虚表，所以虚表的元素并不包括普通函数的函数指针。<br>  虚表内的条目，即虚函数指针的赋值发生在<strong>编译器的编译阶段</strong>，也就是说在代码的编译阶段，虚表就可以构造出来了。（解释上面的第五题）</p></li><li><p>虚表是属于类的，而不是属于某个具体的对象，一个类只需要一个虚表即可。同一个类的所有对象都使用同一个虚表。</p></li><li><p>为了指定对象的虚表，对象内部包含一个虚表的指针，来指向自己所使用的虚表。为了让每个包含虚表的类的对象都拥有一个虚表指针，编译器在类中添加了一个指针，<code>*__vptr</code>，用来指向虚表。这样，当类的对象在创建时便拥有了这个指针，且这个指针的值会自动被设置为指向类的虚表。</p></li><li><p>一个继承类的基类如果包含虚函数，那个这个继承类也有拥有自己的虚表，故这个继承类的对象也包含一个虚表指针，用来指向它的虚表。（解释一旦为虚，永远为虚）</p></li><li><p>==对象的虚表指针用来指向自己所属类的虚表，虚表中的指针会指向其继承的最近的一个类的虚函数==</p></li><li><p>非虚函数的调用不用经过虚表，故不需要虚表中的指针指向这些函数。</p></li><li><p>```C++<br>  int main()<br>  {</p><pre><code class="hljs">  B bObject;  A *p = &amp; bObject;  p-&gt;vfun1();</code></pre><p>  }</p><p>  //虽然p是基类的指针只能指向基类的部分，但是虚表指针亦属于基类部分，所以p可以访问到对象bObject的虚表指针。bObject的虚表指针指向类B的虚表，所以p可以访问到B vtbl.</p><p>  //程序在执行p-&gt;vfunc1()时，会发现p是个指针，且调用的函数是虚函数，接下来便会进行以下的步骤。</p><p>  //首先，根据虚表指针p-&gt;<strong>vptr来访问对象bObject对应的虚表。虽然指针p是基类A<em>类型，但是</em></strong>vptr也是基类的一部分，所以可以通过p-&gt;__vptr可以访问到对象对应的虚表。</p><p>  //然后，在虚表中查找所调用的函数对应的条目。由于虚表在编译阶段就可以构造出来了，所以可以根据所调用的函数定位到虚表中的对应条目。对于p-&gt;vfunc1()的调用，B vtbl的第一项即是vfunc1对应的条目。</p><p>  //最后，根据虚表中找到的函数指针，调用函数。</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>  <br><br><span class="hljs-bullet">  -</span> 我们把经过虚表调用虚函数的过程称为动态绑定，其表现出来的现象称为运行时多态。动态绑定区别于传统的函数调用，传统的函数调用我们称之为静态绑定，即函数的调用在编译阶段就可以确定下来了。<br><br><span class="hljs-bullet">  -</span> 当对象指针被向上转型为基类指针时，如果没有涉及到多态（即没有使用虚函数机制），<span class="hljs-strong">**<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>调用的是基类的函数<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span>**</span>，原因在于编译时的静态类型决定了可以调用哪些成员函数。这种行为是基于静态绑定的，意味着函数调用在编译时就已经确定了，而不是在运行时。<br><br>  在没有多态的情况下，<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>即使派生类隐藏了基类中的同名函数<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span>，当通过基类指针调用函数时，<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>编译器只能看到指针的静态类型<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span>（即基类），<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>因此它会调用基类中的函数。<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span>这是因为在编译时，<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>编译器只能根据指针的类型<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span>（而不是指针所指向的对象的实际类型）来解析函数调用。<br><br>  多态通过虚函数实现，它允许在运行时根据对象的动态类型来决定调用哪个函数。当基类中的函数被声明为 <span class="hljs-code">`virtual`</span>，并且派生类提供了一个覆写版本时，通过基类指针调用该函数将会根据指针所指向的对象的实际类型来调用相应的函数实现，这是动态绑定的结果。<br><br><span class="hljs-bullet">-</span> 向上转型<br><br><span class="hljs-bullet">  -</span> <span class="hljs-strong">**向上转型**</span>是将派生类（或子类）的引用赋值给基类（或父类）的引用。这种转型是安全的，因为派生类是基类的一个特殊化版本，所以基类引用可以安全地引用派生类对象。在向上转型过程中，不需要进行显式转换，因为编译器会自动进行这种转换。<br><span class="hljs-bullet">  -</span> 收窄<br><br><span class="hljs-bullet">-</span> 如果派生类中的函数与基类中的函数同名，不管参数列表是否相同，都会导致基类中同名函数的隐藏。这种现象在 C++ 中被称为“隐藏”（不是“覆写”或 overwrite，覆写一词通常用于虚函数的上下文）。隐藏发生在派生类中声明了一个与基类中某个函数同名的函数时，无论这两个函数的参数列表是否相同，基类中的所有同名函数都将在派生类的作用域中被隐藏。<br><br><span class="hljs-code">这意味着，如果你想在派生类中调用被隐藏的基类函数，你需要在派生类中显式地引用它们，通常是通过使用基类的作用域解析运算符（`::`）来实现。</span><br><span class="hljs-code"></span><br><span class="hljs-section">### static</span><br><br><span class="hljs-strong">**<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>静态成员变量是<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span>**</span>C++中类的一个特殊特性，它不属于任何一个类实例，而是属于类本身。以下是使用静态成员变量时需要注意的一些关键事项：<br><br><span class="hljs-bullet">1.</span> <span class="hljs-strong">**定义与声明**</span>：静态成员变量==必须在类定义之外进行定义和初始化==。在类定义中，你只能声明静态成员变量，而不能定义它。例如：<br><br><br><span class="hljs-code">```cpp</span><br><span class="hljs-code">class MyClass &#123;</span><br><span class="hljs-code">public:</span><br><span class="hljs-code">    static int myStaticVar;  // 声明</span><br><span class="hljs-code">&#125;;</span><br><span class="hljs-code"></span><br><span class="hljs-code">int MyClass::myStaticVar = 0;  // 定义和初始化</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><ol><li><strong>访问方式</strong>：你可以通过类名直接访问静态成员变量，而无需创建类的实例。同时，你也可以通过类的对象访问静态成员变量，但这不是推荐的做法，因为这可能会导致混淆。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">MyClass::myStaticVar = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 通过类名访问</span><br>MyClass obj;<br>obj.myStaticVar = <span class="hljs-number">20</span>;  <span class="hljs-comment">// 通过对象访问，不推荐</span><br></code></pre></td></tr></table></figure><ol><li><strong>初始化顺序</strong>：静态成员变量的初始化顺序是按照它们在文件中出现的顺序进行的，而不是按照它们在类定义中的顺序。因此，如果静态成员变量的初始化依赖于其他静态成员变量或全局变量，那么你需要特别小心以确保正确的初始化顺序。</li><li><strong>生命周期</strong>：静态成员变量的生命周期与整个程序的生命周期相同。它们在程序开始执行时创建，在程序结束时销毁。</li><li><strong>线程安全</strong>：在多线程环境中，对静态成员变量的访问需要特别注意线程安全。如果没有适当的同步机制，多个线程可能同时修改静态成员变量，导致数据不一致或其他问题。</li><li><strong>内存管理</strong>：静态成员变量存储在程序的静态存储区，而不是堆或栈上。因此，你不需要（也不能）使用<code>new</code>或<code>delete</code>来管理它们的内存。</li><li><strong>继承</strong>：如果基类有静态成员变量，那么派生类不会继承这个静态成员变量。每个类都有自己的静态成员变量。但是，通过派生类的名字也可以访问基类的静态成员变量。</li></ol><p><strong><u>静态成员函数</u></strong>是C++类中的一种特殊函数，它属于类本身而不是类的实例对象。以下是关于静态成员函数的一些主要特点和注意事项：</p><ol><li><strong>声明与定义</strong>：静态成员函数在类内部声明时，使用<code>static</code>关键字进行修饰。其定义（实现）通常在类外部完成，且不需要<code>static</code>关键字。</li><li><strong>访问方式</strong>：静态成员函数可以通过类名直接调用，而不需要创建类的实例。这使得静态成员函数成为执行与类本身相关的操作而非特定于某个对象的操作的理想选择。同时，静态成员函数不能访问类的非静态成员变量和非静态成员函数，因为它们需要依赖于特定的对象实例。但是，静态成员函数可以访问静态成员变量和静态成员函数。</li><li><strong>用途</strong>：静态成员函数通常用于执行与类相关但不依赖于对象实例的操作。例如，它们可以用于计算类的静态成员变量的值，或者执行一些全局性的操作。</li><li><strong>线程安全</strong>：在多线程环境中，对静态成员函数的访问需要特别注意线程安全。如果没有适当的同步机制，多个线程可能同时调用静态成员函数，导致数据竞争或其他问题。</li><li><strong>继承</strong>：如果基类有静态成员函数，派生类可以访问基类的静态成员函数。这是因为静态成员函数属于类本身，而不是类的实例。</li></ol><p>请注意，虽然静态成员函数在类定义中声明时使用了<code>static</code>关键字，但在其定义（实现）时==不需要再次使用<code>static</code>关键字==。此外，静态成员函数由于没有隐式的<code>this</code>指针，因此不能访问类的非静态成员。</p><p>总的来说，静态成员函数是C++类的一个强大工具，可以在不需要特定对象实例的情况下执行与类相关的操作。然而，在使用它们时，需要注意它们的一些限制和特性，以确保代码的正确性和安全性。</p><h1 id="第十三周"><a href="#第十三周" class="headerlink" title="第十三周"></a>第十三周</h1><ul><li><p>Question 3 - 单选题</p><p>  以下关于虚函数和多态的说法中错误的是：</p><p>  A.只要基类的函数被声明为虚函数，则派生类的同名函数就能自动实现对基类函数的覆盖（override）。</p><p>  B.一般不建议在派生类中把从基类继承来的非虚函数声明为虚函数。</p><p>  C.当基类的某个成员函数在派生类中被隐藏（overwrite）时，程序将根据引用或指针的类型选择函数方法。</p><p>  D.关键字virtual只用于类声明的函数原型中，而不会用于类外的函数方法定义中。</p><hr><p>  Standard Answer: A</p><p>  这句话的错误之处在于它忽略了函数签名的匹配要求和<code>override</code>关键字的作用。要正确实现对基类虚函数的覆盖（override），派生类中的函数不仅需要与基类中的虚函数同名，还必须具有相同的参数列表（包括参数类型和数量）和兼容的返回类型。此外，C++11引入了<code>override</code>关键字，虽然它不是必需的，但使用它可以让编译器帮助检查派生类的函数确实覆盖了基类的一个虚函数。</p><p>  因此，更准确的表述应该是：</p><p>  只要基类的函数被声明为虚函数，且派生类中有一个同名函数，该函数具有相同的参数列表和兼容的返回类型，则派生类的这个函数就能实现对基类函数的覆盖。为了确保这种覆盖是有意为之，可以在派生类的函数声明中使用<code>override</code>关键字，这样如果没有正确覆盖基类的虚函数，编译器将报错。</p></li><li><p>Question 5 - 不定项选择题</p><p>  以下关于up/downcasting的说法正确的有：</p><p>  A.upcasting时必须显式转换；</p><p>  B.upcasting显隐式转换均合法；</p><p>  C.downcasting时必须显式转换；</p><p>  D.downcasting显隐式转换均合法；</p><hr><p>  Standard Answer: B, C</p><p>  解释：<br>  B.将派生类指针(或引用)转换为基类指针(或引用)的过程称为upcasting</p><p>  C.将基类指针(或引用)转换为派生类指针(或引用)的过程称为downcasting</p><p>  往下是危险的，所以要用dynamic_cast保护</p></li><li><p>不能声明为虚函数的函数</p><ul><li><p>1）普通函数。普通函数不属于成员函数，是不能被继承的。普通函数只能被重载，不能被重写，因此声明为虚函数没有意义。因为编译器会在编译时绑定函数。而多态体现在运行时绑定。通常通过基类指针指向子类对象实现多态。</p></li><li><p>2）友元函数。友元函数不属于类的成员函数，不能被继承。对于没有继承特性的函数没有虚函数的说法。</p></li><li>3）构造函数。假如子类可以继承基类构造函数，那么子类对象的构造将使用基类的构造函数，而基类构造函数并不知道子类的有什么成员，显然是不符合语义的。从另外一个角度来讲，多态是通过基类指针指向子类对象来实现多态的，在对象构造之前并没有对象产生，因此无法使用多态特性，这是矛盾的。因此构造函数不允许继承。</li><li>4）内联成员函数。我们需要知道内联函数就是为了在代码中直接展开，减少函数调用花费的代价。也就是说内联函数是在编译时展开的。而虚函数是为了实现多态，是在运行时绑定的。因此显然内联函数和多态的特性相违背。</li><li>5）静态成员函数。首先静态成员函数理论是可继承的。但是静态成员函数是编译时确定的，无法动态绑定，不支持多态，因此不能被重写，也就不能被声明为虚函数。</li></ul></li><li><p>Question 3 - 单选题</p><p>  以下关于虚函数和多态的说法中错误的是：</p><p>  A.只要基类的函数被声明为虚函数，则派生类的同名函数就能自动实现对基类函数的覆盖（override）。</p><p>  B.一般不建议在派生类中把从基类继承来的非虚函数声明为虚函数。</p><p>  C.当基类的某个成员函数在派生类中被隐藏（overwrite）时，程序将根据引用或指针的类型选择函数方法。</p><p>  D.关键字virtual只用于类声明的函数原型中，而不会用于类外的函数方法定义中。</p><p>  答案：A</p><p>  选项分析：</p><p>  A. 只要基类的函数被声明为虚函数，则派生类的同名函数就能自动实现对基类函数的覆盖（override）。</p><ul><li><p>这个说法有误。虽然基类函数被声明为虚函数允许派生类进行覆盖，但并不是派生类的同名函数就能“自动”实现对基类函数的覆盖。派生类中的函数需要有相同的函数签名（包括返回类型、函数名和参数列表），并且需要使用 <code>override</code> 关键字（在C++11及以后的版本中）来显式地表明这是一个覆盖基类的虚函数。所以，A 选项是错误的。</p><p>B. 一般不建议在派生类中把从基类继承来的非虚函数声明为虚函数。</p></li><li><p>这个说法通常被认为是正确的。如果基类中的函数不是虚函数，而在派生类中将其声明为虚函数，这可能会导致一些设计上的问题，比如切片问题等。通常，如果一个函数在基类中应当是虚函数，那么它应该在基类中就被声明为虚函数。</p><p>C. 当基类的某个成员函数在派生类中被隐藏（overwrite）时，程序将根据引用或指针的类型选择函数方法。</p></li><li><p>这个说法是正确的。当派生类中的函数与基类中的函数同名但签名不同，或者基类中的函数没有被声明为虚函数时，基类的函数将被隐藏。在这种情况下，程序将根据对象的静态类型（即引用或指针的类型）来选择调用的函数。</p><p>D. 关键字virtual只用于类声明的函数原型中，而不会用于类外的函数方法定义中。</p></li><li><p>这个说法是正确的。<code>virtual</code> 关键字只在类内部声明虚函数时使用，不需要在类外部的函数定义中重复。</p></li></ul></li></ul><ul><li><p>Question 5 - 不定项选择题</p><p>  以下关于up/downcasting的说法正确的有：</p><p>  A.upcasting时必须显式转换；</p><p>  B.upcasting显隐式转换均合法；</p><p>  C.downcasting时必须显式转换；</p><p>  D.downcasting显隐式转换均合法；</p><p>  答案：BC</p><p>  收窄安全，隐式即可，无强制要求显式；拓宽危险，需要显式</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// three overloaded functions</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;func default&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> <span class="hljs-type">const</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;func with int&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> <span class="hljs-type">const</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;func with double&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(string str)</span> <span class="hljs-type">const</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;func with string&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">persianCat</span> : <span class="hljs-keyword">public</span> Cat &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// new redefined functions</span><br>    <span class="hljs-comment">// 有同名函数，不管参数是否相同，都隐藏了基类的函数</span><br><br>    <span class="hljs-comment">// 同名且参数相同，重写了基类的无参函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;new func default&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 同名且参数相同，重写了基类的int函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a_)</span> <span class="hljs-type">const</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;new func with int&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Cat bai;<br>    persianCat hei;<br><br>    <span class="hljs-comment">//--------------------------------------------------------</span><br><br>    Cat *c1 = &amp;hei;<br>    persianCat *c2 = &amp;hei;<br>    <span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-string">&quot;hello&quot;</span>)</span></span>;<br>    <span class="hljs-comment">// hei.func(s);  // error:找不到这个函数，被隐藏了，强制类型转换又不行（string-&gt;int）</span><br>    <span class="hljs-comment">// c2-&gt;func(s);  // error:</span><br>    c1-&gt;<span class="hljs-built_in">func</span>(s);  <span class="hljs-comment">// correct，输出func with string</span><br>    c1-&gt;<span class="hljs-built_in">func</span>(<span class="hljs-number">2</span>);  <span class="hljs-comment">// correct, 输出func with int</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Q:为什么派生对象和派生类指针找不到这个函数？是因为隐藏吗</span><br><span class="hljs-comment">    A:是的，派生类同名函数隐藏了基类函数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Q:为什么基类指针就可以调用</span><br><span class="hljs-comment">    A:基类指针调用的是基类的函数，基类的函数在基类指针的解释下都是可以找到的，再根据动态类型来调用派生类的函数</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">//-------------------------------------------------------</span><br><br>    <span class="hljs-comment">// object of base class</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;12&quot;</span> &lt;&lt; endl;<br>    bai.<span class="hljs-built_in">func</span>(<span class="hljs-number">2.1</span>);  <span class="hljs-comment">// 输出func with double，基类成员调用基类函数</span><br><br>    <span class="hljs-comment">//-------------------------------------------------------</span><br><br>    cout &lt;&lt; <span class="hljs-string">&quot;13&quot;</span> &lt;&lt; endl;<br>    hei.<span class="hljs-built_in">func</span>(<span class="hljs-number">2.1</span>);  <span class="hljs-comment">// 输出func with new int，由于隐藏，无法调用基类的int函数，只能强转之后调用派生类的int函数</span><br>    <span class="hljs-comment">// 因为基类的虚表已经被隐藏，只有在派生类中重定义了的函数才会出现在派生类的虚表里面。既然找不到函数，只好强制类型转换后调用int的函数了。</span><br><br>    <span class="hljs-comment">//-------------------------------------------------------</span><br><br>    <span class="hljs-comment">// hei.func(&quot;adsasd&quot;);</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;14&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;error&quot;</span> &lt;&lt; endl;<br><br>    <span class="hljs-comment">//-------------------------------------------------------</span><br><br>    <span class="hljs-comment">// pointer to base class</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;15&quot;</span> &lt;&lt; endl;<br>    Cat *p2Cat = &amp;bai;  <span class="hljs-comment">// 基类指针指向基类对象</span><br>    p2Cat-&gt;<span class="hljs-built_in">func</span>();      <span class="hljs-comment">// 输出func default</span><br>    p2Cat-&gt;<span class="hljs-built_in">func</span>(<span class="hljs-number">2</span>);     <span class="hljs-comment">// 输出func with int</span><br>    p2Cat-&gt;<span class="hljs-built_in">func</span>(<span class="hljs-number">2.1</span>);   <span class="hljs-comment">// 输出func with double</span><br>    <span class="hljs-comment">// 这仨都是基类指针指向基类对象，动态类型也是基类的，所以都是调用基类的函数</span><br><br>    <span class="hljs-comment">//-------------------------------------------------------</span><br><br>    <span class="hljs-comment">// pointer to base class</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;16&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-comment">// Cat *p2Cat</span><br>    p2Cat = &amp;hei;      <span class="hljs-comment">// 基类指针指向派生类对象</span><br>    p2Cat-&gt;<span class="hljs-built_in">func</span>();     <span class="hljs-comment">// 输出new func default</span><br>    p2Cat-&gt;<span class="hljs-built_in">func</span>(<span class="hljs-number">2</span>);    <span class="hljs-comment">// 输出new func with int</span><br>    p2Cat-&gt;<span class="hljs-built_in">func</span>(<span class="hljs-number">2.1</span>);  <span class="hljs-comment">// 输出func with double</span><br>    <span class="hljs-comment">// 基类指针指向派生类对象，从基类函数中找匹配参数的函数</span><br>    <span class="hljs-comment">// 如果有，看看有无重写，有则调用派生类的函数，没有则调用基类的函数</span><br><br>    <span class="hljs-comment">//----------------------------------------------------</span><br><br>    <span class="hljs-comment">// pointer to derived class</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;17&quot;</span> &lt;&lt; endl;<br>    persianCat *p2persianCat = &amp;hei;  <span class="hljs-comment">// 派生类指针指向派生类对象</span><br>    p2persianCat-&gt;<span class="hljs-built_in">func</span>();             <span class="hljs-comment">// 输出new func default</span><br>    p2persianCat-&gt;<span class="hljs-built_in">func</span>(<span class="hljs-number">2</span>);            <span class="hljs-comment">// 输出new func with int</span><br>    p2persianCat-&gt;<span class="hljs-built_in">func</span>(<span class="hljs-number">2.1</span>);          <span class="hljs-comment">// 输出nfunc with int</span><br>    <span class="hljs-comment">// 派生类指针指向派生类对象，基类函数已经被隐藏了，直接调用派生类的函数</span><br>    <span class="hljs-comment">// 如果没有完全匹配的，尝试类型转换</span><br><br>    <span class="hljs-comment">//---------------------------------------------------</span><br><br>    <span class="hljs-comment">// reference to base class</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;18&quot;</span> &lt;&lt; endl;<br>    Cat &amp;ref2Cat = bai;  <span class="hljs-comment">// 基类引用指向基类对象</span><br>    ref2Cat.<span class="hljs-built_in">func</span>();      <span class="hljs-comment">// 输出func default</span><br>    ref2Cat.<span class="hljs-built_in">func</span>(<span class="hljs-number">2</span>);     <span class="hljs-comment">// 输出func with int</span><br>    ref2Cat.<span class="hljs-built_in">func</span>(<span class="hljs-number">2.1</span>);   <span class="hljs-comment">// 输出func with double</span><br>    <span class="hljs-comment">// 基类引用指向基类对象，动态类型也是基类的，所以都是调用基类的函数</span><br><br>    <span class="hljs-comment">//----------------------------------------------------</span><br><br>    <span class="hljs-comment">// reference to base class</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;19&quot;</span> &lt;&lt; endl;<br>    Cat &amp;ref3Cat = hei;  <span class="hljs-comment">// 基类引用指向派生类对象</span><br>    ref3Cat.<span class="hljs-built_in">func</span>();      <span class="hljs-comment">// 输出new func default</span><br>    ref3Cat.<span class="hljs-built_in">func</span>(<span class="hljs-number">2</span>);     <span class="hljs-comment">// 输出new func with int</span><br>    ref3Cat.<span class="hljs-built_in">func</span>(<span class="hljs-number">2.1</span>);   <span class="hljs-comment">// 输出func with double</span><br>    <span class="hljs-comment">// 基类引用指向派生类对象，从基类函数中找匹配参数的函数</span><br>    <span class="hljs-comment">// 找到了，看看有无重写，有则调用派生类的函数，没有则调用基类的函数</span><br><br>    <span class="hljs-comment">//----------------------------------------------------</span><br><br>    <span class="hljs-comment">// reference to derived class</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;20&quot;</span> &lt;&lt; endl;<br>    persianCat &amp;r2persianCat = hei;  <span class="hljs-comment">// 派生类引用指向派生类对象</span><br>    r2persianCat.<span class="hljs-built_in">func</span>();             <span class="hljs-comment">// 输出new func default</span><br>    r2persianCat.<span class="hljs-built_in">func</span>(<span class="hljs-number">2</span>);            <span class="hljs-comment">// 输出new func with int</span><br>    r2persianCat.<span class="hljs-built_in">func</span>(<span class="hljs-number">2.1</span>);          <span class="hljs-comment">// 输出new func with int</span><br>    <span class="hljs-comment">// 派生类引用指向派生类对象，基类函数已经被隐藏了，直接调用派生类的函数</span><br>    <span class="hljs-comment">// 如果没有完全匹配的，尝试类型转换</span><br><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>13周课堂1，要输出类名，注意函数，只有基类或者次基类要用virtual，然后调用的函数，接受的形参必须是引用或者指针</li></ul><h1 id="第十四周（模板）"><a href="#第十四周（模板）" class="headerlink" title="第十四周（模板）"></a>第十四周（模板）</h1><ul><li><p>Question 2 - 单选题</p><p>  模板函数的真正代码是在哪个时期产生的？</p><p>  A.源程序中声明函数时</p><p>  B.源程序中定义函数时</p><p>  C.源程序中调用函数时</p><p>  D.运行执行函数时</p><hr><p>  Standard Answer: C</p><p>  解释：编译器的“调用”过程实际上是一个代码生成过程，而不是像程序运行时那样的函数执行过程。编译器通过分析源代码中的模板函数调用，确定需要生成的具体函数版本。这个过程包括确定模板参数的具体类型，并根据这些类型生成相应的函数实例代码。这一切都发生在编译时，而非运行时。</p></li><li><p>Question 3 - 单选题</p><p>  下列关于模板的描述中，错误的是？</p><p>  A.模板把数据类型作为一个设计参数，称为参数化程序设计</p><p>  B.使用时，模板参数与函数参数相同，是按位置而不是名称对应的</p><p>  C.模板参数表中可以有类型参数和非类型参数</p><p>  D.类模板与模板类是同一个概念</p><hr><p>  Standard Answer: D</p><p>  解释：类模板是一个蓝图，不是一个具体的类，但是模板类是一个具体的类</p></li><li><p>Question 10 - 单选题</p><p>  关于类模板，描述错误的是?</p><p>  A.一个普通基类不能派生类模板</p><p>  B.类模板可以从普通类派生，也可以从类模板派生</p><p>  C.根据建立对象时的实际数据类型，编译器把类模板实例化为模板类</p><p>  D.函数的类模板参数需生成模板类并通过构造函数实例化</p><hr><p>  Standard Answer: A</p></li><li><p>Question 16 - 不定项选择题</p><p>  根据如下类模板定义，下列语句中可正常运行的有：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>&#123;<br>    T x,y;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Point</span>(T x_, T y_):<span class="hljs-built_in">x</span>(x_),<span class="hljs-built_in">y</span>(y_)&#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> : <span class="hljs-keyword">public</span> Point&lt;T&gt;&#123;<br>    T r;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Circle</span>(T x_, T y_, T r_):<span class="hljs-built_in">Point</span>&lt;T&gt;(x_,y_),<span class="hljs-built_in">r</span>(r_)&#123;&#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>  A.<code>Circle&lt;double&gt;* a = new Circle&lt;int&gt;(4,5,6);</code></p><p>  B.<code>Point&lt;int&gt;* a = new Circle&lt;int&gt;(4,5,6);</code></p><p>  C.<code>Circle&lt;int&gt; a(4,5,6);  Circle&lt;double&gt; b(1,2,3);  a=b;</code></p><p>  D.<code>Circle&lt;int&gt; a(1,2,2.5);  Point&lt;int&gt; b(1,2);  b=a;</code></p><hr><p>  Standard Answer: B, D</p><p>  解释：这个语句试图将 <code>Circle&lt;int&gt;</code> 类型的对象赋值给一个指向 <code>Circle&lt;double&gt;</code> 类型的指针。这是类型不匹配的，因为模板参数 <code>T</code> 在两边不一致，导致类型不兼容。因此，这个语句不能正常运行。</p><p>  一旦实例化，就是不同类的了，如果将不同类非继承关系的指针之间进行直接赋值，是错的，而D选项里，基类和派生类都是int的，因而父类指针可以指向派生类</p></li><li><p>Question 17 - 单选题</p><p>  下述关于函数模板和类模板的说法中错误的是：</p><p>  A.调用函数模板时，编译器允许根据函数调用中所给出的实参类型来确定相应的模板实参</p><p>  B.调用函数模板时允许显示指定模板实参</p><p>  C.实例化类模板时，编译器允许不显式提供模板实参而根据构造函数的实参类型来推断模板实参</p><p>  D.实例化类模板时，必须显式地提供模板实参</p><hr><p>  Standard Answer: C</p><p>  解释：对于类模板，当前的 C++ 标准（包括 C++17）要求在实例化类模板时必须显式提供模板实参。这意味着编译器不会尝试根据构造函数的实参类型来推断模板实参。</p></li></ul><p>Question 15 - 单选题</p><p>对模板进行实例化时，传递给非类型形参的实参可以是：</p><p>A.动态对象</p><p>B.局部变量</p><p>C.非const的全局变量</p><p>D.编译时常量表达式</p><hr><p>ans: D<br>由于模板实例化发生在编译期，所以必须传递编译器常量才能识别，也就是说尖括号里面的内容必须是一个常量表达式。</p><ul><li>函数模板调用的是同一个函数吗</li></ul><p><strong>函数模板是一个蓝图，它本身并不是函数，是编译器用使用方式产生特定具体类型函数的模具。所以其实模板就是将本来应该我们做的重复的事情交给了编译器。</strong></p><p><img src="C:/Users/19912/AppData/Roaming/Typora/typora-user-images/image-20240529203345238.png" alt="image-20240529203345238"></p><ul><li>类函数分离声明与定义的写法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Stack.h&quot;</span></span><br> <br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>&gt;<br><span class="hljs-comment">// 构造函数</span><br>Stack&lt;T1&gt;::<span class="hljs-built_in">Stack</span>(<span class="hljs-type">int</span> capacity)<br>:_a(<span class="hljs-keyword">new</span> T1[capacity])<br>,_capacity(capacity)<br>,_size(<span class="hljs-number">0</span>)<br>&#123;&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>&gt;<br><span class="hljs-comment">// 插入函数</span><br><span class="hljs-type">void</span> Stack&lt;T1&gt;::<span class="hljs-built_in">Push</span>(T1 data)&#123;<br>_a[_size] = data;<br>_size++;<br>&#125;<br><span class="hljs-comment">// 析构函数</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>&gt;<br>Stack&lt;T1&gt;::~<span class="hljs-built_in">Stack</span>()&#123;<br><span class="hljs-keyword">delete</span>[]_a;<br>_a = <span class="hljs-literal">nullptr</span>;<br>_capacity = _size = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h2><p><img src="C:/Users/19912/AppData/Roaming/Typora/typora-user-images/image-20240529204002583.png" alt="image-20240529204002583" style="zoom:80%;" /></p><p>explicit表示不发生隐式类型转换，所以调用失败（注意：explicit只能在构造函数中使用）</p><p><img src="C:/Users/19912/AppData/Roaming/Typora/typora-user-images/image-20240602111820936.png" alt="image-20240602111820936" style="zoom:67%;" /></p><h2 id="程序题"><a href="#程序题" class="headerlink" title="程序题"></a>程序题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 函数模板demoPrint</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">demoPrint</span><span class="hljs-params">(<span class="hljs-type">const</span> T v1, <span class="hljs-type">const</span> T v2)</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;the first version of demoPrint()&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;the arguments: &quot;</span> &lt;&lt; v1 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; v2 &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// 函数模板demoPrint的指定特殊</span><br><span class="hljs-keyword">template</span> &lt;&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">demoPrint</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> v1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> v2)</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;the specify special of demoPrint()&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;the arguments: &quot;</span> &lt;&lt; v1 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; v2 &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// 函数模板demoPrint重载的函数模板</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">demoPrint</span><span class="hljs-params">(<span class="hljs-type">const</span> T v)</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;the second version of demoPrint()&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;the argument: &quot;</span> &lt;&lt; v &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// 非函数模板demoPrint</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">demoPrint</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span> v1, <span class="hljs-type">const</span> <span class="hljs-type">double</span> v2)</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;the nonfunctional template version of demoPrint()&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;the arguments: &quot;</span> &lt;&lt; v1 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; v2 &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">string <span class="hljs-title">s1</span><span class="hljs-params">(<span class="hljs-string">&quot;rabbit&quot;</span>)</span>, <span class="hljs-title">s2</span><span class="hljs-params">(<span class="hljs-string">&quot;bear&quot;</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-string">&#x27;k&#x27;</span>)</span>, <span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-string">&#x27;b&#x27;</span>)</span></span>;<br>    <span class="hljs-type">int</span> iv1 = <span class="hljs-number">3</span>, iv2 = <span class="hljs-number">5</span>;<br>    <span class="hljs-type">double</span> dv1 = <span class="hljs-number">2.8</span>, dv2 = <span class="hljs-number">8.5</span>;<br>    <br>    <span class="hljs-comment">// 调用第一个函数模板</span><br>    <span class="hljs-built_in">demoPrint</span>(iv1, iv2);<br>    <br>    <span class="hljs-comment">// 调用第一个函数模板的指定特殊</span><br>    <span class="hljs-built_in">demoPrint</span>(c1, c2);<br>    <br>    <span class="hljs-comment">// 调用第二个函数模板</span><br>    <span class="hljs-built_in">demoPrint</span>(iv1);<br>    <br>    <span class="hljs-comment">// 调用非函数模板</span><br>    <span class="hljs-built_in">demoPrint</span>(dv1, dv2);<br>    <br>    <span class="hljs-comment">// 模板不会发生隐式类型转换，所以隐式转换后调用非函数模板</span><br>    <span class="hljs-built_in">demoPrint</span>(iv1, dv2);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第十五、十六周（STL）"><a href="#第十五、十六周（STL）" class="headerlink" title="第十五、十六周（STL）"></a>第十五、十六周（STL）</h1><ul><li><p>```C++<br>  //1<br>  int main() {</p><pre><code class="hljs">  vector&lt;int&gt; vec;  for (int i = 0; i &lt; 5; i++) &#123;      vec.push_back(i + 1);  &#125;  // 1 2 3 4 5  auto it2 = vec.begin() + 2; // 3  auto it = vec.begin() + 3;  // 4  vec.insert(it2, 5); // 在3的前面插入5  // 1 2 5 3 4 5  cout &lt;&lt; *(it2) &lt;&lt; &quot; &quot; &lt;&lt; *(it) &lt;&lt; endl; // 5 3（it没有移动）</code></pre><p>  }</p><p>  //2<br>  int main() {</p><pre><code class="hljs">  vector&lt;int&gt; vec;  for (int i = 0; i &lt; 5; i++) &#123;      vec.push_back(i + 1);  &#125;  // 1 2 3 4 5  auto it2 = vec.begin() + 2; // 3  auto it = vec.begin() + 3;  // 4  vec.insert(it2, 5);     // 1 2 5 3 4 5  sort(vec.begin(), vec.end()); // 1 2 3 4 5 5  cout &lt;&lt; *(it2) &lt;&lt; &quot; &quot; &lt;&lt; *(it) &lt;&lt; endl; // 3 4（迭代器不会跟随数据移动而移动，只是指向一个位置）</code></pre><p>  }</p>  <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>- 关于stack，下列哪项描述是正确的？<br><br>A.stack是一种先进先出（FIFO）的数据结构<br><br>B.stack支持随机访问其中的元素<br><br>C.stack提供的主要操作是push、pop和top等<br><br>D.stack可以直接使用迭代器进行遍历<br><br>------<br><br>Standard Answer: C<br><br>解释：<br><br>* **A**：错误。栈是一种后进先出（LIFO）的数据结构，而不是先进先出（FIFO）。先进先出描述的是队列（`std::queue`）的行为。<br>* **B**：错误。栈不支持随机访问其内部元素。栈的操作主要集中在栈顶，你不能直接访问栈中间的元素，这是由栈的设计和目的决定的。<br>* **D**：错误。`std::stack`不提供直接使用迭代器进行遍历的能力。这是因为栈是一种只能从一端（栈顶）访问元素的容器，不支持像数组或链表那样的随机访问模式。如果需要遍历栈中的元素，你需要将元素从栈中移除，这通常不是遍历操作所期望的。<br>* 请注意：stack，queue等==是一个容器适配器，而不是一个顺序容器==。它提供了一组特定的接口（如 `push`, `pop`, `front`, `back` 等）来支持先进先出（FIFO）的数据结构模型。`std::queue`通常使用`std::deque`或`std::list`作为其底层容器实现，但它限制了对这些底层容器的直接访问，仅提供了队列操作的接口。这种设计允许`std::queue`专注于实现队列的行为，而不是容器的存储细节。<br><br>- ![image<span class="hljs-number">-20240707115553040</span>](C:/Users/<span class="hljs-number">19912</span>/AppData/Roaming/Typora/typora-user-images/image<span class="hljs-number">-20240707115553040.</span>png)<br><br>- 第二次输出的容量不会因为 `resize` 调用而减少。即使 `vector` 的大小被调整为<span class="hljs-number">4</span>，其容量仍然保持不变，因为 `resize` 减少大小不会自动减少容量。<br><br>- ![image<span class="hljs-number">-20240707120031314</span>](C:/Users/<span class="hljs-number">19912</span>/AppData/Roaming/Typora/typora-user-images/image<span class="hljs-number">-20240707120031314.</span>png)<br><br>- 这个地方很好地说明了capacity和size的区别<br><br>- ```c++<br><span class="hljs-type">int</span> <span class="hljs-built_in">main</span>() &#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">16</span>;<br>    vector&lt;<span class="hljs-type">int</span>&gt; a;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        a.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-comment">// 0~15 capacity = 16 size = 16</span><br>    cout &lt;&lt; a.<span class="hljs-built_in">capacity</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 16</span><br><br>    <span class="hljs-type">int</span> m = <span class="hljs-number">50</span>;<br>    a.<span class="hljs-built_in">reserve</span>(m);<br>    cout &lt;&lt; a.<span class="hljs-built_in">capacity</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-comment">// capacity = 50 size = 16</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        a.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-comment">// capacity = 100 size = 66</span><br>    cout &lt;&lt; a.<span class="hljs-built_in">capacity</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a.<span class="hljs-built_in">size</span>() &lt;&lt; endl;  <span class="hljs-comment">// 100 66</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>```C++<br>  int main() {</p><pre><code class="hljs">  int n = 17;  vector&lt;int&gt; a;  for (int i = 0; i &lt; n; i++) &#123;      a.push_back(i);  &#125;  // 0~16, size = 17, capacity = 32  cout &lt;&lt; a.capacity() &lt;&lt; &quot; &quot;;  a.shrink_to_fit();  // 0~16, size = 17, capacity = 17  a.push_back(n + 1);  // 0~17, size = 18, capacity = 34  cout &lt;&lt; a.capacity();  return 0;</code></pre><p>  }</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br>- ```C++<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">3</span>;<br>    vector&lt;<span class="hljs-type">int</span>&gt; a;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        a.<span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">// 1 2 3</span><br>    <span class="hljs-keyword">auto</span> res = <span class="hljs-built_in">accumulate</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), <span class="hljs-number">1</span>, [](<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j) &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(i, j); &#125;);<br>    <span class="hljs-comment">// i = i^1 = 1^1 = 1</span><br>    <span class="hljs-comment">// i = i^2 = 1^2 = 1</span><br>    <span class="hljs-comment">// i = i^3 = 1^3 = 1</span><br>    cout &lt;&lt; res &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <br>    <span class="hljs-keyword">auto</span> res = <span class="hljs-built_in">accumulate</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>(),<span class="hljs-number">1</span>,[](<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(j,i);&#125;);<br>    <span class="hljs-comment">// i = 1^i = 1^1 = 1</span><br>    <span class="hljs-comment">// i = 2^i = 2^1 = 2</span><br>    <span class="hljs-comment">// i = 3^i = 3^2 = 9</span><br>cout &lt;&lt; res &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <br>    <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123; <span class="hljs-keyword">return</span> a &gt; b; &#125;);<br>    <span class="hljs-comment">// 3 2 1</span><br>    <span class="hljs-keyword">auto</span> res2 = <span class="hljs-built_in">accumulate</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), <span class="hljs-number">1</span>, [](<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j) &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(i, j); &#125;);<br>    <span class="hljs-comment">// i = i^3 = 1^3 = 1</span><br>    <span class="hljs-comment">// i = i^2 = 1^2 = 1</span><br>    <span class="hljs-comment">// i = i^1 = 1^1 = 1</span><br>    cout &lt;&lt; res2;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>这里，<code>i</code> 是累积到目前为止的结果（初始值为 1），<code>j</code> 是当前元素的值。lambda 表达式使用 <code>pow(i, j)</code> 计算 <code>i</code> 的 <code>j</code> 次幂，这个结果将被用作下一步的累积值。</p><p>  因此，对于这个特定的 <code>accumulate</code> 调用：</p><ul><li>第一个参数 <code>i</code> 表示到目前为止的累积结果。</li><li>第二个参数 <code>j</code> 表示当前遍历到的元素值。</li></ul></li></ul></li></ul><h2 id="课堂2中有一个地方"><a href="#课堂2中有一个地方" class="headerlink" title="课堂2中有一个地方"></a>课堂2中有一个地方</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">map&lt;string, set&lt;<span class="hljs-type">int</span>&gt;&gt; students;<br><br><span class="hljs-comment">// 在我们试图寻找到。对应的set的时候出现了问题</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> c : students.<span class="hljs-built_in">at</span>(name)) &#123;<br>    sum += c;<br>    cnt++;<br>    cout &lt;&lt; c &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="错误示例-1"><a href="#错误示例-1" class="headerlink" title="错误示例 1"></a>错误示例 1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> c : students[name]) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>错误原因：<code>students</code> 是一个对 <code>const map&lt;string, set&lt;int&gt;&gt;</code> 的引用，这意味着你不能通过这个引用修改 <code>map</code> 或其内部的元素。在 <code>for</code> 循环中使用 <code>students[name]</code> 实际上会尝试在 <code>map</code> 中查找键 <code>name</code>，如果它不存在，则会插入一个新的键值对（默认构造的 <code>set&lt;int&gt;</code>）。然而，由于 <code>students</code> 是 <code>const</code> 的，这种修改（即使它实际上是因为查找不存在的键而发生的隐式插入）也是不允许的。</p><h4 id="错误示例-2"><a href="#错误示例-2" class="headerlink" title="错误示例 2"></a>错误示例 2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it = students[name].<span class="hljs-built_in">begin</span>()...; <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>错误原因：和错误示例 1 类似，这里也是尝试通过 <code>students[name]</code> 访问 <code>map</code> 中的 <code>set</code>，这同样会导致尝试修改 <code>const</code> 对象，因为当 <code>name</code> 不存在于 <code>map</code> 中时，<code>students[name]</code> 会隐式地插入一个新的 <code>set</code>。</p><h4 id="正确示例-1"><a href="#正确示例-1" class="headerlink" title="正确示例 1"></a>正确示例 1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> c : students.<span class="hljs-built_in">find</span>(name)-&gt;second) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>正确原因：<code>students.find(name)</code> 返回一个迭代器，指向键为 <code>name</code> 的元素（如果存在的话），或者指向 <code>map</code> 的 <code>end()</code>。由于它不会尝试修改 <code>map</code>，所以这在 <code>const</code> 上下文中是合法的。<code>-&gt;second</code> 用于访问找到的 <code>map</code> 元素的 <code>set</code> 成员。</p><h4 id="正确示例-2"><a href="#正确示例-2" class="headerlink" title="正确示例 2"></a>正确示例 2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> c : students.<span class="hljs-built_in">at</span>(name)) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>正确原因：<code>students.at(name)</code> 也会返回与键 <code>name</code> 关联的 <code>set</code>，但它会在找不到键时抛出一个异常（而不是像 <code>operator[]</code> 那样隐式地插入一个元素）。由于它不修改 <code>map</code>，所以在 <code>const</code> 上下文中也是安全的。但是，使用 <code>at</code> 时需要确保键确实存在，否则程序会因为未捕获的异常而终止。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在 <code>const</code> 上下文中处理容器时，你必须确保不执行任何可能修改容器的操作。这包括避免使用 <code>operator[]</code> 访问 <code>map</code> 的元素，因为它可能会隐式地插入新元素。相反，应该使用 <code>find</code> 或 <code>at</code>（但要注意处理可能的异常）。</p><h2 id="vector（序列式容器）常用函数"><a href="#vector（序列式容器）常用函数" class="headerlink" title="vector（序列式容器）常用函数"></a>vector（序列式容器）常用函数</h2><p>C++中的<code>std::vector</code>是一个动态数组，提供了一系列用于管理其存储的元素的函数。以下是一些<code>std::vector</code>的常用函数及其返回值：</p><h4 id="容量相关"><a href="#容量相关" class="headerlink" title="容量相关"></a>容量相关</h4><ul><li><strong>empty()</strong>：检查容器是否为空。返回<code>bool</code>。</li><li><strong>size()</strong>：返回容器中的元素数。返回<code>size_type</code>。</li><li><strong>max_size()</strong>：返回容器可能包含的最大元素数。返回<code>size_type</code>。</li><li><strong>capacity()</strong>：返回在不重新分配的情况下容器可以容纳的元素数量。返回<code>size_type</code>。</li><li><strong>resize(n)</strong>：调整容器的大小为<code>n</code>个元素。无返回值。</li><li><strong>reserve(n)</strong>：请求改变容器的容量至少为<code>n</code>个元素。无返回值。</li><li><strong>shrink_to_fit()</strong>：请求移除未使用的容量。无返回值。</li></ul><h4 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h4><ul><li><p><strong>clear()</strong>：移除所有元素。无返回值。</p></li><li><p><strong>insert(position, value)</strong>：在指定位置之前插入元素。==返回指向新插入的元素的迭代器。==</p></li><li><p><strong>erase(position)</strong>：移除指定位置的元素。==返回指向被移除元素之后元素的迭代器==。</p><ul><li><p>注意：erase会自动指向删除元素的下一个，所以这里注意代码规范</p></li><li><p>```C++<br>  vector<int> v = {1, 2, 3, 4, 5};<br>  // correct<br>  for (auto i = v.begin(); i != v.end(); ) {</p><pre><code class="hljs">  if(*i == 5) &#123;      v.erase(i);      cout &lt;&lt; *i &lt;&lt; endl;  &#125; else &#123;      i++;  &#125;</code></pre><p>  }</p><p>  // error<br>  for (auto i = v.begin(); i != v.end(); i++) {</p><pre><code class="hljs">  if(*i == 5) &#123;      i = v.erase(i);      cout &lt;&lt; *i &lt;&lt; endl;  &#125;</code></pre><p>  }<br>  // erase 之后 i 指向 v.end()了，然后又++，导致指针丢失，所以一直循环</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">-</span> <br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**push<span class="hljs-emphasis">_back(value)**：在容器末尾添加一个新元素。无返回值。</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"></span></span><br><span class="hljs-emphasis"><span class="hljs-strong">- **pop_</span>back()**</span>：移除容器末尾的元素。无返回值。<br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**swap(vector)**</span>：与另一个同类型的<span class="hljs-code">`vector`</span>交换内容。无返回值。<br><br><span class="hljs-section">#### 元素访问</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**operator[] (n)**</span>：访问指定位置<span class="hljs-code">`n`</span>的元素。返回引用。<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**at(n)**</span>：访问指定位置<span class="hljs-code">`n`</span>的元素，带边界检查。返回引用。<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**front()**</span>：访问第一个元素。返回引用。<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**back()**</span>：访问最后一个元素。返回引用。<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**data()**</span>：返回指向容器中第一个元素的指针。返回<span class="hljs-code">`T*`</span>。<br><br><br><br><span class="hljs-section">## map（关联式容器）常用函数</span><br><br><span class="hljs-code">`std::map`</span>是C++标准模板库（STL）中的一个关联容器，它存储键值对，并且基于键来自动排序。每个键在<span class="hljs-code">`std::map`</span>中是唯一的。以下是<span class="hljs-code">`std::map`</span>的一些常用成员函数及其返回值：<br><br><span class="hljs-section">#### 访问元素</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-code">`at(const Key&amp; key)`</span>：返回给定键对应的值的引用，如果键不存在则抛出<span class="hljs-code">`std::out_of_range`</span>异常。返回类型为<span class="hljs-code">`mapped_type&amp;`</span>。<br><span class="hljs-bullet">-</span> <span class="hljs-code">`operator[](const Key&amp; key)`</span>：访问给定键对应的值，如果键不存在，则插入一个新的键值对，其中值进行默认初始化。返回类型为<span class="hljs-code">`mapped_type&amp;`</span>。<br><br><span class="hljs-section">#### 容量和大小</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-code">`empty()`</span>：检查容器是否为空。返回<span class="hljs-code">`true`</span>如果容器为空，否则返回<span class="hljs-code">`false`</span>。<br><span class="hljs-bullet">-</span> <span class="hljs-code">`size()`</span>：返回容器中键值对的数量。返回类型为<span class="hljs-code">`size_type`</span>。<br><span class="hljs-bullet">-</span> <span class="hljs-code">`max_size()`</span>：返回容器可能包含的最大键值对数量。返回类型为<span class="hljs-code">`size_type`</span>。<br><br><span class="hljs-section">#### 修改器</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-code">`clear()`</span>：移除容器中的所有键值对。<br><span class="hljs-bullet">-</span> <span class="hljs-code">`insert(const value_type&amp; value)`</span>：插入一个键值对，如果键已存在，则不进行任何操作。返回一个<span class="hljs-code">`pair&lt;iterator,bool&gt;`</span>，其中<span class="hljs-code">`iterator`</span>指向插入的元素或已存在的元素，<span class="hljs-code">`bool`</span>表示是否插入成功。<br><span class="hljs-bullet">-</span> <span class="hljs-code">`erase(const Key&amp; key)`</span>：移除指定键的键值对。返回移除的元素数量（0或1）。<br><span class="hljs-bullet">-</span> <span class="hljs-code">`swap(map&amp; other)`</span>：与另一个<span class="hljs-code">`map`</span>交换内容。<br><br><span class="hljs-section">#### 查找</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-code">`find(const Key&amp; key)`</span>：查找给定键的元素。==如果找到，则返回一个指向该元素的迭代器==；否则，返回<span class="hljs-code">`end()`</span>。<br><span class="hljs-bullet">-</span> <span class="hljs-code">`count(const Key&amp; key)`</span>：返回具有给定键的元素数量（由于<span class="hljs-code">`map`</span>中的键是唯一的，因此返回值为0或1）。<br><br><span class="hljs-section">#### 迭代器</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-code">`begin()`</span> / <span class="hljs-code">`cbegin()`</span>：返回指向容器中第一个元素的迭代器。<br><span class="hljs-bullet">-</span> <span class="hljs-code">`end()`</span> / <span class="hljs-code">`cend()`</span>：返回指向容器末尾的迭代器。<br><br><span class="hljs-section">#### 观察者</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-code">`key_comp()`</span>：返回用于键比较的函数对象。<br><span class="hljs-bullet">-</span> <span class="hljs-code">`value_comp()`</span>：返回用于值比较的函数对象。<br><br><br><br><br><br><br><br><span class="hljs-section"># 第十七周</span><br><br><span class="hljs-bullet">-</span> 以下哪个选项描述的是C++中异常处理的正确用法？<br><br><span class="hljs-code">A.在`try`块中使用`throw`语句抛出一个整数类型的异常</span><br><span class="hljs-code"></span><br><span class="hljs-code">B.在`catch`块中捕获一个整数类型的异常，并将其赋值给一个字符串变量</span><br><span class="hljs-code"></span><br><span class="hljs-code">C.在`catch`块中捕获一个整数类型的异常，并将其赋值给一个整数变量</span><br><span class="hljs-code"></span><br><span class="hljs-code">D.在`catch`块中捕获一个整数类型的异常，并将其赋值给一个指针变量</span><br><span class="hljs-code"></span><br><span class="hljs-code">------</span><br><span class="hljs-code"></span><br><span class="hljs-code">Standard Answer: C</span><br><span class="hljs-code"></span><br><span class="hljs-code">解释：</span><br><span class="hljs-code"></span><br><span class="hljs-code">**A**：这个选项是正确的行为，但它不是关于如何**捕获**异常的描述，而是关于如何**抛出**异常，属于异常检测。因此，它不是针对问题“描述C++中异常处理的正确用法”的最佳答案。</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">-</span> 如何抛出一个标准库中的异常对象？<br><br><span class="hljs-code">A.throw new std::exception(&quot;error&quot;);</span><br><span class="hljs-code"></span><br><span class="hljs-code">B.throw std::exception(&quot;error&quot;);</span><br><span class="hljs-code"></span><br><span class="hljs-code">C.throw &quot;error&quot;;</span><br><span class="hljs-code"></span><br><span class="hljs-code">D.throw std::runtime_error(&quot;error&quot;);</span><br><span class="hljs-code"></span><br><span class="hljs-code">------</span><br><span class="hljs-code"></span><br><span class="hljs-code">Standard Answer: D</span><br><span class="hljs-code">注意：exception没有含参数的构造函数</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">-</span> 在一个try-catch块中，try抛出异常，如果catch块没有匹配到任何异常，程序将会怎样？<br><br><span class="hljs-code">A.程序正常继续执行</span><br><span class="hljs-code"></span><br><span class="hljs-code">B.程序崩溃</span><br><span class="hljs-code"></span><br><span class="hljs-code">C.抛出未捕获的异常</span><br><span class="hljs-code"></span><br><span class="hljs-code">D.返回默认值</span><br><span class="hljs-code"></span><br><span class="hljs-code">------</span><br><span class="hljs-code"></span><br><span class="hljs-code">Standard Answer: C</span><br><span class="hljs-code"></span><br><span class="hljs-code">解释：会输出</span><br><span class="hljs-code"></span><br><span class="hljs-code">```cmd</span><br><span class="hljs-code">terminate called after throwing an instance of &#x27;std::exception&#x27;</span><br><span class="hljs-code">  what():  std::exception</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>在异常处理中，<code>finally</code> 块用于：</p><p>  A.C++ 没有 <code>finally</code> 块</p><p>  B.抛出异常</p><p>  C.捕获异常</p><p>  D.定义异常</p><hr><p>  Standard Answer: A</p><p>  finally是Js里的</p></li><li><p><code>throw</code> 关键字后面可以跟随：</p><p>  A.任何类型的值</p><p>  B.只有整数</p><p>  C.只有字符串</p><p>  D.只有自定义异常类型</p><hr><p>  Standard Answer: A</p></li></ul><h1 id="第十八周"><a href="#第十八周" class="headerlink" title="第十八周"></a>第十八周</h1><ul><li><p>在C++中，异常机制被用来解决哪种类型的程序错误？</p><p>  A.语法错误</p><p>  B.逻辑错误</p><p>  C.运行时错误</p><hr><p>  Standard Answer: C</p></li><li><p>下列关于异常，叙述错误的是（）</p><p>  A.编译错误属于异常，可以抛出</p><p>  B.运行错误属于异常</p><p>  C.硬件故障也可当异常抛出</p><p>  D.只要是人认为的异常都可被抛出</p><hr><p>  Standard Answer: A</p><p>  解释：</p><ul><li><strong>A. 编译错误属于异常，可以抛出</strong>：这个叙述是错误的。编译错误是在编译时发生的错误，它们是由编译器检测到的，通常是因为代码不符合语言的语法规则、类型不匹配、缺少必要的定义等原因。编译错误必须在编译阶段被修正，程序才能成功编译成可执行文件。编译错误不能被抛出或捕获，因为它们在程序运行之前就必须被解决。</li><li><strong>B. 运行错误属于异常</strong>：这个叙述是正确的。运行时错误是程序执行过程中发生的错误，如除以零、访问无效的内存地址、文件不存在等。这些错误可以通过异常处理机制被抛出和捕获，以便程序可以优雅地处理错误情况。</li><li><strong>C. 硬件故障也可当异常抛出</strong>：在某种程度上，这个叙述可以被认为是正确的。虽然硬件故障本身不是通过C++标准异常机制直接抛出的，但是硬件故障（如磁盘读写错误、网络连接中断等）可以通过操作系统或硬件抽象层检测到，并最终通过软件异常或错误码的形式暴露给应用程序。应用程序可以捕获这些软件异常或检查错误码来响应硬件故障。</li><li><strong>D. 只要是人认为的异常都可被抛出</strong>：这个叙述是正确的，但需要一定的上下文理解。在C++中，几乎任何类型的对象都可以作为异常被抛出，这意味着程序员可以根据需要定义和抛出自定义的异常类型。因此，从这个角度来看，只要是开发者认为需要特殊处理的情况，都可以通过抛出异常来处理。</li></ul></li><li><p>当程序遇到一个==没有== <code>noexcept</code> 修饰符的函数，会假设这个函数可能抛出异常，导致额外的代码执行，使用 <code>noexcept</code> 可以优化程序性能。<br>  该说法是否正确？</p><p>  A.正确</p><p>  B.错误</p><hr><p>  Standard Answer: A</p><p>  注意是没有</p></li><li><p>【多选】下列关于异常传播的说法正确的是（）</p><p>  A.当在try块内部发生异常时，程序会立即退出当前的try块，并开始搜索匹配的catch块来处理该异常。</p><p>  B.如果在try块中没有找到匹配的catch块，异常会传播到调用栈的上一层，即调用该try块的函数或方法中</p><p>  C.过程会继续进行，直到找到匹配的catch块或者异常传播到程序的顶层（通常是main函数外部），此时程序会调用std::terminate并终止执行。</p><hr><p>  Standard Answer: A, B, C</p></li><li><p>下列哪项最能描述C++中的异常？</p><p>  A.一种错误的检测机制</p><p>  B.一种错误的处理方法</p><p>  C.一种处理程序中意外情况的方法</p><p>  D.一种调试工具</p><hr><p>  Standard Answer: C</p></li><li><p>在以下代码中，哪一行是重新抛出异常的正确方法？<br>  try {<br>  throw std::runtime_error(“error”);<br>  } catch (std::runtime_error&amp; e) {<br>  // 哪行是重新抛出异常？<br>  }</p><p>  A.throw e;</p><p>  B.throw std::runtime_error(e);</p><p>  C.throw;</p><p>  D.rethrow;</p><hr><p>  Standard Answer: C</p></li><li><p>下列关于自定义异常的描述哪个是正确的？</p><p>  A.自定义异常必须继承自 <code>std::exception</code></p><p>  B.自定义异常必须包含一个 <code>what()</code> 方法</p><p>  C.自定义异常不能包含成员变量</p><p>  D.自定义异常类可以不继承任何标准异常类</p><hr><p>  Standard Answer: D</p></li><li><p>在对象的构造函数中抛出异常时，以下哪项描述是正确的？</p><p>  A.对象构造完成后抛出异常</p><p>  B.对象不会被创建，析构函数不会被调用</p><p>  C.对象会被部分创建，析构函数会被调用以清理已分配的资源</p><p>  D.构造函数不能抛出异常</p><hr><p>  Standard Answer: B</p></li></ul><h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><ul><li><p>流</p><ul><li><strong>流</strong>是一种对<strong>连接</strong>的抽象</li><li><strong>流入的量</strong>等于<strong>流出的量</strong></li></ul></li><li><p>缓存区</p><ul><li><strong>缓冲区</strong>的作用？</li><li>从命令行向程序输入数据时，实际上是输入到缓冲区里</li><li>一旦按Enter回车键，缓冲区里的数据才流入程序</li><li>在按回车键之前，我们可以修改缓冲区（即当前行）的数据</li><li>但一旦按回车键后，我们就不能修改当前行数据了</li><li>程序输出时，同样是输出到缓冲区里</li></ul></li><li><p>C++的文件读写方法</p><ul><li><p><strong>ofstream</strong>: 写操作（输出）的文件类 (由<strong>ostream</strong>继承而来)</p></li><li><p><strong>ifstream</strong>: 读操作（输入）的文件类(由<strong>istream</strong>继承而来)</p></li><li><p><strong>fstream</strong>: 可同时读写操作的文件类 (由<strong>iostream</strong>继承而来)</p></li><li><p>用法和cin、cout完全一样！</p></li><li><pre><code class="lang-C++">  /*样例*/  #include &lt;fstream&gt;  #include &lt;iostream&gt;  using namespace std;  // 实现功能：将source.txt中的内容去掉空格后写入result.txt  int main() &#123;      ifstream infile(&quot;source.txt&quot;);      // jkadshf ah fa dfhas dfahsdf ashdf a sdf ads      ofstream outfile(&quot;result.txt&quot;);      while (!infile.eof()) &#123;  // eof()函数用于判断是否到达文件末尾          char tmp;          infile &gt;&gt; tmp;  // 从文件中读取一个字符          if (tmp != &#39; &#39;) &#123;              outfile &lt;&lt; tmp;  // 将读取的字符写入文件          &#125;      &#125;      infile.close();      outfile.close();      // jkadshfahfadfhasdfahsdfashdfasdfsdfads      return 0;  &#125;</code></pre></li><li><p><strong>ios::out</strong>  文件以输出(写)方式打开</p></li><li><p><strong>ios::in</strong>   文件以输入(读)方式打开</p></li><li><p><strong>ios::ate</strong>  初始位置：文件尾</p></li><li><p><strong>ios::app</strong>  所有输出附加在文件末尾</p></li><li><p><strong>ios::trunc</strong>  如果文件已存在则先删除该文件</p></li><li><p><strong>ios::binary</strong>  二进制方式</p></li><li><p>可以用 | 来放入多个参数</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Learnings</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学</title>
    <link href="/2025/01/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    <url>/2025/01/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h1 id="第一章：略"><a href="#第一章：略" class="headerlink" title="第一章：略"></a>第一章：略</h1><h1 id="第二章：命题逻辑"><a href="#第二章：命题逻辑" class="headerlink" title="第二章：命题逻辑"></a>第二章：命题逻辑</h1><h2 id="自然语言符号化"><a href="#自然语言符号化" class="headerlink" title="自然语言符号化"></a>自然语言符号化</h2><p><img src="image.jpg" alt=""></p><p>什么叫逆命题、否命题和逆否命题</p><p><img src="image_1.jpg" alt=""></p><h2 id="基本等值式"><a href="#基本等值式" class="headerlink" title="基本等值式"></a>基本等值式</h2><p>什么叫做等值式</p><p>称命题逻辑公式A和B逻辑等值(logically equivalent)，简称等值，记为A=B，如果<br>对任意真值赋值函数$\sigma:Var→2$，A和B在下的真值都相同，即都有$\sigma(A）=\sigma(B)$</p><ul><li><p>如何证明呢？</p><ul><li><p>证明方法</p><p>  <img src="image_2.jpg" alt=""></p></li><li><p>非形式化</p><p>  <img src="image_3.jpg" alt=""></p></li></ul></li><li><p>模式与实例</p><p>  <img src="image_4.jpg" alt=""></p></li></ul><p><img src="image_5.jpg" alt=""></p><p><img src="image_6.jpg" alt=""></p><ul><li><p>题型：</p><ul><li><p>判断命题逻辑公式类型（永真式、矛盾式、可满足式）</p><ul><li><p>利用等值演算来证明逻辑等值式</p><p>  <img src="image_7.jpg" alt=""></p></li></ul></li></ul></li></ul><h2 id="析取、合取范式"><a href="#析取、合取范式" class="headerlink" title="析取、合取范式"></a>析取、合取范式</h2><p><img src="image_8.jpg" alt=""></p><ul><li>==单个的文字可以看做是一个合取式或一个析取式，单个的合取式可看做是析取范式，单个的析取式也可看做是合取范式==</li><li><p>易错！</p><p>  <img src="image_9.jpg" alt=""></p></li></ul><p>注意：上例子只给出了一个或两个的合、析取范式，但实际上也可以有多个，不要没见过大蛇o屎</p><p>范式中==只出现与、或、非运算，且否定只出现在命题变量的前面==</p><ul><li><p>题型：给出一个公式，让你求合取、析取范式</p><ul><li>求与公式逻辑等值的析取范式<br>  先通过蕴涵等值式和双蕴涵等值式转换为不含→和↔的公式<br>  然后用德摩尔根律将所有否定运算符移到命题变量的前面<br>  最后用分配律将合取运算符放到括号里的文字间，析取运算符放到括号外的合取式之间  </li></ul></li></ul><pre><code class="hljs">![](image_10.jpg)![](image_11.jpg)</code></pre><h2 id="极小项、极大项"><a href="#极小项、极大项" class="headerlink" title="极小项、极大项"></a>极小项、极大项</h2><p>合取会变小，析取会变大</p><p><img src="image_12.jpg" alt=""></p><p>超级易错点：极大项是成假赋值</p><p>也就是说，命名的下标是通过成真和成假赋值的二进制值来确定的</p><p>只是我们在写出对应最大项公式的时候，要反过来</p><p><img src="image_13.jpg" alt=""></p><p><img src="image_14.jpg" alt=""></p><ul><li><p>题型</p><ul><li>给一个公式求主合取范式和主析取范式</li><li><p>方法：</p><ul><li>真值表<ul><li>画出真值表，1的就是$m_i$，0的就是$M_i$</li><li>如果要写出具体的字母，对m成真赋值，对M成假赋值</li></ul></li><li><p>等值演算法</p><ul><li>先求出主析取范式，遇到不是的，拓展（与一个1，然后用排中律，再用分配律）</li><li>然后成真赋值</li><li>得到主析取范式（m表示）</li><li>不是最小项的就是极大项</li><li><p>例子</p><p><img src="image_15.jpg" alt=""></p><p><img src="image_16.jpg" alt=""></p></li></ul></li></ul></li></ul></li></ul><h2 id="推理系统"><a href="#推理系统" class="headerlink" title="推理系统"></a>推理系统</h2><p>首先需要注意的是，推理有效与否与公式真假没有关系</p><p><img src="image_17.jpg" alt=""></p><p>题型一：形式化证明</p><p><img src="image_18.jpg" alt=""></p><p>附加前提法</p><p><img src="image_19.jpg" alt=""></p><p>归谬法</p><p><img src="image_20.jpg" alt=""></p><p>题型二：自然语言的证明</p><p><img src="image_21.jpg" alt=""></p><h2 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h2><h3 id="置换和替换"><a href="#置换和替换" class="headerlink" title="置换和替换"></a>置换和替换</h3><p><img src="image_22.jpg" alt=""></p><p><img src="image_23.jpg" alt=""></p><p>替换就是完全替代，所以要全部换掉。置换弱一点</p><p><img src="image_24.jpg" alt=""></p><h1 id="第三章：一阶逻辑"><a href="#第三章：一阶逻辑" class="headerlink" title="第三章：一阶逻辑"></a>第三章：一阶逻辑</h1><h2 id="谓词逻辑命题符号化"><a href="#谓词逻辑命题符号化" class="headerlink" title="谓词逻辑命题符号化"></a>谓词逻辑命题符号化</h2><p><img src="image_25.jpg" alt=""></p><h2 id="全称量词和存在量词"><a href="#全称量词和存在量词" class="headerlink" title="全称量词和存在量词"></a>全称量词和存在量词</h2><p>易错点！！</p><p><img src="image_26.jpg" alt=""></p><h3 id="谓词逻辑命题符号化-1"><a href="#谓词逻辑命题符号化-1" class="headerlink" title="谓词逻辑命题符号化"></a>谓词逻辑命题符号化</h3><p><img src="image_27.jpg" alt=""></p><h3 id="谓词逻辑公式及其解释"><a href="#谓词逻辑公式及其解释" class="headerlink" title="谓词逻辑公式及其解释"></a>谓词逻辑公式及其解释</h3><p><img src="image_28.jpg" alt=""></p><p>更多的，只要自由出现了一次，就是自由出现的</p><p><img src="image_29.jpg" alt=""></p><h3 id="改名"><a href="#改名" class="headerlink" title="改名"></a>改名</h3><ol><li>约束变量改名</li></ol><p><img src="image_30.jpg" alt=""></p><p>注意：不能换约束出现的，如H中的x</p><ol><li>自由变量改名</li></ol><p><img src="image_31.jpg" alt=""></p><h3 id="量词消去和真值"><a href="#量词消去和真值" class="headerlink" title="量词消去和真值"></a>量词消去和真值</h3><p>求公式在一定解释下的真值</p><p><img src="image_32.jpg" alt=""></p><p><img src="image_33.jpg" alt=""></p><h2 id="一阶逻辑的等值演算"><a href="#一阶逻辑的等值演算" class="headerlink" title="一阶逻辑的等值演算"></a>一阶逻辑的等值演算</h2><p><img src="image_34.jpg" alt=""></p><p><img src="image_35.jpg" alt=""></p><h2 id="前束范式"><a href="#前束范式" class="headerlink" title="前束范式"></a>前束范式</h2><p><img src="image_36.jpg" alt=""></p><h2 id="替换实例"><a href="#替换实例" class="headerlink" title="替换实例"></a>替换实例</h2><p><img src="image_37.jpg" alt=""></p><p>为什么单独放出来呢，是因为我觉得：</p><p>他其实就是告诉你<br>命题逻辑公式那些等值式<br>全都可以替换<br>也就是告诉你，全都可以继续用<br>从而把第二章一下子联系起来了  </p><h2 id="推理系统-1"><a href="#推理系统-1" class="headerlink" title="推理系统"></a>推理系统</h2><p>推理系统和命题逻辑的类似</p><h3 id="量词引入和消除"><a href="#量词引入和消除" class="headerlink" title="量词引入和消除"></a>量词引入和消除</h3><p><img src="image_38.jpg" alt=""></p><p>易错点！！！</p><ol><li>量词例化规则只能针对辖域是整个公式的量词使用</li></ol><p><img src="image_39.jpg" alt=""></p><ol><li>必须先使用存在例化规则引入个体常量c，然后使用全称例化规则时可使用个体常量c</li></ol><p><img src="image_40.jpg" alt=""></p><h1 id="第五章：集合"><a href="#第五章：集合" class="headerlink" title="第五章：集合"></a>第五章：集合</h1><ul><li>181定义集合的方法</li><li>183重要的 定义集合 的定义</li><li>187交的定义</li></ul><p><img src="image_41.jpg" alt=""></p><p><img src="image_42.jpg" alt=""></p><ul><li>集合并保持子集关系</li></ul><p><img src="image_43.jpg" alt=""></p><p><img src="image_44.jpg" alt=""></p><ul><li>192差和补</li></ul><p><img src="image_45.jpg" alt=""></p><p><img src="image_46.jpg" alt=""></p><ul><li>一些定理</li></ul><p><img src="image_47.jpg" alt=""></p><h2 id="集合运算及其元素定义法"><a href="#集合运算及其元素定义法" class="headerlink" title="集合运算及其元素定义法"></a>集合运算及其元素定义法</h2><p><img src="image_48.jpg" alt=""></p><h2 id="幂集"><a href="#幂集" class="headerlink" title="幂集"></a>幂集</h2><ul><li>195空集的幂集相关的易错点、保持子集关系</li></ul><p><img src="image_49.jpg" alt=""></p><p><img src="image_50.jpg" alt=""></p><p><img src="image_51.jpg" alt=""></p><ul><li><p>证明的方法</p><ul><li>通过定义证明</li><li>通过集合等式</li><li><p>子集的包含关系</p><p><img src="image_52.jpg" alt=""></p></li></ul></li></ul><h2 id="集合的容斥原理"><a href="#集合的容斥原理" class="headerlink" title="集合的容斥原理"></a>集合的容斥原理</h2><p><img src="image_53.jpg" alt=""></p><h2 id="基本集合等式表"><a href="#基本集合等式表" class="headerlink" title="==基本集合等式表=="></a>==基本集合等式表==</h2><p><img src="image_54.jpg" alt=""></p><p>记住以下这些可以加快选择题做题的速度</p><p><img src="image_55.jpg" alt=""></p><p>证明题的时候，优先从有减号的一边入手，将减号化成交</p><ul><li>==203集合运算与子集关系==</li></ul><h1 id="第六章：关系"><a href="#第六章：关系" class="headerlink" title="第六章：关系"></a>第六章：关系</h1><ul><li>211有序对笛卡尔积的定义（用笛卡尔积的定义来证明简单的集合等式）</li></ul><h2 id="特殊的关系"><a href="#特殊的关系" class="headerlink" title="特殊的关系"></a>特殊的关系</h2><p><img src="image_56.jpg" alt=""></p><ul><li>212关系的定义</li><li>214关系图和关系矩阵</li></ul><h2 id="关系的运算"><a href="#关系的运算" class="headerlink" title="关系的运算"></a>关系的运算</h2><ul><li>关系逆的定义，关系复合的定义</li></ul><p><img src="image_57.jpg" alt=""></p><p><img src="image_58.jpg" alt=""></p><p>注意记住符合的定义，本质上是在找中介</p><p><img src="image_59.jpg" alt=""></p><ul><li>218关系的运算，关系矩阵的运算</li><li><p>219关系逆的基本性质</p><ul><li>逆的逆等于自身</li><li>关系逆保持子集关系</li><li>逆和与或是可交换的（谁先谁后）</li><li><p>关系逆和关系复合交换次序，括号内要反转</p><p><img src="image_60.jpg" alt=""></p><p>什么叫做保持子集关系呢，就是</p><p><img src="image_61.jpg" alt=""></p><p>这在许多证明中很有用</p><p><img src="image_62.jpg" alt=""></p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><img src="image_63.jpg" alt=""></p></li></ul></li><li><p>220-221关系复合的基本性质</p><ul><li>交换律❌</li><li>结合律✅</li><li>恒等关系是单位元</li><li>关系复合保持子集关系</li><li>关系复合对并分配，对与不分配（本质上是存在量词对析取分配而对合取不分配）<ul><li>复合在外，或在括号内</li></ul></li></ul></li></ul><h2 id="关系的性质"><a href="#关系的性质" class="headerlink" title="关系的性质"></a>关系的性质</h2><ul><li>要明确定义：元素定义法，还有性质：集合运算法</li><li>自反<ul><li>223自反的定义</li><li>224上面，易错点，自反与非自反的互斥但非对立关系</li><li>224下面定理6.8定理的充分必要条件（集合运算）</li></ul></li><li>对称<ul><li>225对称的定义</li><li>226下面定理6.9对称的充分必要条件（集合运算）</li></ul></li><li>传递<ul><li>228传递的定义</li><li>229下面定理6.10传递的充分必要条件（集合运算 ）</li></ul></li><li><p>汇总</p><ul><li><p>231关系定义和性质</p><p><img src="image_64.jpg" alt=""></p><p>注意如果只有一个元素，那么前件为假，蕴含式为真，所以只含有一个元素的关系也是传递的</p></li><li><p>231关系运算与关系性质之间的联系</p></li></ul></li><li><p>做题技巧，用关系图来判断关系的性质</p><ul><li>画出一个关系的关系图，如果每个点都有自回路，那么就是自反的</li><li>如果每两个点之间，要么没有直接通路，要么有双向直接通路，那么就是对称的</li><li><p>如果能形成自闭环，那么是传递的</p><p><img src="image_65.jpg" alt=""></p></li></ul></li><li><p>易错点——下面的都是✔</p><ol><li>一个==非空==关系如果是自反的，那它一定不是反自反的</li><li><p>存在既不是自反，也不是反自反的关系——存在某些<x, x>成立，也有些不成立</p><p> <img src="image_66.jpg" alt=""></p></li><li><p>存在既是对称也是反对称的关系——ΔA</p></li><li>存在既不是对称也不是反对称的关系</li><li>恒等关系除了不是反自反的，其他都是</li></ol></li><li><strong>给出参与运算的关系都有列对应的性质，那么运算的结果关系是否也有列对应的性质</strong></li></ul><div class="table-container"><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>关系运算</strong></td><td><strong>自反性</strong></td><td><strong>反自反性</strong></td><td><strong>对称性</strong></td><td><strong>反对称性</strong></td><td><strong>传递性</strong></td></tr><tr><td>==<strong>关系逆运算R^(-1)</strong>==</td><td><strong>是</strong></td><td><strong>是</strong></td><td><strong>是</strong></td><td><strong>是</strong></td><td><strong>是</strong></td></tr><tr><td>==<strong>集合交运算R∩S</strong>==</td><td><strong>是</strong></td><td><strong>是</strong></td><td><strong>是</strong></td><td><strong>是</strong></td><td><strong>是</strong></td></tr><tr><td><strong>集合并运算R∪S</strong></td><td><strong>是</strong></td><td><strong>是</strong></td><td><strong>是</strong></td><td><strong>否</strong></td><td><strong>否</strong></td></tr><tr><td><strong>集合差运算R-S</strong></td><td><strong>否</strong></td><td><strong>是</strong></td><td><strong>是</strong></td><td><strong>是</strong></td><td><strong>否</strong></td></tr><tr><td><strong>关系复合运算R∘S</strong></td><td><strong>是</strong></td><td><strong>否</strong></td><td><strong>否</strong></td><td><strong>否</strong></td><td><strong>否</strong></td></tr></tbody></table></div><p>可以分别用元素法和集合法证明a</p><h2 id="关系的闭包"><a href="#关系的闭包" class="headerlink" title="关系的闭包"></a>关系的闭包</h2><ul><li>所谓闭包，就是要用最少的元素补充我们的集合，使其满足基本的性质（自反，对称，传递）</li></ul><p><img src="image_67.jpg" alt=""></p><ul><li><p>闭包的定义和性质</p><ul><li>233关系闭包的定义</li><li>234定理，若R为XX，则XX闭包是自己</li><li><p>234定理，<strong>闭包保持子集关系</strong></p><p><img src="image_68.jpg" alt=""></p><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><p><img src="image_69.jpg" alt=""></p><p>ABD都在考察同一件事情，也就是定义里的“包含R”</p><p>C的话考察的是闭包的最小性</p></li></ul></li></ul><h3 id="闭包的运算"><a href="#闭包的运算" class="headerlink" title="闭包的运算"></a>闭包的运算</h3><ul><li>236定理：如何补充以变成自反和对称闭包</li><li>237关系的幂运算</li><li>237定理：传递如何补充成为闭包</li></ul><div class="table-container"><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>关系代数中的概念</strong></td><td><strong>图论中的概念</strong></td></tr><tr><td>二元关系 R</td><td>有向图的边集 E</td></tr><tr><td>关系的传递性</td><td>图中节点间的路径可达性</td></tr><tr><td>关系幂 Rn</td><td>从一个节点到另一个节点的长度为 <em>n</em> 的路径</td></tr><tr><td>传递闭包 R∗</td><td>图的传递闭包（所有可能路径）</td></tr></tbody></table></div><ul><li>如何补充以变成传递闭包<ul><li>通过逻辑积计算关系矩阵<ul><li>求幂</li><li>所有幂的并</li></ul></li><li>Warshall算法<ul><li>每次画出第x行为1的列和第x列为1的行，然后这些线的交点置为一</li></ul></li></ul></li><li><p>等价关系</p><ul><li>242定义<ul><li>满足自反、对称、传递</li></ul></li><li><p>等价类</p><ul><li>244定义<ul><li>记作$[a]_R$</li></ul></li><li>性质<ul><li>总有$a∈[a]_R$</li></ul></li><li><p>理解</p><ul><li>就他妈求连通分量，画出图来，圈就行了</li><li>也可以直接看跟x有关系的所有值，这些值构成的集合就是x的等价类</li><li>$[a]_R= [b]_R当且仅当⟨a, b⟩∈R$</li><li><p>以一个模7同余为例子</p><p><img src="image_70.jpg" alt=""></p></li><li><p>我们可以将整数集拆分成这样子7组</p></li><li>每一组里面的元素，都是彼此之间满足模7同余的</li><li>任意不同组别的元素都是不满足模7同余的</li><li>这样的一组就叫一个等价类</li><li>所有的等价类构成这个全集的一个划分</li><li>把每个等价类作为一个元素，那么这个集合就是👇</li></ul></li></ul></li><li>商集<ul><li>所有等价类的集合$A/R$</li></ul></li></ul></li><li><p>偏序关系</p><ul><li>247定义<ul><li>满足自反、反对称、传递</li></ul></li><li>偏序集<ul><li><strong>偏序集</strong>（Partially Ordered Set，简称 <strong>poset</strong>）描述了一个集合中元素之间的一种“部分”顺序关系。与完全排序的集合（例如自然数集合上的大小关系）不同，偏序集中的元素==不一定能够比较大小==，也就是说，==有些元素==之间没有明确的顺序关系。</li><li>可比<ul><li>虽然是用&lt;符号来表示，但其实表达的还是满足偏序关系</li></ul></li><li>全序（链）<ul><li>全都可比</li></ul></li><li>偏序<ul><li>部分不可比</li></ul></li></ul></li><li>覆盖<ul><li>$a&lt;b$且不存在c使得$a &lt; c, c &lt; b$（两个不等式都要满足才行）</li><li>也就是紧紧挨着，中间不再有更多的元素满足偏序关系</li></ul></li><li>哈斯图 （用来找极大元和极小元）<ul><li>去掉自环</li><li>只保留覆盖的边（无第三边）</li><li>从下往上</li></ul></li><li><p>最大元、最小元</p><ul><li>与所有元素都可比才行，不一定存在</li><li>就是哈斯图上，连接所有分叉的唯一最高点</li><li><p>例子</p><p><img src="image_71.jpg" alt=""></p><p>12和8、10、9、11都不可比，所以不存在最大元</p></li></ul></li><li><p>极大元、极小元</p><ul><li>没有元素可以a更大/小了</li><li>可能有元素和它不可比</li><li>可能也不存在，如整数集$\Z$，四个都不存在</li><li><p>例子—同上</p><ul><li>8、12、10、9、11、7都是极大元</li><li><p>就是哈希图上面没有分叉了的</p><p><img src="image_72.jpg" alt=""></p></li></ul></li></ul></li><li><p>上界、下界</p><ul><li>对象是S的子集</li><li>上界b不一定在S中</li><li>但是b&gt;S中任意元素，==都要能够比较==才行</li><li><p>可以有很多个</p><p><img src="image_73.jpg" alt=""></p></li></ul></li><li><p>上确界、下确界</p><ul><li>最小的上界</li><li>最大的下界</li><li>如果对于全集<ul><li>上确界就是最大元</li><li>下确界就是最小元</li></ul></li><li>对于空集<ul><li>上确界就是最小元</li><li>下确界就是最大元</li></ul></li></ul></li></ul></li></ul><p><img src="image_74.jpg" alt=""></p><h2 id="关系证明题"><a href="#关系证明题" class="headerlink" title="关系证明题"></a>关系证明题</h2><p>第一步考虑能不能用集合语言来叙述，因为集合语言是一阶逻辑语言更高级的抽象</p><p>如果集合语言行不通，不要傻傻发呆，可以尝试符号语言，老老实实抓住定义去做</p><h1 id="第七章-函数"><a href="#第七章-函数" class="headerlink" title="第七章 函数"></a>第七章 函数</h1><h2 id="260函数的定义"><a href="#260函数的定义" class="headerlink" title="260函数的定义"></a>260函数的定义</h2><p><img src="image_75.jpg" alt=""></p><ul><li>注意是对==所有==的A中的元素，B中都有==唯一==的元素与其对应</li><li>260定义域、陪域的定义</li></ul><p><img src="image_76.jpg" alt=""></p><ul><li>260像集和逆像集的定义<ul><li>像集就是给出定义域的子集求值域</li><li>逆像集就是给出值域范围反求定义域</li></ul></li><li><p>262性质</p><ul><li><p>$f$ 保持子集关系$S\subseteq U→f(S)\subseteq f(U)$</p><p>  <img src="image_77.jpg" alt=""></p></li><li><p>函数与集合交可以交换次序</p><p>  <img src="image_78.jpg" alt=""></p></li></ul></li></ul><h2 id="单函数、满函数、双函数的定义"><a href="#单函数、满函数、双函数的定义" class="headerlink" title="单函数、满函数、双函数的定义"></a>单函数、满函数、双函数的定义</h2><ul><li>单函数<ul><li>B中每个元素==至多==有一个A中的元素与其对应</li><li>可以没有对应</li><li>做题的时候带入$f(x)=f(y$) 看有无 $x=y$</li></ul></li><li>满函数<ul><li>B中每个元素==至少==有一个A中的元素与其对应</li><li>必须要囊括值域的每一个元素</li></ul></li><li>双函数<ul><li>既是单函数也是满函数</li><li>B中每个元素有==唯一==一个A中的元素与其对应</li></ul></li></ul><p><img src="image_79.jpg" alt=""></p><ul><li>266函数的复合<ul><li>其实就是关系的复合</li><li>保持子集关系</li><li>保持单满性</li><li>满足结合律</li></ul></li></ul><p><img src="image_80.jpg" alt=""></p><ul><li><p>267逆函数的定义</p><ul><li><p>注意前提是双函数</p><p><img src="image_81.jpg" alt=""></p></li></ul></li><li><p>集合基数的基本</p><ul><li>这一部分不会出题考试</li><li>但是面试的时候可能会问到</li></ul></li></ul><h2 id="函数增长和算法效率分析"><a href="#函数增长和算法效率分析" class="headerlink" title="函数增长和算法效率分析"></a>函数增长和算法效率分析</h2><ul><li>281定义大O记号<ul><li>存在k和C当 $x&gt;k$ 有$|f(x)| ≤ C|g(x)|$</li><li>这一部分出题：证明某个函数是$O(x^3)$而不是$O(x^2)$</li><li>只需要找到对应的k和C即可</li></ul></li><li>大O记号的传递性</li><li>O的加法定理<ul><li>$f_1(x) + f_2(x) \in O(max(g_1, g_2))$</li></ul></li><li>O的乘法定理<ul><li>$f_1(x). f_2(x) \in O(g_1 . g_2)$</li></ul></li><li>284定义大$\Omega$记号<ul><li>$存在k和C当x&gt;k有|f(x)| ≥ C|g(x)|$</li></ul></li><li><p>O的除法定理</p><ul><li><p>$f_1(x)是O(g_1), f_2是\Omega (g_2) 那么f_1/f_2 是O(g_1/g_2)$</p><p><img src="image_82.jpg" alt=""></p></li></ul></li></ul><h1 id="第八章：计数组合"><a href="#第八章：计数组合" class="headerlink" title="第八章：计数组合"></a>第八章：计数组合</h1><h2 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h2><ul><li>302加法原理乘法原理<ul><li>独立性<ul><li>无论前面选择什么，后面的==方法数==（注意仅仅是数字，究竟是什么方法不care）==不变==</li><li>也可以理解成，如果可以==直接用乘法原理==的，那就是有独立性</li></ul></li><li>相关性<ul><li>前面的选择就对后面有影响</li><li>易错<ul><li>可以同时有相关性和独立性</li><li>不相关→独立</li><li>独立 !→ 不相关</li></ul></li></ul></li><li>305减法原理<ul><li>正难则反</li></ul></li><li>306除法原理（不是重点）<ul><li>必须保证是满射</li><li>例子：圆桌排列、苯环取代</li></ul></li><li>306一一对应原理<ul><li>提供了一种通过建立两个集合之间的一一对应关系来计算集合大小的方法。具体来说，如果两个集合之间存在一个一一对应（双射）关系，那么这两个集合的元素个数必然相等。</li></ul></li><li>308容斥原理</li><li>集合差计数公式</li><li>两集合容斥原理</li><li>三集合容斥原理</li><li>鸽笼原理<ul><li>很容易指导什么是鸽子</li><li>但是什么是鸽笼才是最重要的</li><li>[[组合计数|组合计数]] 例题</li><li>不会是考试重点</li></ul></li></ul></li></ul><p><img src="image_83.jpg" alt=""></p><h2 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h2><p><img src="6f056eb8f5784342d97d809a03696762.jpg" alt=""></p><p><img src="image_84.jpg" alt=""></p><ul><li>==不允许重复的==</li><li>316全排列<ul><li>从n个里选择 r 排列，与顺序有关</li><li>记作$P_n^r$</li></ul></li><li>318组合数<ul><li>从n个里选择 r 与顺序无关</li></ul></li><li>318证明方法<ul><li>组合证明<ul><li>举一个针对同一集合的不同计数例子</li><li>通常可以举例：学生选学生会，学生会选主席、长度为n的字符串</li></ul></li><li>代数证明<ul><li>通过数学归纳法和组合数计算公式证明</li></ul></li></ul></li><li>技巧<ul><li>至少有一名男生——全集减去一名男生都没有的</li><li>奇数偶数、是否重复，注意判断</li></ul></li><li>323二项式定理<ul><li>$(x + 1)^n = \Sigma_{i= 0}^n(^n_i)x^i$</li><li>令$x=1$可得所有项之和</li><li>令$x=-1$，结合上面，得到奇偶项关系</li></ul></li><li><p>325帕斯卡等式</p><ul><li>$\binom{n}{k} = \binom{n-1}{k-1} + \binom{n-1}{k}$</li><li><p><img src="image_85.jpg" alt=""></p></li><li><p>在用数学归纳法证明一些等式，归纳递推的时候很好用</p></li></ul></li><li>326经常用到的公式</li><li>==328允许重复的排列组合==</li><li>328$每类物体分别有m<em>1、m_2…m_n个的n类物体的重复度为m_1+m_2+…+m_n=r的排列数为\\binom{r}{m_1}\binom{r-m_1}{m_2}…\binom{r - m_1 - m_2 - …-m</em>{n-1}}{m_n} = \frac{r!}{m_1!m_2!…m_n!}$<ul><li>理解1：多次分步来选择</li><li>理解2：先全排列，即$r！$然后每个类里面都是无关次序的，所以分别除以他们的阶乘</li></ul></li><li>331物体个数不限的n类物体允许重复地选择r个的方案数——$\binom{n+r-1}{r}$<ul><li>理解：<ul><li>首先可以理解为不定方程的解</li><li>和高中的隔板法很像，但是高中的隔板法至少要有一个</li><li>而这里可以一个都没有，所以要把隔板也考虑占一个位置</li><li>理解1：二进制串，用0来分隔开</li><li>理解2：不定方程，那就相当于用n - 1个加号隔开r个数</li></ul></li><li>trick<ul><li>x的≥限定<ul><li>如：苹果至少要a个， 香蕉至少b个</li><li>令$x<code>= x + a$，那么$x</code>&gt;0$，只需要转化为物体个数不限的n类物体允许重复地选择$r - a - b$个的方案数</li></ul></li><li>r的 ≤ 限定<ul><li>例如：$x1+x2+x3+x4 ≤ 15$</li><li>等价于$x1+x2+x3+x4+x5 = 15$</li><li>添加一个未知数即可</li></ul></li><li>x的≤限定<ul><li>例如：$x1+x2+x3+x4 ≤ 15 且 x1≤ 5, x2≤ 3$</li><li>方法：容斥原理</li><li>定义事件：<ul><li>U为没有限制$\binom{4+15-1}{15}$</li><li>$P1为x1 ≥ 6\ r= r- 6\ N(P1) = \binom{4+9-1}{9}$</li><li>$P2为x2 ≥ 4\ r= r-4\ N(P2) = \binom{4+11-1}{11}$</li><li>$P1P2为x1≥6,x2 ≥ 4\ r= r-10\ N(P1P2) = \binom{4+5-1}{5}$</li></ul></li><li>$由容斥原理\N(\overline{P1}\overline{P2}) = U - N(P1∪ P2) = U - N(P1) - N(P2) + N(P1P2)$</li></ul></li></ul></li></ul></li><li>==338排列组合生成算法==<ul><li>339在字典序下覆盖a的全排列<ul><li>例如63285741</li><li>从右往左找到第一个不是递增的，即5</li><li>与他右边的换 5 和 7 换</li><li>剩下的升序排列（保证字典序）</li><li>得到63287145</li></ul></li><li>341给定集合S求S的r组合<ul><li>由于组合的无序性，所以要求生成的数组严格单调递增</li><li>例如S={1,2,…,8} a = 13478</li><li>从右往左找到第一个可以变大的数字（8、7不能了，但是4可以变大为5、6）</li><li>将这个数字变为能变大的最小值，即5</li><li>后面同理</li><li>13567</li><li>继续</li><li>13568</li><li>13578</li></ul></li></ul></li><li><p>==342递推关系式==</p><ul><li><p>递推关系：必须由==前面==的项推出来</p><p>  <img src="90043ac875f2974e6f1963c6d91291c6.jpg" alt=""></p></li><li><p>通项公式</p></li><li>封闭公式解<ul><li>$a_n$能使用==不包含序列中任意项==的通项公式表示</li><li>给出一个即可，不明确初始特解的情况下可能有很多封闭公式解</li></ul></li><li>分类的递推，类似于动态规划，一定要相信它满足条件</li><li>注意最后写出递归式的时候说明n的范围，特殊情况，如n=0、1要单独说明</li><li>注意分情况讨论，要充分，然后再加起来的时候合并</li></ul></li><li><p>==349线性递推关系式求解==</p><ul><li><p>常系数线性齐次递推关系式</p><p>  <img src="image_86.jpg" alt=""></p><p>  <img src="image_87.jpg" alt=""></p><p>  $\sum <em>{i = 1}^{t} (r_i^n.\sum</em>{j = 0}^{m<em>i - 1}\beta</em>{ij}n^j)$</p></li><li><p>常系数线性非齐次递推关系式</p><ul><li><p>解的形式定理——这个定理给出了解是由齐次解+一个特解的结构组成的，所以关键是要找到一个特解</p><p>  <img src="image_88.jpg" alt=""></p></li><li><p>特解构造定理</p><p>  <img src="image_89.jpg" alt=""></p></li><li><p>总结：做题步骤</p><ol><li>求解伴随齐次特征多项式得到特征根r</li><li>将F(n)写成上图标黄的形式</li><li>确定最高次数和s</li><li>根据s是否是特征根分情况讨论得到特解</li><li>将特解带入递推式</li><li>用特殊值带入求解方程</li></ol></li></ul></li><li><p>==分治算法及其效率分析==</p><ul><li><p>主定理</p><p>  <img src="image_90.jpg" alt=""></p></li></ul></li></ul></li></ul><h1 id="第九章：图与树"><a href="#第九章：图与树" class="headerlink" title="第九章：图与树"></a>第九章：图与树</h1><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>362无向图的定义</li><li>363有向图的定义<ul><li>有向图的==基图==是不考虑方向得到的无向图</li></ul></li><li>364<ul><li>n阶图：顶点数为n</li><li>平凡图：顶点数为1</li><li>空图：顶点数为0</li><li>零图：边数为0</li></ul></li><li><p>364环、简单图的定义</p><p>  <img src="image_91.jpg" alt=""></p></li><li><p>365度的定义</p><ul><li>注意记号$d(G)$</li><li>出度是$d^+(G)$入度是$d^-(G)$</li><li><p>==图与简单图中对于顶点度的要求==</p><p><img src="image_92.jpg" alt=""></p></li></ul></li></ul><h3 id="365握手定理"><a href="#365握手定理" class="headerlink" title="==365握手定理=="></a>==365握手定理==</h3><ul><li>总度数为顶点数的两倍，入度等于出度等于顶点数</li></ul><p><img src="image_93.jpg" alt=""></p><ul><li>这在后面的证明中非常重要，常常矛盾的情况是用握手定理推出来的</li><li><p>推论：总度数为偶数</p><ul><li><p>例题：</p><p><img src="image_94.jpg" alt=""></p></li></ul></li><li><p>推论：任何图的奇度顶点个数是偶数</p></li><li>==推论：简单图的最大度====$\Delta(G)≤ n - 1$==</li><li><p>366正则图和完全图的定义</p><ul><li>k正则图：任意顶点的度数都是k</li><li><p>n完全图：任意两个顶点之间都有边</p><ul><li>边数就是$\frac{n(n - 1)}{2}$</li></ul><p><img src="image_95.jpg" alt=""></p></li></ul></li><li><p>366二部图的定义</p><ul><li><p>二部图</p><p>  <img src="image_96.jpg" alt=""></p><p>  其实很像一个神经网络的全连接层</p></li></ul></li><li><p>367生成子图和导出子图的定义</p><ul><li>生成子图：指从原始图中选取部分<strong>边</strong>，但保留所有<strong>顶点</strong>，形成的子图。</li><li>导出子图：从原始图中选取部分<strong>顶点</strong>，并保留这些顶点之间在原始图中存在的所有<strong>边</strong>，形成的子图。</li></ul></li><li>367<ul><li>删除顶点集：从图中移除指定的一组顶点及其相关联的边。</li><li>删除边集：从图中移除指定的一组边，同时==保留所有顶点==。</li><li>删除子图：顶点集不变，但是删除边</li></ul></li></ul><h3 id="368图的连通性"><a href="#368图的连通性" class="headerlink" title="==368图的连通性=="></a>==368图的连通性==</h3><ul><li>通路、回路、简单（有向）通路、简单（有向）回路的定义</li><li>回路、初级回路（没有重点）、简单回路（没有重边）</li></ul><p><img src="image_97.jpg" alt=""></p><p><img src="image_98.jpg" alt=""></p><p>长度为n的通路、回路条数计算</p><p><img src="image_99.jpg" alt=""></p><ul><li><p>370</p><ul><li><p>可达与连通分支</p><p>  <img src="image_100.jpg" alt=""></p></li><li><p>类似于握手定理，下面的引理也可以作为一个反证法的矛盾出发点</p><p>  <img src="image_101.jpg" alt=""></p></li><li><p>证明方法</p><p>  <img src="image_102.jpg" alt=""></p></li><li><p>以上面定理为例子</p><p>  <img src="image_103.jpg" alt=""></p><p>  <img src="image_104.jpg" alt=""></p></li></ul></li><li><p>371<strong>点割集</strong>和<strong>边割集——</strong>用于描述破坏图连通性的方法</p><ul><li><strong>点割集：</strong>一组顶点的集合，若将这些顶点（少一个都不行）及其关联的边移除后，图会被分割成多个连通分量（或不再连通）。</li><li>割点：如果点割集只有一个顶点，这个点就叫做割点</li><li><strong>边割集：</strong>一组边的集合，若将这些边（少一条都不行）移除后，图会被分割成多个连通分量（或不再连通）。</li><li>割边（桥）：如果边割集只包含一条边，这条边就叫做割边或桥</li><li>点连通度：最少需要删除多少个顶点才能使图不连通或者成为平凡图——顶点数最少的点割集的顶点数</li><li>边连通度：最少需要删除多少条边才能使图不连通——边数最少的边割集的边数</li><li><p>例子：</p><p>  <img src="image_105.jpg" alt=""></p></li></ul></li><li><p>372强连通和单项连通</p><ul><li>强连通：在有向图中，任意两个顶点之间都存在双向可达的路径</li><li>单向连通：在有向图中，从某个顶点出发可以到达其他所有顶点，但不一定存在返回路径</li><li>强连通分量：有向图中的最大强连通子图</li></ul></li></ul><h3 id="欧拉图"><a href="#欧拉图" class="headerlink" title="欧拉图"></a>欧拉图</h3><ul><li>一定要注意！！欧拉图是==对边做讨论==</li></ul><p><img src="image_106.jpg" alt=""></p><ul><li>补充：无向连通图G只有两个度数为奇数的顶点，则G存在欧拉通路，则G是半欧拉图</li><li>注意：==欧拉图没有强调是简单图！！==例如一个图如果是欧拉图，然后你添上一条重边，必然会使得他有两个顶点的度变成奇数，那就变成了欧拉通路，半欧拉图。</li></ul><h3 id="哈密顿图"><a href="#哈密顿图" class="headerlink" title="哈密顿图"></a>哈密顿图</h3><ul><li>一定要注意！！哈密顿图是==对顶点做讨论==</li></ul><p><img src="image_107.jpg" alt=""></p><ul><li><strong>澄清哈密顿回路的定义</strong><ol><li>哈密顿回路的定义是：<ul><li>路径必须经过图中的<strong>所有顶点一次且仅一次</strong>。</li></ul></li><li>由于回路的起点和终点是同一个顶点，因此==起点会在路径中出现====<strong>两次</strong>==，这是合法的。这并不违背哈密顿回路的定义。</li></ol></li></ul><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><ul><li><p>无向树</p><ul><li><p>无向树没有根这个说法，只包含内部节点和叶子：内部节点就是度为≥2；叶子就是度为1</p><p><img src="image_108.jpg" alt=""></p><p><img src="image_109.jpg" alt=""></p></li><li><p>无向树的每一条边都是桥（删掉就不连通了）</p></li><li>无向树是简单图<ul><li>对于3的证明，用反证法+握手定理注意啊手动阀</li><li>对于3，如果是又向根树，是不成立的</li></ul></li><li>==注意：数据结构中树是有向树，其节点的度的定义是孩子的数量，但是这的度的定义是无向图中的度的定义==</li></ul></li><li>无向树的证明，遇到度数的，往握手定理靠</li></ul><p><img src="image_110.jpg" alt=""></p><ul><li><p>有向树</p><ul><li><p>基图是无向树</p><p><img src="image_111.jpg" alt=""></p><p>+有向树内部只含有两种节点，内部和叶子</p></li></ul></li><li><p>根树</p><ul><li>有向树有且仅有一个顶点的入度为0</li><li><p>m元树</p><p><img src="image_112.jpg" alt=""></p><p><img src="image_113.jpg" alt=""></p></li></ul></li><li><p>典型的题型：利用握手定理和树中顶点与边数的关系来列方程求解</p><ul><li><p>哈夫曼树</p><ul><li><p>例题</p><p>  <img src="image_114.jpg" alt=""></p></li></ul></li></ul></li></ul><h2 id="平面图"><a href="#平面图" class="headerlink" title="==平面图=="></a>==平面图==</h2><ul><li><p>定义</p><p>  <img src="image_115.jpg" alt=""></p><p>  <img src="image_116.jpg" alt=""></p></li><li><p>握手定理</p><p>  <img src="image_117.jpg" alt=""></p></li><li><p>欧拉公式（用正方体来记忆 ）</p><p>  <img src="image_118.jpg" alt=""></p></li><li><p>平面图的边数上界</p><p>  <img src="image_119.jpg" alt=""></p><p>  <img src="image_120.jpg" alt=""></p><p>  <img src="image_121.jpg" alt=""></p><p>  应用</p><p>  <img src="image_122.jpg" alt=""></p></li></ul><h1 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h1><h2 id="题型："><a href="#题型：" class="headerlink" title="题型："></a>题型：</h2><p>单选 15*2 30分</p><p>论证题：16 10分</p><p>计算题：17-20 34分</p><p>证明题：21-23 26分</p>]]></content>
    
    
    <categories>
      
      <category>Learnings</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学分析(下)</title>
    <link href="/2024/07/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90-%E4%B8%8B/"/>
    <url>/2024/07/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90-%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="数学分析（下）"><a href="#数学分析（下）" class="headerlink" title="数学分析（下）"></a>数学分析（下）</h1><h2 id="广义积分"><a href="#广义积分" class="headerlink" title="广义积分"></a><strong>广义积分</strong></h2><p>P46</p><h3 id="无穷限"><a href="#无穷限" class="headerlink" title="无穷限"></a><strong>无穷限</strong></h3><ul><li>定义为定积分的极限</li><li>积分第二中值定理P54</li><li>判断敛散性<ul><li>可以积分的直接积分来观察极限是否存在</li><li>柯西收敛</li><li>比较判别法（记得绝对值）</li><li>与$1/x^p$比较（p&gt;1 收敛，$p \leq 1$发散）</li><li>迪利克雷判别法P57<ul><li>被积函数=$f(x)*g(x)$</li><li>f 积分有界</li><li>g单调趋于零</li></ul></li><li>阿贝尔判别法<ul><li>被积函数=$f(x)*g(x)$</li><li>f收敛</li><li>g单调有界</li></ul></li></ul></li></ul><h3 id="瑕积分"><a href="#瑕积分" class="headerlink" title="瑕积分"></a><strong>瑕积分</strong></h3><p>P61</p><ul><li>判断敛散性<ul><li>柯西收敛</li><li>比较判别法</li><li>与$1/(x-a)^p$比较（$p&lt;1$ 收敛，$p \geq 1$发散）</li><li>迪利克雷判别法<ul><li>被积函数=$f(x)*g(x)$</li><li>f 积分有界</li><li>g单调趋于零</li></ul></li><li>阿贝尔判别法<ul><li>被积函数=$f(x)*g(x)$</li><li>f收敛</li><li>g单调有界</li></ul></li></ul></li></ul><h2 id="函数项级数"><a href="#函数项级数" class="headerlink" title="函数项级数"></a><strong>函数项级数</strong></h2><p>P70</p><ul><li>函数序列<ul><li>一串函数</li></ul></li><li>函数项级数<ul><li>函数序列对于每个确定x组成的数列</li></ul></li><li>极限函数<ul><li>$\lim_{n \to \infty} f_n(x) = f(x)$</li></ul></li><li>部分和序列<ul><li>部分和</li><li>是n的函数</li></ul></li><li>和函数<ul><li>部分和序列的极限</li></ul></li><li>一致收敛<ul><li>级数极限=极限函数在x的取值</li><li>放心地交换极限次序$（x \to x_0 / n \to +\infty）$</li><li>放心地交换积分和极限的次序</li><li>放心地交换极限与微商的顺序</li></ul></li><li>判断敛散性（部分和的思想）<ul><li>可以积分的直接积分</li><li>达朗贝尔判别法<ul><li>前后两项相除</li></ul></li><li>柯西收敛</li><li>维尔斯特拉斯判别法（M判别法）<ul><li>$|u_k(x)| \leq M_k$</li><li>$M_k$收敛</li><li>迪利克雷判别法<ul><li>$a_n b_n$</li><li>a一致有界</li><li>b单调趋于零</li></ul></li><li>阿贝尔判别法<ul><li>$a_n b_n$</li><li>a一致收敛</li><li>b一致有界，每个b都单调</li></ul></li></ul></li></ul></li><li>分析性质<ul><li>逐项可积<ul><li>求和和积分可交换</li></ul></li><li>逐项求导</li><li>做题：求和函数<ol><li>求收敛域2~3‘</li><li>看模板</li><li>有分母先导后积，无分母先积后导</li><li>写出和函数，记得结合实际情况把收敛域写出来</li></ol></li></ul></li></ul><h2 id="幂级数"><a href="#幂级数" class="headerlink" title="幂级数"></a><strong>幂级数</strong></h2><p>P96</p><ul><li>阿贝尔引理<ul><li>收敛点之内收敛</li><li>发散点之外发散</li></ul></li><li>收敛半径唯一</li><li>求收敛半径<ul><li>相邻系数之比的极限<ul><li>达朗贝尔判别法</li><li>求极限确定r</li><li>考虑边界</li></ul></li></ul></li><li>阿贝尔第二引理P101</li><li>幂级数的和函数S在收敛区域内<ul><li>逐项微商</li><li>逐项积分</li></ul></li><li>函数的幂级数展开</li></ul><h2 id="傅里叶级数"><a href="#傅里叶级数" class="headerlink" title="傅里叶级数"></a><strong>傅里叶级数</strong></h2><p>P114</p><ul><li>三角函数系<ul><li>正交性（任意两个不同函数的乘积在[-\pi, \pi]积分为0）</li></ul></li><li>收敛到傅里叶级数的条件<ul><li>逐段可微</li></ul></li><li>计算傅里叶系数(考题基本上都来自这里P142)<ul><li>对称的2\pi区间上的<ul><li>判断奇偶——简化</li><li>$a<em>0 = \frac{1}{\pi} \int</em>{-\pi}^{\pi} f(x) \, dx$</li><li>$a<em>n = \frac{1}{\pi} \int</em>{-\pi}^{\pi} f(x) \cos(nx) \, dx$</li><li>$b<em>n = \frac{1}{\pi} \int</em>{-\pi}^{\pi} f(x) \sin(nx) \, dx$</li><li>$f(x) = a<em>0 + \sum</em>{n=1}^{\infty} (a_n \cos(nx) + b_n \sin(nx))$</li></ul></li><li>非对称的<ul><li>周期为2L——变量代换x = \frac{l}{x}t</li><li>记住延拓完之后，要把x代入回原来的f(x)当中</li><li>没有周期<ul><li>奇延拓</li><li>偶延拓</li></ul></li></ul></li></ul></li></ul><h2 id="平面点集与多元函数"><a href="#平面点集与多元函数" class="headerlink" title="平面点集与多元函数"></a><strong>平面点集与多元函数</strong></h2><p>P158</p><h3 id="平面点集"><a href="#平面点集" class="headerlink" title="平面点集"></a><strong>平面点集</strong></h3><ul><li>概念明确<ul><li>内点：存在邻域在E内</li><li>外点：存在邻域不在E内</li><li>边界点：任意邻域都有E的点也有E外的点</li><li>聚点：任意空心邻域有E内的点</li></ul></li><li>关系<ul><li>内点一定是聚点</li><li>边界点可能是聚点，也可能是孤立点</li></ul></li><li>常见平面点集<ul><li>开集：所有点都是内点</li><li>闭集：所有聚点都属于E</li><li>连通集：任意两点用有线条直线段相连</li><li>（开）区域：连通的开集</li><li>闭区域：连通的闭集</li></ul></li><li>关系<ul><li>区域总是开集，反之不一定</li><li>闭区域总是闭集，反之不一定</li></ul></li><li>（威尔斯特拉斯）W.T定理<ul><li>如果点列{(P_n)}有界，那必有收敛子列</li><li>证明：连续用两次实数的致密性定理来证明（注意下标）</li><li>$P<em>n = (x_n, y_n)有界，x_n, y_n都有界。x_n有收敛子列x</em>{n<em>k} \rightarrow x_0，那么y</em>{n<em>k}也有界，有收敛子列y</em>{n<em>{k_l}} \rightarrow y_0，那么x</em>{n<em>{k_l}}是x</em>{n_k}的子列，也收敛于x_0。所以有收敛子列$</li></ul></li><li>矩形套定理<ul><li>一直缩小，最后所有的矩形交于一点</li><li>证明：对两个坐标方向分别用区间套定理</li></ul></li><li>有限覆盖定理<ul><li>如果有界闭集F被无限个开区间的集合\sum所覆盖，那么必可从\sum中选取有限个开区间所组成的\sum^*也覆盖F。</li><li>将无限转化为有限</li></ul></li></ul><h3 id="二元函数"><a href="#二元函数" class="headerlink" title="二元函数"></a><strong>二元函数</strong></h3><ul><li>二元函数的极限问题（全面极限）<ul><li>证明的时候要用极限的定义来证明</li><li>可以用三角换元，但是要满足保证在所有方向上趋近于原点（角度要取完）</li><li>证明极限不存在只需要找一个特例</li></ul></li><li>累次极限<ul><li>全面极限和两个累次极限的<strong>存在性</strong>并无必然联系</li><li>但当它们存在的时候，极限值有一定的关系<ul><li>如果三个都存在，那么三者必相等</li><li>如果两个累次极限存在但是不相等，那么全面极限必不存在（沿着特殊方向的极限值不同）</li></ul></li></ul></li><li>二元函数的连续性<ul><li>对于一个二元函数，如果对于任意固定的y是x的一元连续函数，同理，对于任意固定的x是y的一元连续函数，并<strong>不能推出这个二元函数是连续</strong>的</li><li>讨论连续性的问题<ul><li>对于一般点，用定义，初等函数直接带入极限值</li><li>对于特殊点（没有定义的点），则要计算在该点的极限，然后看看要不要补充定义</li></ul></li><li>复合函数的连续性（同时连续才算连续）</li></ul></li><li><p>有界闭区域上的连续函数</p><ul><li>有界<ul><li>用反证法，假设无界</li></ul></li><li>有最大值和最小值</li><li><p>一致连续</p><ol><li>设D是一个有界闭集，f(x,y)是定义在D上的二元连续函数。</li><li>根据有界闭集的性质，我们知道D上的任意点列都有收敛的子列，并且子列的极限点仍然在D</li><li><p>$假设f(x,y)在D上不一致连续，那么存在\epsilon_0 &gt; 0，以及点列{(x_n, y_n)}和{(x_n’, y_n’)}（n=1,2,3,\ldots），满足$</p><p>$\lim_{n \to \infty} \sqrt{(x_n - x_n’)^2 + (y_n - y_n’)^2} = 0，但$</p><p>$|f(x_n, y_n) - f(x_n’, y_n’)| \geq \epsilon_0。$</p></li><li><p>$由于D是有界闭集，点列{(x<em>n, y_n)}和{(x_n’, y_n’)}都有收敛的子列。设{(x</em>{n<em>k}, y</em>{n<em>k})}和{(x</em>{n<em>k}’, y</em>{n_k}’)}是收敛的子列，且它们的极限分别为(x_0, y_0)和(x_0’, y_0’)。$</p></li><li><p>根据极限的性质，我们有</p><p>$\lim<em>{k \to \infty} \sqrt{(x</em>{n<em>k} - x</em>{n<em>k}’)^2 + (y</em>{n<em>k} - y</em>{n_k}’)^2} = 0，即(x_0, y_0) = (x_0’, y_0’)。$</p></li><li><p>由于f(x,y)在D上连续，根据连续函数的性质，我们有</p><p>$\lim<em>{k \to \infty} f(x</em>{n<em>k}, y</em>{n<em>k}) = f(x_0, y_0) = f(x_0’, y_0’) = \lim</em>{k \to \infty} f(x<em>{n_k}’, y</em>{n_k}’)。$</p></li><li><p>$但是这与第三步中的结论|f(x<em>n, y_n) - f(x_n’, y_n’)| \geq \epsilon_0矛盾，因为当k足够大时，|f(x</em>{n<em>k}, y</em>{n<em>k}) - f(x</em>{n<em>k}’, y</em>{n_k}’)|应该小于\epsilon_0。$</p></li><li>因此，我们的假设——f(x,y)在D上不一致连续——是错误的，所以f(x,y)在D上一致连续。</li></ol></li><li>介值定理</li></ul></li></ul><h2 id="偏导数与全微分"><a href="#偏导数与全微分" class="headerlink" title="偏导数与全微分"></a><strong>偏导数与全微分</strong></h2><p>P180</p><h3 id="偏导数"><a href="#偏导数" class="headerlink" title="偏导数"></a><strong>偏导数</strong></h3><p>本质：把曲面取一个截面变成曲线，来研究曲线在某个方向的导数</p><p>注意：</p><ol><li>与一元函数可导就连续不同，二元函数偏导数存在不能完全反映曲面性质</li><li>与一元函数可导即可微不同，二元函数必须偏导数连续，才可微</li></ol><h3 id="全微分"><a href="#全微分" class="headerlink" title="全微分"></a><strong>全微分</strong></h3><p>$\Delta z = f(x_0 + \Delta x, y_0 + \Delta y) - f(x_0, y_0) = A \Delta x + B \Delta y + o(\rho)$</p><p>$dz = f_x(x_0, y_0) \Delta x + f_y(x_0, y_0) \Delta y$</p><p>二元函数的全微分是函数全该变量的线性主部（这后面在证明的时候有很大用，看变化量与全微分之差是不是距离的无穷小量）</p><p>dz其实是关于x, y, dx, dy的四元线性函数</p><p>而四者是独立的</p><p>所以在求二阶全微分的时候，有d(dx) = d(dy) = 0</p><ul><li>题型：判断函数在某一点的可微性<ol><li>用定理：偏导数存在且在这一点连续</li><li>用定义：（用定义）先求出偏导数，注意区分x_0, \Delta x，用全变化减去微分，看是不是o(\rho)</li></ol></li><li>题型：求近似值<ol><li>确定x_0, y_0, \Delta x, \Delta y</li><li>$根据微分的定义，写出f(x_0 + \Delta x, y_0 + \Delta y) = f(x_0, y_0) + f_x(x_0, y_0) \Delta x + f_y(x_0, y_0) \Delta y$</li></ol></li></ul><h3 id="高阶全微分"><a href="#高阶全微分" class="headerlink" title="高阶全微分"></a><strong>高阶全微分</strong></h3><p>画出树状图</p><p>若f<em>{xy}与f</em>{yx}都连续则相等</p><p>$d^n u = \left( \frac{\partial}{\partial x} dx + \frac{\partial}{\partial y} dy \right)^n f(x, y)$</p><h3 id="复合函数与隐函数微分"><a href="#复合函数与隐函数微分" class="headerlink" title="复合函数与隐函数微分"></a><strong>复合函数与隐函数微分</strong></h3><ul><li>题型：直接考察求导<ul><li>画出树状图，用<strong>链式法则</strong>，注意区分乘法的求导法则</li><li>$du = \frac{\partial u}{\partial s} ds + \frac{\partial u}{\partial t} dt = \left( \frac{\partial f}{\partial x} \frac{\partial x}{\partial s} + \frac{\partial f}{\partial y} \frac{\partial y}{\partial s} \right) ds + \left( \frac{\partial f}{\partial x} \frac{\partial x}{\partial t} + \frac{\partial f}{\partial y} \frac{\partial y}{\partial t} \right) dt$</li></ul></li><li>题型：复合函数<ul><li>$例如F(xy, y+z, xz) = 0，求\frac{\partial z}{\partial x}, \frac{\partial z}{\partial y}$<ol><li>假设确定隐函数z = z(x, y)</li><li>方程两边对x和y分别求偏导</li><li>联立方程</li></ol></li></ul></li></ul><h3 id="几何应用"><a href="#几何应用" class="headerlink" title="几何应用"></a><strong>几何应用</strong></h3><h3 id="求切向量法向量"><a href="#求切向量法向量" class="headerlink" title="求切向量法向量"></a>求切向量法向量</h3><ul><li>曲线<ul><li>曲线只有切向量和法平面</li><li>$切向量\overrightarrow{\gamma} = (x’(t_0), y’(t_0), z’(t_0)) = (A, B, C)$</li><li>$如果曲线由两个曲面F, G的交线来定义，那么\overrightarrow{\gamma} = \left( \frac{\partial(F, G)}{\partial(y, z)}, \frac{\partial(F, G)}{\partial(z, x)}, \frac{\partial(F, G)}{\partial(x, y)} \right)$</li></ul></li><li>曲面<ul><li>曲面只有切平面和法向量</li><li>$法向量\overrightarrow{n} = (F_x, F_y, F_z) = (A, B, C)$</li><li>特别的，如果z = f(x, y)那么</li></ul></li><li>共同的部分<ul><li>由一个向量求所在直线方程和垂直的平面方程</li><li>$直线方程（自由度为1，所以要两个方程来限定）：\frac{x - x_0}{A} = \frac{y - y_0}{B} = \frac{z - z_0}{C}$</li><li>$平面方程（自由度为2，所以只需要一个方程）：A(x - x_0) + B(y - y_0) + C(z - z_0) = 0$</li></ul></li></ul><h3 id="方向导数"><a href="#方向导数" class="headerlink" title="方向导数"></a>方向导数</h3><p>$沿着l方向的方向余弦l_0 = (\cos \alpha, \cos \beta, \cos \gamma)$</p><p>$梯度\nabla = \left( \frac{\partial f}{\partial x}, \frac{\partial f}{\partial y}, \frac{\partial f}{\partial z} \right)$</p><p>方向导数就是给梯度赋权，权值就是方向余弦</p><p>$所以\frac{\partial f}{\partial l} = \nabla \cdot (\cos \alpha, \cos \beta, \cos \gamma)$</p><h3 id="泰勒展开"><a href="#泰勒展开" class="headerlink" title="泰勒展开"></a>泰勒展开</h3><p>$f(x<em>0 + \Delta x, y_0 + \Delta y) = \sum</em>{k=0}^n \frac{1}{k!} \left( \frac{\partial}{\partial x} dx + \frac{\partial}{\partial y} dy \right)^k f(x_0, y_0) + R$</p><h2 id="隐函数存在定理"><a href="#隐函数存在定理" class="headerlink" title="隐函数存在定理"></a><strong>隐函数存在定理</strong></h2><p>P225</p><h3 id="单个方程的形式"><a href="#单个方程的形式" class="headerlink" title="单个方程的形式"></a><strong>单个方程的形式</strong></h3><p>$如果F(x, y)在某一点P_0(x_0, y_0)附近满足$</p><ol><li>$F_x, F_y 连续$</li><li>$F(P_0) = 0 \space (通常为初始条件)$</li><li>$F_y(P_0) \ne 0 那么在P_0点附近存在唯一的隐函数y = f(x) 且在x_0邻域连续 且有连续的导数$</li></ol><h3 id="方程组的形式"><a href="#方程组的形式" class="headerlink" title="方程组的形式"></a><strong>方程组的形式</strong></h3><p>$F(x, y, u, v), G(x, y, u, v)满足$</p><ol><li>对各变元有一阶连续偏导,</li><li>$F(P_0) = G(P_0) = 0,$</li><li>$J|_{P_0} = \frac{\partial(F, G)}{\partial(u, v)} \ne 0 那么在P_0附近唯一确定连续的隐函数u = u(x, y), v = v(x, y) 且有连续的导数$</li></ol><ul><li>$\frac{\partial(x, y)}{\partial(u, v)} \cdot \frac{\partial(u, v)}{\partial(x, y)} = 1$</li></ul><h2 id="极值与条件极值"><a href="#极值与条件极值" class="headerlink" title="极值与条件极值"></a><strong>极值与条件极值</strong></h2><p>P241</p><h3 id="多元函数的极值"><a href="#多元函数的极值" class="headerlink" title="多元函数的极值"></a><strong>多元函数的极值</strong></h3><ul><li>稳定点——所有偏导数都为0</li><li>极值的<strong>必要条件</strong><ul><li>所有偏导数都为0</li><li>注意不是充分条件（z = xy在(0, 0)偏导数都为0，但是在该点附近都有异号的函数值）</li></ul></li><li>D的定义：<ul><li>$a<em>{11} = f</em>{xx}(x<em>0, y_0), \space a</em>{12} = f<em>{xy}(x_0, y_0), \space a</em>{22} = f<em>{yy}(x_0, y_0), \space \ D = \left| \begin{matrix} a</em>{11} &amp; a<em>{12} \ a</em>{12} &amp; a_{22} \end{matrix} \right|$</li></ul></li><li>极值的判别（考察）<ul><li>$（在该点的领域内有二阶连续偏导数）f_x(x_0, y_0) = f_y(x_0, y_0) = 0$<ul><li>$若D &gt; 0，当a<em>{11}(a</em>{22}) &gt; 0 取得极小值；当a<em>{11}(a</em>{22}) &lt; 0 取得极大值。$</li><li>若D &lt; 0 不是极值点</li><li>若D = 0 不能判断</li></ul></li><li>证明：用泰勒公式</li><li>做题：<ol><li>求一阶偏导，令偏导为0得到稳定点（注意在求解方程的时候，可能会得到两个未知数之间的关系，这个时候一定要带回方程里完全解出来）</li><li>求二阶偏导，算D</li><li>看a_{11}的符号</li></ol></li></ul></li></ul><h3 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a><strong>最小二乘法</strong></h3><p>本质上就是给了一个误差函数，求这个误差函数的极小值</p><ul><li>$f(a, b) = \sum_{i=1}^{n} (ax_i + b - y_i)^2$<ol><li>对他求一阶导，令一阶导数为0，得到方程组</li><li>用克拉默法则解方程（注意a和b才是未知数）</li></ol></li></ul><h3 id="多元函数的最值"><a href="#多元函数的最值" class="headerlink" title="多元函数的最值"></a><strong>多元函数的最值</strong></h3><p>一句话：可能的最值点包括可能的极值点和边界点</p><p>所以先求出极值点，以及边界值，然后做对比即可</p><h3 id="条件极值"><a href="#条件极值" class="headerlink" title="条件极值"></a><strong>条件极值</strong></h3><ul><li>什么叫条件极值<ul><li>在整个空间里的叫做无条件极值</li><li>有方程约束范围的叫做条件极值<ul><li>每个（方程）条件就相当于一个隐函数，可以带入消元</li><li>思想：化为无条件极值求解</li></ul></li></ul></li></ul><h3 id="拉格朗日乘数法"><a href="#拉格朗日乘数法" class="headerlink" title="拉格朗日乘数法"></a><strong>拉格朗日乘数法</strong></h3><p>对于上面提到的条件极值</p><p>$假设f(x, y, u, v)在约束条件 \begin{cases} F(x, y, u, v) = 0,\ G(x, y, u, v) = 0\ (F ,G不重) \end{cases} \space在P_0(x_0, y_0, u_0, v_0)点取极值\ 那么存在唯一的\lambda_1, \space \lambda_2, \space \s.t. \begin{cases} L_x(P_0) = L_y(P_0) = L_u(P_0) = L_v(P_0) = 0,\ F(P_0) = G(P_0) = 0 \end{cases}\ 其中L = f + \lambda_1 F + \lambda_2 G$</p><ul><li>做题<ol><li>写出拉格朗日函数</li><li>求导，令导函数为0</li><li>解方程得到稳定点</li><li>通过极值的判断条件来判断<ol><li>求二阶导数（求之前要用隐函数存在定理确定导数存在）</li><li>D</li><li>a_{11}</li></ol></li></ol></li></ul><h2 id="含参变量的积分"><a href="#含参变量的积分" class="headerlink" title="含参变量的积分"></a><strong>含参变量的积分</strong></h2><p>P270</p><h3 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h3><ul><li>首先我们要理解什么叫含参变量的积分</li></ul><p>$每一个[a, \ b]上固定的x_0,\ 对应的\int_c^d f(x_0, y) dy都是一个[数]\ 当x变动的时候，就定义了一个[函数]\I(x) = \int_c^d f(x, y) dy, x \in [a, b],\ 参变量为x$</p><ul><li>性质<ul><li>f 连续，I 就连续</li><li>放心交换积分和极限</li><li>只要偏导数连续就放心求导I’(x) = \int_c^d f_x(x, y) dy</li></ul></li><li>题型：给你一个含参变量的函数，要求把其他变量消掉<ul><li>大胆对内求导</li><li>把关于y的积分算出来（消掉y）</li><li>求x的积分</li><li>确定常数C</li></ul></li><li>题型：要求主动引入参变量的积分（压轴题）<ul><li>引入参变量\alpha \in [0, 1]，原来的I = I(1)，最好保证I(0) = 0（有利于后面构造积分）</li><li>对内求导数</li><li>把关于x的积分算出来</li><li>$I = I(1) = I(1) - I(0) = \int_0^1 I’(\alpha) d\alpha$</li><li>求出积分即可</li></ul></li></ul><h3 id="积分上下限也依赖于参数x-P265"><a href="#积分上下限也依赖于参数x-P265" class="headerlink" title="积分上下限也依赖于参数x P265"></a>积分上下限也依赖于参数x P265</h3><p>$I(x, u) = \int_c^u f(x, y) dy$</p><p>请尤其关注这个式子</p><p>$\frac{d (\int_c^x f(t) dt)}{dx} = f(x)\ 变上限积分的导数为原函数$</p><ul><li>性质：<ul><li>f连续则I连续，放心求导，导函数存在且连续</li><li>不用担心连续问题：</li><li>$f在[a, b] \times [c, d]连续,且c(x), d(x)也在[a, b]连续,有导数, c &lt; c(x), d(x) &lt; d,\ F(x) = \int<em>{c(x)}^{d(x)} f(x, y) dy 连续\ 且F’(x) = \int</em>{c(x)}^{d(x)} f_x(x, y) dy + f(x, d(x)) d’(x) + f(x, c(x)) c’(x)\链式法则(分别对x，c，d求导) + (17) + 复合函数求导$</li></ul></li><li>做题：求正常求不出来的积分的导数</li><li>性质：放心积分交换次序<ul><li>$\int_a^b dx \int_c^d f(x, y) dy = \int_c^d dy \int_a^b f(x, y) dx$</li></ul></li></ul><h2 id="重积分"><a href="#重积分" class="headerlink" title="重积分"></a><strong>重积分</strong></h2><p>P292</p><h3 id="三重积分交换次序"><a href="#三重积分交换次序" class="headerlink" title="三重积分交换次序"></a><strong>三重积分交换次序</strong></h3><ul><li>$对于\int_a^b dx \int_c^d dy \int_e^f f(x, y, z) dz的两种理解$<ul><li>$\int<em>a^b [\iint</em>{D_z} dx dy] dz即先对特定z求切片面积，再对z求积分$</li><li>$[\iint<em>{D} dx dy] \int</em>{\psi(x, y)}^{\varphi(x, y)} f(x, y, z) dz即在xOy平面投影，作垂线，两个交点，做差，再对投影面积积分$</li></ul></li><li>不需要在意原理，只需知道两两可以交换次序（变成二重积分）<ul><li>$(\int_a^b dx \int_c^d dy) \int_e^f dz$</li><li>$\int_a^b dx (\int_c^d dy \int_e^f dz)$</li></ul></li></ul><h3 id="三重积分的换元"><a href="#三重积分的换元" class="headerlink" title="三重积分的换元"></a><strong>三重积分的换元</strong></h3><h2 id="关键是雅可比行列式-frac-partial-x-y-partial-u-v"><a href="#关键是雅可比行列式-frac-partial-x-y-partial-u-v" class="headerlink" title="$关键是雅可比行列式\frac{\partial(x, y)}{\partial(u, v)}$"></a>$关键是雅可比行列式\frac{\partial(x, y)}{\partial(u, v)}$</h2><h2 id="曲线与曲面积分"><a href="#曲线与曲面积分" class="headerlink" title="曲线与曲面积分"></a><strong>曲线与曲面积分</strong></h2><h3 id="第一型曲线积分"><a href="#第一型曲线积分" class="headerlink" title="第一型曲线积分"></a>第一型曲线积分</h3><p>可以理解成线密度质量的模型</p><p>由于微分转化的时候用的是平方，无方向</p><ul><li>$做计算题， 一般给出的形式为\int_L f(x, y, z) ds$<ul><li>用参数来表示</li><li>$ds = \sqrt{x’^2(t) + y’^2(t) + z’^2(t)} dt$</li><li>转化为普通定积分</li></ul></li></ul><h3 id="第二型曲线积分"><a href="#第二型曲线积分" class="headerlink" title="第二型曲线积分"></a>第二型曲线积分</h3><p>可以理解成变力做功的模型</p><p>dx/dy/dz给定了方向</p><ul><li>$做计算题，一般给出的形式为\int<em>{L</em>{ab}} (x^2 + y^2) dx + 4xy dy$<ul><li>寻找参数（可以是极坐标也可以是曲线方程）</li><li>对参数求导，转化微分</li><li>带入，转化为普通定积分求解</li></ul></li></ul><h3 id="第一型曲面积分"><a href="#第一型曲面积分" class="headerlink" title="第一型曲面积分"></a>第一型曲面积分</h3><p>最显著的特征在于，积分区域变了，原来是XoY平面，现在变成了某一曲面</p><p>可以将函数看作是曲面的面密度（与方向没有任何关系）</p><p>思想：将曲面投影到XoY平面，曲面上的一点唯一对应XoY上的一点，面积之比为这个点的梯度。从而转化为熟知的二重积分。</p><ul><li>$做计算题，一般给出的形式为\iint_S xyz ds$<ul><li>$\iint_S f(x, y, z) ds = \iint_D f(x, y, z(x, y)) \sqrt{1 + z_x^2(x, y) + z_y^2(x, y)} dx dy$</li><li>转化为重积分解决</li></ul></li><li>如果用参数表示，只需要<ul><li>$r_u = \left( \frac{\partial x}{\partial u}, \frac{\partial y}{\partial u}, \frac{\partial z}{\partial u} \right) \ r_v = \left( \frac{\partial x}{\partial v}, \frac{\partial y}{\partial v}, \frac{\partial z}{\partial v} \right)$</li><li>$E = r_u \cdot r_u, F = r_u \cdot r_v, G = r_v \cdot r_v$</li><li>$ds = \sqrt{EG - F^2} dx dy$</li><li>转化为重积分解决</li></ul></li><li>$特别地，如果三维的积分区域退化到二维，偏导数项为0，\iint_S f(x, y, z) ds = \iint_D f(x, y, z(x, y)) dx dy也就是一个普通的二重积分$</li></ul><h3 id="第二型曲面积分"><a href="#第二型曲面积分" class="headerlink" title="第二型曲面积分"></a>第二型曲面积分</h3><p>$本质上是通过法向量\overrightarrow{n} = (\cos \alpha, \cos \beta, \cos \gamma)来链接，\overrightarrow{n} \cdot d\overrightarrow{s} = (dy dz, dz dx, dx dy)$</p><ul><li>$做计算题，一般给出的形式为I = \iint_S x dy dz + y dz dx + z dx dy$<ul><li>看有无对称性</li><li>投影到对应平面</li><li>消元（用已知量或者方程带入）</li><li>转化为重积分解决</li></ul></li></ul><h2 id="各种积分之间的联系"><a href="#各种积分之间的联系" class="headerlink" title="各种积分之间的联系"></a><strong>各种积分之间的联系</strong></h2><h3 id="格林公式"><a href="#格林公式" class="headerlink" title="格林公式"></a><strong>格林公式</strong></h3><p>$由逐段光滑的曲线围成的单连通区域, P、Q有一阶连续偏导数\ \iint_D \left( \frac{\partial Q}{\partial x} - \frac{\partial P}{\partial y} \right) dx dy = \oint_L P dx + Q dy$</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a><strong>补充</strong></h2><ul><li>补充克拉默法则<ul><li>$对于一个二元一次方程组：\ a_1 x + b_1 y = c_1\ a_2 x + b_2 y = c_2\ 其中，a_1、b_1、c_1、a_2、b_2、c_2都是已知的常数，而x和y是未知数。\根据克拉默法则，方程组的解可以通过以下公式来表示：\ x = \frac{D_1}{D}, \space y = \frac{D_2}{D}\ 其中，D是方程组的系数行列式，\D_1是将方程组的常数列替换掉x的系数列所得到的行列式，\D_2是将方程组的常数列替换掉y的系数列所得到的行列式。$</li></ul></li><li>处理$\int \sec^3 x dx$<ul><li>我们用分部积分，可以实现降次</li><li>$\int \sec^3 x dx = \int \sec x d(\tan x) = \sec x \tan x - \int \tan x d(\sec x)\ 而\int \tan x d(\sec x) = \int \tan^2 x \sec x dx = \int (\sec^2 x - 1) \sec x dx = \int (\sec^3 x - \sec x) dx$</li><li>接下来移项即可</li></ul></li></ul><h2 id="期末考试押题"><a href="#期末考试押题" class="headerlink" title="期末考试押题"></a><strong>期末考试押题</strong></h2><ul><li>2*广义积分<ul><li>迪利克雷/Abel</li></ul></li><li>函数项级数的收敛域<ul><li>根值法</li><li>达朗贝尔</li></ul></li><li>幂级数的和函数（展开）<ol><li>收敛域</li><li>看模板</li><li>有分母微分，无分母积分</li><li>结合实际情况写出收敛域（否则扣分</li></ol></li><li>傅里叶级数的展开<ul><li>延拓</li></ul></li><li>求偏导数<ul><li>链式法则</li><li>方程组</li><li>隐函数求解法</li></ul></li><li>极值与条件极值<ul><li>拉格朗日乘数法</li></ul></li><li>二元的微分中值定理</li><li>重积分</li><li>第一、二型曲线积分<ul><li>参数化表示</li></ul></li><li>格林公式<ul><li>积分与路径无关</li><li>求原函数</li></ul></li><li>第一型曲面积分</li></ul>]]></content>
    
    
    <categories>
      
      <category>Learnings</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
